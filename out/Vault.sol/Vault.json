{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IAuthorizer",
          "name": "authorizer",
          "type": "address"
        },
        {
          "internalType": "contract IWETH",
          "name": "weth",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pauseWindowDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bufferPeriodDuration",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IAuthorizer",
          "name": "newAuthorizer",
          "type": "address"
        }
      ],
      "name": "AuthorizerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ExternalBalanceTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IFlashLoanRecipient",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        }
      ],
      "name": "FlashLoan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "delta",
          "type": "int256"
        }
      ],
      "name": "InternalBalanceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "PausedStateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidityProvider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "int256[]",
          "name": "deltas",
          "type": "int256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "protocolFeeAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "PoolBalanceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "assetManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "cashDelta",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "managedDelta",
          "type": "int256"
        }
      ],
      "name": "PoolBalanceManaged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum IVault.PoolSpecialization",
          "name": "specialization",
          "type": "uint8"
        }
      ],
      "name": "PoolRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "RelayerApprovalChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "TokensDeregistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "assetManagers",
          "type": "address[]"
        }
      ],
      "name": "TokensRegistered",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "contract IWETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IVault.SwapKind",
          "name": "kind",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "assetInIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "assetOutIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "userData",
              "type": "bytes"
            }
          ],
          "internalType": "struct IVault.BatchSwapStep[]",
          "name": "swaps",
          "type": "tuple[]"
        },
        {
          "internalType": "contract IAsset[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "fromInternalBalance",
              "type": "bool"
            },
            {
              "internalType": "address payable",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "toInternalBalance",
              "type": "bool"
            }
          ],
          "internalType": "struct IVault.FundManagement",
          "name": "funds",
          "type": "tuple"
        },
        {
          "internalType": "int256[]",
          "name": "limits",
          "type": "int256[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "batchSwap",
      "outputs": [
        {
          "internalType": "int256[]",
          "name": "assetDeltas",
          "type": "int256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "deregisterTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "recipient",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IAsset[]",
              "name": "assets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "minAmountsOut",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes",
              "name": "userData",
              "type": "bytes"
            },
            {
              "internalType": "bool",
              "name": "toInternalBalance",
              "type": "bool"
            }
          ],
          "internalType": "struct IVault.ExitPoolRequest",
          "name": "request",
          "type": "tuple"
        }
      ],
      "name": "exitPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IFlashLoanRecipient",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "userData",
          "type": "bytes"
        }
      ],
      "name": "flashLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "getActionId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuthorizer",
      "outputs": [
        {
          "internalType": "contract IAuthorizer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDomainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "getInternalBalance",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getNextNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPausedState",
      "outputs": [
        {
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "pauseWindowEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bufferPeriodEndTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        }
      ],
      "name": "getPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "enum IVault.PoolSpecialization",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getPoolTokenInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "cash",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "managed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastChangeBlock",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "assetManager",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        }
      ],
      "name": "getPoolTokens",
      "outputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "lastChangeBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProtocolFeesCollector",
      "outputs": [
        {
          "internalType": "contract ProtocolFeesCollector",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        }
      ],
      "name": "hasApprovedRelayer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IAsset[]",
              "name": "assets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "maxAmountsIn",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes",
              "name": "userData",
              "type": "bytes"
            },
            {
              "internalType": "bool",
              "name": "fromInternalBalance",
              "type": "bool"
            }
          ],
          "internalType": "struct IVault.JoinPoolRequest",
          "name": "request",
          "type": "tuple"
        }
      ],
      "name": "joinPool",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum IVault.PoolBalanceOpKind",
              "name": "kind",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32"
            },
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IVault.PoolBalanceOp[]",
          "name": "ops",
          "type": "tuple[]"
        }
      ],
      "name": "managePoolBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum IVault.UserBalanceOpKind",
              "name": "kind",
              "type": "uint8"
            },
            {
              "internalType": "contract IAsset",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "recipient",
              "type": "address"
            }
          ],
          "internalType": "struct IVault.UserBalanceOp[]",
          "name": "ops",
          "type": "tuple[]"
        }
      ],
      "name": "manageUserBalance",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IVault.SwapKind",
          "name": "kind",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "assetInIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "assetOutIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "userData",
              "type": "bytes"
            }
          ],
          "internalType": "struct IVault.BatchSwapStep[]",
          "name": "swaps",
          "type": "tuple[]"
        },
        {
          "internalType": "contract IAsset[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "fromInternalBalance",
              "type": "bool"
            },
            {
              "internalType": "address payable",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "toInternalBalance",
              "type": "bool"
            }
          ],
          "internalType": "struct IVault.FundManagement",
          "name": "funds",
          "type": "tuple"
        }
      ],
      "name": "queryBatchSwap",
      "outputs": [
        {
          "internalType": "int256[]",
          "name": "",
          "type": "int256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IVault.PoolSpecialization",
          "name": "specialization",
          "type": "uint8"
        }
      ],
      "name": "registerPool",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "assetManagers",
          "type": "address[]"
        }
      ],
      "name": "registerTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAuthorizer",
          "name": "newAuthorizer",
          "type": "address"
        }
      ],
      "name": "setAuthorizer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "setPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setRelayerApproval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32"
            },
            {
              "internalType": "enum IVault.SwapKind",
              "name": "kind",
              "type": "uint8"
            },
            {
              "internalType": "contract IAsset",
              "name": "assetIn",
              "type": "address"
            },
            {
              "internalType": "contract IAsset",
              "name": "assetOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "userData",
              "type": "bytes"
            }
          ],
          "internalType": "struct IVault.SingleSwap",
          "name": "singleSwap",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "fromInternalBalance",
              "type": "bool"
            },
            {
              "internalType": "address payable",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "toInternalBalance",
              "type": "bool"
            }
          ],
          "internalType": "struct IVault.FundManagement",
          "name": "funds",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountCalculated",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "bytecode": {
    "object": "0x6101806040523480156200001257600080fd5b5060405162006d1138038062006d11833981016040819052620000359162000253565b8382826040518060400160405280601181526020017010985b185b98d95c88158c8815985d5b1d607a1b81525080604051806040016040528060018152602001603160f81b815250306001600160a01b031660001b89806001600160a01b03166080816001600160a01b031660601b815250505030604051620000b89062000245565b620000c491906200029f565b604051809103906000f080158015620000e1573d6000803e3d6000fd5b5060601b6001600160601b03191660a052600160005560c052815160209283012060e052805191012061010052507f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61012052620001486276a70083111561019462000181565b6200015c62278d0082111561019562000181565b429091016101408190520161016052620001768162000196565b5050505050620002cc565b8162000192576200019281620001f2565b5050565b6040516001600160a01b038216907f94b979b6831a51293e2641426f97747feed46f17779fed9cd18d1ecefcfe92ef90600090a2600380546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b62461bcd60e51b6000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b610b05806200620c83390190565b6000806000806080858703121562000269578384fd5b84516200027681620002b3565b60208601519094506200028981620002b3565b6040860151606090960151949790965092505050565b6001600160a01b0391909116815260200190565b6001600160a01b0381168114620002c957600080fd5b50565b60805160601c60a05160601c60c05160e05161010051610120516101405161016051615edc6200033060003980611a6c525080611a485250806127f65250806128385250806128175250806110c352508061137c5250806105085250615edc6000f3fe6080604052600436106101855760003560e01c8063945bcec9116100d1578063e6c460921161008a578063f84d066e11610064578063f84d066e1461046a578063f94d46681461048a578063fa6e671d146104b9578063fec90d72146104d9576101b3565b8063e6c4609214610407578063ed24911d14610427578063f6c009271461043c576101b3565b8063945bcec914610365578063aaabadc514610378578063ad5c46481461039a578063b05f8e48146103af578063b95cac28146103df578063d2946c2b146103f2576101b3565b806352bbbe291161013e5780637d3aeb96116101185780637d3aeb96146102e5578063851c1bb3146103055780638bdb39131461032557806390193b7c14610345576101b3565b806352bbbe29146102925780635c38449e146102a557806366a9c7d2146102c5576101b3565b8063058a628f146101b857806309b2760f146101d85780630e8e3e841461020e5780630f5a6efa1461022157806316c38b3c1461024e5780631c0de0511461026e576101b3565b366101b3576101b1610195610506565b6001600160a01b0316336001600160a01b03161461020661052b565b005b600080fd5b3480156101c457600080fd5b506101b16101d3366004615177565b61053d565b3480156101e457600080fd5b506101f86101f336600461572c565b610561565b6040516102059190615d12565b60405180910390f35b6101b161021c366004615352565b610614565b34801561022d57600080fd5b5061024161023c366004615215565b610750565b6040516102059190615cdc565b34801561025a57600080fd5b506101b16102693660046154a6565b6107e5565b34801561027a57600080fd5b506102836107fe565b60405161020593929190615cfa565b6101f86102a03660046158d1565b610827565b3480156102b157600080fd5b506101b16102c03660046156a2565b6109c8565b3480156102d157600080fd5b506101b16102e036600461558d565b610dca565b3480156102f157600080fd5b506101b161030036600461555f565b610f69565b34801561031157600080fd5b506101f861032036600461567a565b6110bd565b34801561033157600080fd5b506101b16103403660046154f6565b611116565b34801561035157600080fd5b506101f8610360366004615177565b61112c565b6102416103733660046157ca565b611147565b34801561038457600080fd5b5061038d61127b565b6040516102059190615b71565b3480156103a657600080fd5b5061038d61128f565b3480156103bb57600080fd5b506103cf6103ca366004615656565b61129e565b6040516102059493929190615e12565b6101b16103ed3660046154f6565b611361565b3480156103fe57600080fd5b5061038d61137a565b34801561041357600080fd5b506101b1610422366004615262565b61139e565b34801561043357600080fd5b506101f86114ba565b34801561044857600080fd5b5061045c6104573660046154de565b6114c4565b604051610205929190615b85565b34801561047657600080fd5b50610241610485366004615748565b6114ee565b34801561049657600080fd5b506104aa6104a53660046154de565b6115d2565b60405161020593929190615ca6565b3480156104c557600080fd5b506101b16104d43660046151cb565b611606565b3480156104e557600080fd5b506104f96104f4366004615193565b611698565b6040516102059190615cef565b7f00000000000000000000000000000000000000000000000000000000000000005b90565b8161053957610539816116ad565b5050565b610545611700565b61054d611719565b61055681611747565b61055e6117a3565b50565b600061056b611700565b6105736117aa565b600061058233846006546117bf565b6000818152600560205260409020549091506105a49060ff16156101f461052b565b60008181526005602052604090819020805460ff1916600190811790915560068054909101905551339082907f3c13bc30b8e878c53fd2a36b679409c073afd75950be43d8858768e956fbc20e906105fd908790615d98565b60405180910390a3905061060f6117a3565b919050565b61061c611700565b6000806000805b845181101561073b5760008060008060006106518a878151811061064357fe5b6020026020010151896117fe565b9c50939850919650945092509050600185600381111561066d57fe5b14156106845761067f84838386611876565b61072a565b86610696576106916117aa565b600196505b60008560038111156106a457fe5b14156106d5576106b684838386611899565b6106bf846118b9565b1561067f576106ce89846118c6565b985061072a565b6106ea6106e1856118b9565b1561020761052b565b60006106f585610528565b9050600286600381111561070557fe5b141561071c57610717818484876118d8565b610728565b610728818484876118f1565b505b505060019093019250610623915050565b506107458361195f565b50505061055e6117a3565b606081516001600160401b038111801561076957600080fd5b50604051908082528060200260200182016040528015610793578160200160208202803683370190505b50905060005b82518110156107de576107bf848483815181106107b257fe5b6020026020010151611982565b8282815181106107cb57fe5b6020908102919091010152600101610799565b5092915050565b6107ed611700565b6107f5611719565b610556816119ad565b600080600061080b611a29565b159250610816611a46565b9150610820611a6a565b9050909192565b6000610831611700565b6108396117aa565b835161084481611a8e565b610853834211156101fc61052b565b61086660008760800151116101fe61052b565b60006108758760400151611ac0565b905060006108868860600151611ac0565b90506108a9816001600160a01b0316836001600160a01b031614156101fd61052b565b6108b1614c98565b885160808201526020890151819060018111156108ca57fe5b908160018111156108d757fe5b9052506001600160a01b03808416602083015282811660408084019190915260808b0151606084015260a08b01516101008401528951821660c08401528901511660e082015260008061092983611ae5565b9198509250905061096060008c60200151600181111561094557fe5b146109535789831115610958565b898210155b6101fb61052b565b6109788b60400151838c600001518d60200151611bd9565b6109908b60600151828c604001518d60600151611cb7565b6109b26109a08c604001516118b9565b6109ab5760006109ad565b825b61195f565b5050505050506109c06117a3565b949350505050565b6109d0611700565b6109d86117aa565b6109e483518351611d91565b600083516001600160401b03811180156109fd57600080fd5b50604051908082528060200260200182016040528015610a27578160200160208202803683370190505b509050600084516001600160401b0381118015610a4357600080fd5b50604051908082528060200260200182016040528015610a6d578160200160208202803683370190505b5090506000805b8651811015610be6576000878281518110610a8b57fe5b602002602001015190506000878381518110610aa357fe5b60200260200101519050610aee846001600160a01b0316836001600160a01b03161160006001600160a01b0316846001600160a01b031614610ae6576066610ae9565b60685b61052b565b819350816001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610b1d9190615b71565b60206040518083038186803b158015610b3557600080fd5b505afa158015610b49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6d91906159b3565b858481518110610b7957fe5b602002602001018181525050610b8e81611d9e565b868481518110610b9a57fe5b602002602001018181525050610bc881868581518110610bb657fe5b6020026020010151101561021061052b565b610bdc6001600160a01b0383168b83611e25565b5050600101610a74565b5060405163f04f270760e01b81526001600160a01b0388169063f04f270790610c19908990899088908a90600401615c59565b600060405180830381600087803b158015610c3357600080fd5b505af1158015610c47573d6000803e3d6000fd5b5050505060005b8651811015610db8576000878281518110610c6557fe5b602002602001015190506000848381518110610c7d57fe5b602002602001015190506000826001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610cb59190615b71565b60206040518083038186803b158015610ccd57600080fd5b505afa158015610ce1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0591906159b3565b9050610d168282101561020361052b565b60008282039050610d3f888681518110610d2c57fe5b602002602001015182101561025a61052b565b610d498482611e77565b836001600160a01b03168c6001600160a01b03167f0d7d75e01ab95780d3cd1c8ec0dd6c2ce19e3a20427eec8bf53283b6fb8e95f08c8881518110610d8a57fe5b602002602001015184604051610da1929190615da6565b60405180910390a350505050806001019050610c4e565b50505050610dc46117a3565b50505050565b610dd2611700565b610dda6117aa565b82610de481611e99565b610df083518351611d91565b60005b8351811015610e8e576000848281518110610e0a57fe5b60200260200101519050610e3660006001600160a01b0316826001600160a01b0316141561013561052b565b838281518110610e4257fe5b6020908102919091018101516000888152600a835260408082206001600160a01b0395861683529093529190912080546001600160a01b03191692909116919091179055600101610df3565b506000610e9a85611eca565b90506002816002811115610eaa57fe5b1415610ef857610ec0845160021461020c61052b565b610ef38585600081518110610ed157fe5b602002602001015186600181518110610ee657fe5b6020026020010151611ee4565b610f20565b6001816002811115610f0657fe5b1415610f1657610ef38585611f90565b610f208585611fe8565b847ff5847d3f2197b16cdcd2098ec95d0905cd1abdaf415f07bb7cef2bba8ac5dec48585604051610f52929190615bce565b60405180910390a25050610f646117a3565b505050565b610f71611700565b610f796117aa565b81610f8381611e99565b6000610f8e84611eca565b90506002816002811115610f9e57fe5b1415610fec57610fb4835160021461020c61052b565b610fe78484600081518110610fc557fe5b602002602001015185600181518110610fda57fe5b602002602001015161203d565b611014565b6001816002811115610ffa57fe5b141561100a57610fe784846120ab565b6110148484612165565b60005b835181101561107a57600a6000868152602001908152602001600020600085838151811061104157fe5b6020908102919091018101516001600160a01b0316825281019190915260400160002080546001600160a01b0319169055600101611017565b50837f7dcdc6d02ef40c7c1a7046a011b058bd7f988fa14e20a66344f9d4e60657d610846040516110ab9190615bbb565b60405180910390a250506105396117a3565b604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091526001600160e01b03198416828401528251602481840301815260449092019092528051910120919050565b610dc46001858585611127866121c8565b6121d4565b6001600160a01b031660009081526002602052604090205490565b6060611151611700565b6111596117aa565b835161116481611a8e565b611173834211156101fc61052b565b61117f86518551611d91565b61118b8787878b61235a565b91506000805b875181101561125d5760008882815181106111a857fe5b6020026020010151905060008583815181106111c057fe5b602002602001015190506111ec8884815181106111d957fe5b60200260200101518213156101fb61052b565b600081131561122c57885160208a0151829161120b9185918491611bd9565b611214836118b9565b156112265761122385826118c6565b94505b50611253565b600081121561125357600081600003905061125183828c604001518d60600151611cb7565b505b5050600101611191565b506112678161195f565b50506112716117a3565b9695505050505050565b60035461010090046001600160a01b031690565b6000611299610506565b905090565b600080600080856112ae816125e8565b6000806112ba89611eca565b905060028160028111156112ca57fe5b14156112e1576112da8989612606565b915061130c565b60018160028111156112ef57fe5b14156112ff576112da8989612680565b61130989896126ee565b91505b61131582612706565b965061132082612712565b955061132b82612721565b6000998a52600a60209081526040808c206001600160a01b039b8c168d5290915290992054969995989796909616955050505050565b6113696117aa565b610dc46000858585611127866121c8565b7f000000000000000000000000000000000000000000000000000000000000000090565b6113a6611700565b6113ae6117aa565b6113b6614ce8565b60005b82518110156114b0578281815181106113ce57fe5b602002602001015191506000826020015190506113ea816125e8565b60408301516114046113fc8383612727565b61020961052b565b6000828152600a602090815260408083206001600160a01b038581168552925290912054611437911633146101f661052b565b8351606085015160008061144d84878786612783565b91509150846001600160a01b0316336001600160a01b0316877f6edcaf6241105b4c94c2efdbf3a6b12458eb3d07be3a0e81d24b13c44045fe7a8585604051611497929190615da6565b60405180910390a45050505050508060010190506113b9565b505061055e6117a3565b60006112996127f2565b600080826114d1816125e8565b6114da846128b0565b6114e385611eca565b925092505b50915091565b60603330146115a8576000306001600160a01b0316600036604051611514929190615b3a565b6000604051808303816000865af19150503d8060008114611551576040519150601f19603f3d011682016040523d82523d6000602084013e611556565b606091505b50509050806000811461156557fe5b60046000803e6000516001600160e01b031916637d30e60960e11b8114611590573d6000803e3d6000fd5b50602060005260043d0380600460203e602081016000f35b60006115b68585858961235a565b9050602081510263fa61cc126020830352600482036024820181fd5b6060806000836115e1816125e8565b60606115ec866128b6565b90955090506115fa81612918565b95979096509350505050565b61160e611700565b6116166117aa565b8261162081611a8e565b6001600160a01b0384811660008181526004602090815260408083209488168084529490915290819020805460ff1916861515179055519091907f46961fdb4502b646d5095fba7600486a8ac05041d55cdf0f16ed677180b5cad890611687908690615cef565b60405180910390a350610f646117a3565b60006116a483836129c6565b90505b92915050565b62461bcd60e51b6000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b6117126002600054141561019061052b565b6002600055565b60006117306000356001600160e01b0319166110bd565b905061055e61173f82336129f4565b61019161052b565b6040516001600160a01b038216907f94b979b6831a51293e2641426f97747feed46f17779fed9cd18d1ecefcfe92ef90600090a2600380546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b6001600055565b6117bd6117b5611a29565b61019261052b565b565b600069ffffffffffffffffffff821660508460028111156117dc57fe5b901b17606085901b6bffffffffffffffffffffffff19161790505b9392505050565b600080600080600080600088606001519050336001600160a01b0316816001600160a01b031614611850578761183b57611836611719565b600197505b61185061184882336129c6565b6101f761052b565b885160208a015160408b01516080909b0151919b909a9992985090965090945092505050565b61188b8361188386611ac0565b836000612a7e565b50610dc48482846000611cb7565b6118ac826118a686611ac0565b83612ad4565b610dc48482856000611bd9565b6001600160a01b03161590565b60008282016116a4848210158361052b565b6118e58385836000612a7e565b50610dc4828583612ad4565b8015610dc45761190c6001600160a01b038516848484612b04565b826001600160a01b0316846001600160a01b03167f540a1a3f28340caec336c81d8d7b3df139ee5cdc1839a4f283d7ebb7eaae2d5c8484604051611951929190615ba2565b60405180910390a350505050565b61196e8134101561020461052b565b348190038015610539576105393382612b5e565b6001600160a01b039182166000908152600b6020908152604080832093909416825291909152205490565b80156119cd576119c86119be611a46565b421061019361052b565b6119e2565b6119e26119d8611a6a565b42106101a961052b565b6003805482151560ff19909116811790915560408051918252517f9e3a5e37224532dea67b89face185703738a228a6e8a23dee546960180d3be649181900360200190a150565b6000611a33611a6a565b42118061129957505060035460ff161590565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b336001600160a01b0382161461055e57611aa6611719565b611ab081336129c6565b61055e5761055e816101f7612bcd565b6000611acb826118b9565b611add57611ad882610528565b6116a7565b6116a7610506565b600080600080611af885608001516128b0565b90506000611b098660800151611eca565b90506002816002811115611b1957fe5b1415611b3057611b298683612c01565b9450611b5b565b6001816002811115611b3e57fe5b1415611b4e57611b298683612cb1565b611b588683612d44565b94505b611b6e8660000151876060015187612f68565b809450819550505085604001516001600160a01b031686602001516001600160a01b031687608001517f2170c741c41531aec20e7c107c24eecfdd15e69c9bb0a8dd37b1840b9e0b207b8787604051611bc8929190615da6565b60405180910390a450509193909250565b82611be357610dc4565b611bec846118b9565b15611c6d57611bfe811561020261052b565b611c0d8347101561020461052b565b611c15610506565b6001600160a01b031663d0e30db0846040518263ffffffff1660e01b81526004016000604051808303818588803b158015611c4f57600080fd5b505af1158015611c63573d6000803e3d6000fd5b5050505050610dc4565b6000611c7885610528565b90508115611c95576000611c8f8483876001612a7e565b90940393505b8315611cb057611cb06001600160a01b038216843087612b04565b5050505050565b82611cc157610dc4565b611cca846118b9565b15611d5a57611cdc811561020261052b565b611ce4610506565b6001600160a01b0316632e1a7d4d846040518263ffffffff1660e01b8152600401611d0f9190615d12565b600060405180830381600087803b158015611d2957600080fd5b505af1158015611d3d573d6000803e3d6000fd5b50611d55925050506001600160a01b03831684612b5e565b610dc4565b6000611d6585610528565b90508115611d7d57611d78838286612ad4565b611cb0565b611cb06001600160a01b0382168486611e25565b610539818314606761052b565b600080611da961137a565b6001600160a01b031663d877845c6040518163ffffffff1660e01b815260040160206040518083038186803b158015611de157600080fd5b505afa158015611df5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1991906159b3565b90506117f78382612f96565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610f64908490612fe3565b801561053957610539611e8861137a565b6001600160a01b0384169083611e25565b611ea2816125e8565b61055e611eae826128b0565b6001600160a01b0316336001600160a01b0316146101f561052b565b600061ffff605083901c166116a7600382106101f461052b565b611f05816001600160a01b0316836001600160a01b0316141561020a61052b565b611f24816001600160a01b0316836001600160a01b031610606661052b565b60008381526009602052604090208054611f61906001600160a01b0316158015611f59575060018201546001600160a01b0316155b61020b61052b565b80546001600160a01b039384166001600160a01b03199182161782556001909101805492909316911617905550565b6000828152600860205260408120905b8251811015610dc4576000611fd1848381518110611fba57fe5b6020026020010151846130cd90919063ffffffff16565b9050611fdf8161020a61052b565b50600101611fa0565b6000828152600160205260408120905b8251811015610dc457600061202684838151811061201257fe5b602090810291909101015184906000613130565b90506120348161020a61052b565b50600101611ff8565b600080600061204d8686866131dd565b92509250925061207761205f846132a4565b801561206f575061206f836132a4565b61020d61052b565b600095865260096020526040862080546001600160a01b031990811682556001909101805490911690559490945550505050565b6000828152600860205260408120905b8251811015610dc45760008382815181106120d257fe5b6020026020010151905061211e61206f600760008881526020019081526020016000206000846001600160a01b03166001600160a01b03168152602001908152602001600020546132a4565b60008581526007602090815260408083206001600160a01b0385168452909152812081905561214d84836132b1565b905061215b8161020961052b565b50506001016120bb565b6000828152600160205260408120905b8251811015610dc457600083828151811061218c57fe5b6020026020010151905060006121a284836133b8565b90506121b061206f826132a4565b6121ba84836133c7565b505050806001019050612175565b6121d0614d11565b5090565b6121dc611700565b836121e6816125e8565b836121f081611a8e565b612204836000015151846020015151611d91565b60006122138460000151613469565b9050600061222188836134f8565b905060008060006122368c8c8c8c8c89613589565b92509250925060006122478c611eca565b9050600281600281111561225757fe5b14156122bf576122ba8c8760008151811061226e57fe5b60200260200101518660008151811061228357fe5b60200260200101518960018151811061229857fe5b6020026020010151886001815181106122ad57fe5b602002602001015161374e565b6122e8565b60018160028111156122cd57fe5b14156122de576122ba8c878661378d565b6122e88c856137fa565b6000808e60018111156122f757fe5b1490508b6001600160a01b03168d7fe5ce249087ce04f05a957192435400fd97868dba0e6a4b4c049abf8af80dae78896123318886613843565b8760405161234193929190615c20565b60405180910390a3505050505050505050611cb06117a3565b606083516001600160401b038111801561237357600080fd5b5060405190808252806020026020018201604052801561239d578160200160208202803683370190505b5090506123a8614d3b565b6123b0614c98565b60008060005b89518110156125db578981815181106123cb57fe5b602002602001015194506000895186602001511080156123ef575089518660400151105b90506123fc81606461052b565b600061241e8b88602001518151811061241157fe5b6020026020010151611ac0565b905060006124358c89604001518151811061241157fe5b9050612458816001600160a01b0316836001600160a01b031614156101fd61052b565b60608801516124a857612470600085116101fe61052b565b600061247d8b84846138ea565b6001600160a01b0316876001600160a01b031614905061249f816101ff61052b565b50606088018590525b87516080880152868a60018111156124bc57fe5b908160018111156124c957fe5b9052506001600160a01b0380831660208901528181166040808a01919091526060808b0151908a015260808a01516101008a01528c51821660c08a01528c01511660e088015260008061251b89611ae5565b9198509250905061252d8c858561390c565b975061256161253b83613926565b8c8c602001518151811061254b57fe5b602002602001015161393a90919063ffffffff16565b8b8b602001518151811061257157fe5b6020026020010181815250506125af61258982613926565b8c8c604001518151811061259957fe5b602002602001015161396e90919063ffffffff16565b8b8b60400151815181106125bf57fe5b60200260200101818152505050505050508060010190506123b6565b5050505050949350505050565b60008181526005602052604090205461055e9060ff166101f461052b565b6000806000806000612617876139a2565b945094509450945050836001600160a01b0316866001600160a01b0316141561264657829450505050506116a7565b816001600160a01b0316866001600160a01b0316141561266b5793506116a792505050565b6126766102096116ad565b5050505092915050565b60008281526007602090815260408083206001600160a01b0385168452909152812054816126ad82613a18565b806126cb575060008581526008602052604090206126cb9085613a2a565b9050806126e6576126db856125e8565b6126e66102096116ad565b509392505050565b60008281526001602052604081206109c081846133b8565b6001600160701b031690565b60701c6001600160701b031690565b60e01c90565b60008061273384611eca565b9050600281600281111561274357fe5b141561275b576127538484613a4b565b9150506116a7565b600181600281111561276957fe5b1415612779576127538484613a9c565b6127538484613ab4565b600080600061279186611eca565b905060008760028111156127a157fe5b14156127bd576127b386828787613acc565b92509250506127e9565b60018760028111156127cb57fe5b14156127dd576127b386828787613b47565b6127b386828787613bc3565b94509492505050565b60007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061285f613c26565b3060405160200180868152602001858152602001848152602001838152602001826001600160a01b031681526020019550505050505060405160208183030381529060405280519060200120905090565b60601c90565b60608060006128c484611eca565b905060028160028111156128d457fe5b14156128ed576128e384613c2a565b9250925050612913565b60018160028111156128fb57fe5b141561290a576128e384613d5f565b6128e384613e84565b915091565b6060600082516001600160401b038111801561293357600080fd5b5060405190808252806020026020018201604052801561295d578160200160208202803683370190505b5091506000905060005b82518110156114e857600084828151811061297e57fe5b6020026020010151905061299181613f7e565b84838151811061299d57fe5b6020026020010181815250506129bb836129b683612721565b613f99565b925050600101612967565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205460ff1690565b6003546040516326f8aa2160e21b815260009161010090046001600160a01b031690639be2a88490612a2e90869086903090600401615d1b565b60206040518083038186803b158015612a4657600080fd5b505afa158015612a5a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a491906154c2565b600080612a8b8686611982565b9050612aa48380612a9c5750848210155b61020161052b565b612aae8185613fb0565b9150818103612aca878783612ac287613926565b600003613fbf565b5050949350505050565b6000612ae08484611982565b90506000612aee82846118c6565b9050611cb0858583612aff87613926565b613fbf565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610dc4908590612fe3565b612b6d814710156101a361052b565b6040516000906001600160a01b0384169083908381818185875af1925050503d8060008114612bb8576040519150601f19603f3d011682016040523d82523d6000602084013e612bbd565b606091505b50509050610f64816101a461052b565b6001600160a01b0382166000908152600260205260409020805460018101909155610f64612bfb848361401a565b8361052b565b600080600080612c1e8660800151876020015188604001516131dd565b92509250925060008087604001516001600160a01b031688602001516001600160a01b03161015612c53575083905082612c59565b50829050835b612c6588888484614168565b60408b015160208c01519199509294509092506001600160a01b03918216911610612c9957612c948183614265565b612ca3565b612ca38282614265565b909255509295945050505050565b600080612cc684608001518560200151612680565b90506000612cdc85608001518660400151612680565b9050612cea85858484614168565b6080880180516000908152600760208181526040808420828e01516001600160a01b03908116865290835281852098909855935183529081528282209a830151909516815298909352919096209590955550929392505050565b60808201516000908152600160209081526040822090840151829182918290612d6e9083906142a0565b90506000612d898860400151846142a090919063ffffffff16565b9050811580612d96575080155b15612db357612da888608001516125e8565b612db36102096116ad565b60001991820191016000612dc6846142bf565b90506000816001600160401b0381118015612de057600080fd5b50604051908082528060200260200182016040528015612e0a578160200160208202803683370190505b50600060a08c018190529091505b82811015612e8a576000612e2c87836142c3565b9050612e3781613f7e565b838381518110612e4357fe5b602002602001018181525050612e608c60a001516129b683612721565b60a08d015281861415612e7557809850612e81565b84821415612e81578097505b50600101612e18565b5060405162f64aa560e11b81526001600160a01b038a16906301ec954a90612ebc908d90859089908990600401615db4565b602060405180830381600087803b158015612ed657600080fd5b505af1158015612eea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f0e91906159b3565b9750600080612f268c600001518d606001518c612f68565b9092509050612f3589836142d9565b9850612f41888261430a565b9750612f4e87878b614320565b612f5987868a614320565b50505050505050505092915050565b60008080856001811115612f7857fe5b1415612f88575082905081612f8e565b50819050825b935093915050565b6000828202612fba841580612fb3575083858381612fb057fe5b04145b600361052b565b80612fc95760009150506116a7565b670de0b6b3a76400006000198201046001019150506116a7565b600080836001600160a01b0316836040518082805190602001908083835b602083106130205780518252601f199092019160209182019101613001565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114613082576040519150601f19603f3d011682016040523d82523d6000602084013e613087565b606091505b5091509150600082141561309f573d6000803e3d6000fd5b610dc48151600014806130c557508180602001905160208110156130c257600080fd5b50515b6101a261052b565b60006130d98383613a2a565b61312857508154600180820184556000848152602080822090930180546001600160a01b0319166001600160a01b038616908117909155855490825282860190935260409020919091556116a7565b5060006116a7565b6001600160a01b0382166000908152600284016020526040812054806131bd57505082546040805180820182526001600160a01b03858116808352602080840187815260008781526001808c018452878220965187546001600160a01b031916961695909517865590519484019490945594820180895590835260028801909452919020919091556117f7565b6000190160009081526001808601602052604082200183905590506117f7565b60008060008060006131ef8787614338565b9150915060006131ff8383614369565b60008a81526009602090815260408083208484526002019091528120805460018201549197509293509061323283613a18565b80613241575061324182613a18565b8061326257506132518c87613a4b565b801561326257506132628c86613a4b565b90508061327d576132728c6125e8565b61327d6102096116ad565b613287838361439c565b985061329383836143c1565b975050505050505093509350939050565b6001600160e01b03161590565b6001600160a01b038116600090815260018301602052604081205480156133ae57835460001980830191908101906000908790839081106132ee57fe5b60009182526020909120015487546001600160a01b039091169150819088908590811061331757fe5b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905591831681526001898101909252604090209084019055865487908061336057fe5b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b03881682526001898101909152604082209190915594506116a79350505050565b60009150506116a7565b60006116a483836102096143d8565b6001600160a01b038116600090815260028301602052604081205480156133ae57835460001990810160008181526001878101602090815260408084209587018452808420865481546001600160a01b03199081166001600160a01b0392831617835588860180549387019390935588548216875260028d018086528488209a909a5588541690975584905593895593871682529390925281205590506116a7565b6060600082516001600160401b038111801561348457600080fd5b506040519080825280602002602001820160405280156134ae578160200160208202803683370190505b50905060005b83518110156107de576134cc84828151811061241157fe5b8282815181106134d857fe5b6001600160a01b03909216602092830291909101909101526001016134b4565b6060600080613506856128b6565b9150915061351682518551611d91565b613526600083511161020f61052b565b60005b82518110156135805761357885828151811061354157fe5b60200260200101516001600160a01b031684838151811061355e57fe5b60200260200101516001600160a01b03161461020861052b565b600101613529565b50949350505050565b606080606060008061359a86612918565b9150915060006135a98b6128b0565b905060008c60018111156135b957fe5b1461365c57806001600160a01b03166374f3b0098c8c8c87876135da614415565b8f604001516040518863ffffffff1660e01b81526004016136019796959493929190615d3a565b600060405180830381600087803b15801561361b57600080fd5b505af115801561362f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526136579190810190615450565b6136f5565b806001600160a01b031663d5c096c48c8c8c8787613678614415565b8f604001516040518863ffffffff1660e01b815260040161369f9796959493929190615d3a565b600060405180830381600087803b1580156136b957600080fd5b505af11580156136cd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526136f59190810190615450565b809550819650505061370b87518651865161448f565b60008c600181111561371957fe5b146137305761372b89898988886144a7565b61373d565b61373d8a898988886145ed565b955050505096509650969350505050565b600061375a8584614369565b600087815260096020908152604080832084845260020190915290209091506137838584614265565b9055505050505050565b60005b8251811015610dc4578181815181106137a557fe5b60200260200101516007600086815260200190815260200160002060008584815181106137ce57fe5b6020908102919091018101516001600160a01b0316825281019190915260400160002055600101613790565b6000828152600160205260408120905b8251811015610dc45761383b8184838151811061382357fe5b6020026020010151846143209092919063ffffffff16565b60010161380a565b606082516001600160401b038111801561385c57600080fd5b50604051908082528060200260200182016040528015613886578160200160208202803683370190505b50905060005b83518110156107de57826138b6578381815181106138a657fe5b60200260200101516000036138cb565b8381815181106138c257fe5b60200260200101515b8282815181106138d757fe5b602090810291909101015260010161388c565b6000808460018111156138f957fe5b1461390457816109c0565b509092915050565b60008084600181111561391b57fe5b146107de57826109c0565b60006121d0600160ff1b83106101a561052b565b60008282016116a48284128015906139525750848212155b80613967575060008412801561396757508482125b600061052b565b60008183036116a48284128015906139865750848213155b8061399b575060008412801561399b57508482135b600161052b565b6000818152600960205260408120805460018201546001600160a01b03918216928492909116908290816139d68685614369565b60008181526002840160205260409020805460018201549199509192506139fd828261439c565b9650613a0982826143c1565b94505050505091939590929450565b6000613a23826132a4565b1592915050565b6001600160a01b031660009081526001919091016020526040902054151590565b600082815260096020526040812080546001600160a01b0384811691161480613a83575060018101546001600160a01b038481169116145b80156109c0575050506001600160a01b03161515919050565b60008281526008602052604081206109c08184613a2a565b60008281526001602052604081206109c08184614762565b6000806002856002811115613add57fe5b1415613af357613aee868585614783565b613b1d565b6001856002811115613b0157fe5b1415613b1257613aee868585614791565b613b1d86858561479f565b8215613b3757613b376001600160a01b0385163385611e25565b5050600081900394909350915050565b6000806002856002811115613b5857fe5b1415613b6e57613b698685856147ad565b613b98565b6001856002811115613b7c57fe5b1415613b8d57613b698685856147bb565b613b988685856147c9565b8215613bb357613bb36001600160a01b038516333086612b04565b5090946000869003945092505050565b6000806002856002811115613bd457fe5b1415613bec57613be58685856147d7565b9050613c19565b6001856002811115613bfa57fe5b1415613c0b57613be58685856147e7565b613c168685856147f7565b90505b6000915094509492505050565b4690565b606080600080600080613c3c876139a2565b92975090955093509150506001600160a01b0384161580613c6457506001600160a01b038216155b15613c8d5750506040805160008082526020820190815281830190925294509250612913915050565b60408051600280825260608201835290916020830190803683370190505095508386600081518110613cbb57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508186600181518110613ce957fe5b6001600160a01b03929092166020928302919091018201526040805160028082526060820183529092909190830190803683370190505094508285600081518110613d3057fe5b6020026020010181815250508085600181518110613d4a57fe5b60200260200101818152505050505050915091565b60008181526008602052604090206060908190613d7b816142bf565b6001600160401b0381118015613d9057600080fd5b50604051908082528060200260200182016040528015613dba578160200160208202803683370190505b50925082516001600160401b0381118015613dd457600080fd5b50604051908082528060200260200182016040528015613dfe578160200160208202803683370190505b50915060005b8351811015613e7d576000613e198383614807565b905080858381518110613e2857fe5b6001600160a01b03928316602091820292909201810191909152600088815260078252604080822093851682529290915220548451859084908110613e6957fe5b602090810291909101015250600101613e04565b5050915091565b60008181526001602052604090206060908190613ea0816142bf565b6001600160401b0381118015613eb557600080fd5b50604051908082528060200260200182016040528015613edf578160200160208202803683370190505b50925082516001600160401b0381118015613ef957600080fd5b50604051908082528060200260200182016040528015613f23578160200160208202803683370190505b50915060005b8351811015613e7d57613f3c8282614834565b858381518110613f4857fe5b60200260200101858481518110613f5b57fe5b60209081029190910101919091526001600160a01b039091169052600101613f29565b6000613f8982612712565b613f9283612706565b0192915050565b600081831015613fa957816116a4565b5090919050565b6000818310613fa957816116a4565b6001600160a01b038085166000818152600b602090815260408083209488168084529490915290819020859055517f18e1ea4139e68413d7d08aa752e71568e36b2c5bf940893314c2c5b01eaa0c4290611951908590615d12565b600080614025614858565b9050428110156140395760009150506116a7565b6000614043614864565b905080614055576000925050506116a7565b600081614060614975565b80516020918201206040805180840194909452838101919091523360608401526080830188905260a08084018790528151808503909101815260c090930190528151910120905060006140b2826149c4565b905060008060006140c1614a10565b925092509250600060018585858560405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015614123573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381161580159061415957508a6001600160a01b0316816001600160a01b0316145b9b9a5050505050505050505050565b60008060008061417786613f7e565b9050600061418486613f7e565b905061419b61419288612721565b6129b688612721565b60a08a015260405163274b044360e21b81526001600160a01b03891690639d2c110c906141d0908c9086908690600401615ded565b602060405180830381600087803b1580156141ea57600080fd5b505af11580156141fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061422291906159b3565b925060008061423a8b600001518c6060015187612f68565b909250905061424989836142d9565b9650614255888261430a565b9550505050509450945094915050565b60008061427d61427485612721565b6129b685612721565b90506109c061428b85612706565b61429485612706565b8363ffffffff16614a37565b6001600160a01b03166000908152600291909101602052604090205490565b5490565b6000908152600191820160205260409020015490565b6000806142ef836142e986612706565b906118c6565b905060006142fc85612712565b905043611271838383614a45565b6000806142ef8361431a86612706565b90614a73565b60009182526001928301602052604090912090910155565b600080826001600160a01b0316846001600160a01b03161061435b57828461435e565b83835b915091509250929050565b6000828260405160200161437e929190615b4a565b60405160208183030381529060405280519060200120905092915050565b60006116a46143aa84612706565b6143b384612706565b6143bc86612721565b614a45565b60006116a46143cf84612712565b6143b384612712565b6001600160a01b03821660009081526002840160205260408120546143ff8115158461052b565b61440c85600183036142c3565b95945050505050565b600061441f61137a565b6001600160a01b03166355c676286040518163ffffffff1660e01b815260040160206040518083038186803b15801561445757600080fd5b505afa15801561446b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129991906159b3565b610f6482841480156144a057508183145b606761052b565b606083516001600160401b03811180156144c057600080fd5b506040519080825280602002602001820160405280156144ea578160200160208202803683370190505b50905060005b8551518110156145e357600084828151811061450857fe5b602002602001015190506145388760200151838151811061452557fe5b60200260200101518210156101f961052b565b60008760000151838151811061454a57fe5b6020026020010151905061456481838b8b60600151611cb7565b600085848151811061457257fe5b6020026020010151905061458e61458883611ac0565b82611e77565b6145bd61459b84836118c6565b8986815181106145a757fe5b602002602001015161430a90919063ffffffff16565b8585815181106145c957fe5b6020026020010181815250505050508060010190506144f0565b5095945050505050565b6060600084516001600160401b038111801561460857600080fd5b50604051908082528060200260200182016040528015614632578160200160208202803683370190505b50915060005b86515181101561475857600085828151811061465057fe5b602002602001015190506146808860200151838151811061466d57fe5b60200260200101518211156101fa61052b565b60008860000151838151811061469257fe5b602002602001015190506146ac81838c8c60600151611bd9565b6146b5816118b9565b156146c7576146c484836118c6565b93505b60008684815181106146d557fe5b602002602001015190506146eb61458883611ac0565b8083101561470a576147058382038a86815181106145a757fe5b614732565b6147328184038a868151811061471c57fe5b60200260200101516142d990919063ffffffff16565b86858151811061473e57fe5b602002602001018181525050505050806001019050614638565b506145e38161195f565b6001600160a01b031660009081526002919091016020526040902054151590565b610dc48383614a8984614ac4565b610dc48383614a8984614b6f565b610dc48383614a8984614bca565b610dc48383614c1984614ac4565b610dc48383614c1984614b6f565b610dc48383614c1984614bca565b60006109c08484614c3a85614ac4565b60006109c08484614c3a85614b6f565b60006109c08484614c3a85614bca565b600082600001828154811061481857fe5b6000918252602090912001546001600160a01b03169392505050565b600090815260019182016020526040902080549101546001600160a01b0390911691565b60006112996000614c54565b6000803560e01c8063b95cac2881146148ac57638bdb391381146148d4576352bbbe2981146148fc5763945bcec981146149245763fa6e671d811461494c5760009250614970565b7f3f7b71252bd19113ff48c19c6e004a9bcfcca320a0d74d58e85877cbd7dcae589250614970565b7f8bbc57f66ea936902f50a71ce12b92c43f3c5340bb40c27c4e90ab84eeae33539250614970565b7fe192dcbc143b1e244ad73b813fd3c097b832ad260a157340b4e5e5beda067abe9250614970565b7f9bfc43a4d98313c6766986ffd7c916c7481566d9f224c6819af0a53388aced3a9250614970565b7fa3f865aa351e51cfeb40f5178d1564bb629fe9030b83caf6361d1baaf5b90b5a92505b505090565b60606000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505082519293505050608010156105285760803603815290565b60006149ce6127f2565b82604051602001808061190160f01b81525060020183815260200182815260200192505050604051602081830303815290604052805190602001209050919050565b6000806000614a1f6020614c54565b9250614a2b6040614c54565b91506108206060614c54565b60e01b60709190911b010190565b6000838301614a68858210801590614a605750600160701b82105b61020e61052b565b61440c858585614a37565b6000614a8383831115600161052b565b50900390565b600080614a998361431a86612706565b90506000614aaa846142e987612712565b90506000614ab786612721565b9050611271838383614a45565b6000806000806000614ad5896139a2565b9450509350935093506000836001600160a01b0316896001600160a01b03161415614b20576000614b0a84898b63ffffffff16565b9050614b168185614c5e565b9093509050614b42565b6000614b3083898b63ffffffff16565b9050614b3c8184614c5e565b90925090505b614b4c8383614265565b8555614b588383614c7a565b600190950194909455509192505050949350505050565b600080614b7c8686612680565b90506000614b8e82858763ffffffff16565b60008881526007602090815260408083206001600160a01b038b16845290915290208190559050614bbf8183614c5e565b979650505050505050565b600084815260016020526040812081614be382876133b8565b90506000614bf582868863ffffffff16565b9050614c02838883613130565b50614c0d8183614c5e565b98975050505050505050565b600080614c29836142e986612706565b90506000614aaa8461431a87612712565b600080614c4684612706565b90504361440c828583614a45565b3601607f19013590565b6000614c6982612712565b614c7284612712565b039392505050565b60006116a4614c8884612712565b614c9184612712565b6000614a37565b60408051610120810190915280600081526000602082018190526040820181905260608083018290526080830182905260a0830182905260c0830182905260e08301919091526101009091015290565b604080516080810190915280600081526000602082018190526040820181905260609091015290565b60405180608001604052806060815260200160608152602001606081526020016000151581525090565b6040518060a0016040528060008019168152602001600081526020016000815260200160008152602001606081525090565b803561060f81615e76565b600082601f830112614d88578081fd5b81356020614d9d614d9883615e59565b615e36565b8281528181019085830183850287018401881015614db9578586fd5b855b85811015614de0578135614dce81615e76565b84529284019290840190600101614dbb565b5090979650505050505050565b600082601f830112614dfd578081fd5b81356020614e0d614d9883615e59565b8281528181019085830183850287018401881015614e29578586fd5b855b85811015614de0578135614e3e81615e76565b84529284019290840190600101614e2b565b600082601f830112614e60578081fd5b81356020614e70614d9883615e59565b82815281810190858301855b85811015614de0578135880160a080601f19838d03011215614e9c578889fd5b604080518281016001600160401b038282108183111715614eb957fe5b8184528a8601358352838601358b84015260609150818601358484015260809350838601358284015284860135945080851115614ef4578c8dfd5b5050614f048d8a85870101614fde565b91810191909152865250509284019290840190600101614e7c565b600082601f830112614f2f578081fd5b81356020614f3f614d9883615e59565b8281528181019085830183850287018401881015614f5b578586fd5b855b85811015614de057813584529284019290840190600101614f5d565b600082601f830112614f89578081fd5b81516020614f99614d9883615e59565b8281528181019085830183850287018401881015614fb5578586fd5b855b85811015614de057815184529284019290840190600101614fb7565b803561060f81615e8b565b600082601f830112614fee578081fd5b81356001600160401b0381111561500157fe5b615014601f8201601f1916602001615e36565b818152846020838601011115615028578283fd5b816020850160208301379081016020019190915292915050565b80356002811061060f57600080fd5b600060808284031215615062578081fd5b61506c6080615e36565b905081356001600160401b038082111561508557600080fd5b61509185838601614d78565b835260208401359150808211156150a757600080fd5b6150b385838601614f1f565b602084015260408401359150808211156150cc57600080fd5b506150d984828501614fde565b6040830152506150eb60608301614fd3565b606082015292915050565b600060808284031215615107578081fd5b604051608081018181106001600160401b038211171561512357fe5b604052905080823561513481615e76565b8152602083013561514481615e8b565b6020820152604083013561515781615e76565b6040820152606083013561516a81615e8b565b6060919091015292915050565b600060208284031215615188578081fd5b81356116a481615e76565b600080604083850312156151a5578081fd5b82356151b081615e76565b915060208301356151c081615e76565b809150509250929050565b6000806000606084860312156151df578081fd5b83356151ea81615e76565b925060208401356151fa81615e76565b9150604084013561520a81615e8b565b809150509250925092565b60008060408385031215615227578182fd5b823561523281615e76565b915060208301356001600160401b0381111561524c578182fd5b61525885828601614ded565b9150509250929050565b60006020808385031215615274578182fd5b82356001600160401b038082111561528a578384fd5b818501915085601f83011261529d578384fd5b81356152ab614d9882615e59565b818152848101908486016080808502870188018b10156152c9578889fd5b8896505b848710156153435780828c0312156152e3578889fd5b6040805182810181811089821117156152f857fe5b8252833561530581615e99565b8152838a01358a8201528184013561531c81615e76565b918101919091526060838101359082015284526001969096019592870192908101906152cd565b50909998505050505050505050565b60006020808385031215615364578182fd5b82356001600160401b038082111561537a578384fd5b818501915085601f83011261538d578384fd5b813561539b614d9882615e59565b8181528481019084860160a0808502870188018b10156153b9578889fd5b8896505b848710156153435780828c0312156153d3578889fd5b6040805182810181811089821117156153e857fe5b82528335600481106153f8578b8cfd5b8152615405848b01614d6d565b8a820152818401358282015260609150615420828501614d6d565b8282015260809150615433828501614d6d565b9181019190915284526001969096019592870192908101906153bd565b60008060408385031215615462578182fd5b82516001600160401b0380821115615478578384fd5b61548486838701614f79565b93506020850151915080821115615499578283fd5b5061525885828601614f79565b6000602082840312156154b7578081fd5b81356116a481615e8b565b6000602082840312156154d3578081fd5b81516116a481615e8b565b6000602082840312156154ef578081fd5b5035919050565b6000806000806080858703121561550b578182fd5b84359350602085013561551d81615e76565b9250604085013561552d81615e76565b915060608501356001600160401b03811115615547578182fd5b61555387828801615051565b91505092959194509250565b60008060408385031215615571578182fd5b8235915060208301356001600160401b0381111561524c578182fd5b6000806000606084860312156155a1578081fd5b833592506020808501356001600160401b03808211156155bf578384fd5b6155cb88838901614ded565b945060408701359150808211156155e0578384fd5b508501601f810187136155f1578283fd5b80356155ff614d9882615e59565b81815283810190838501858402850186018b101561561b578687fd5b8694505b8385101561564657803561563281615e76565b83526001949094019391850191850161561f565b5080955050505050509250925092565b60008060408385031215615668578182fd5b8235915060208301356151c081615e76565b60006020828403121561568b578081fd5b81356001600160e01b0319811681146116a4578182fd5b600080600080608085870312156156b7578182fd5b84356156c281615e76565b935060208501356001600160401b03808211156156dd578384fd5b6156e988838901614ded565b945060408701359150808211156156fe578384fd5b61570a88838901614f1f565b9350606087013591508082111561571f578283fd5b5061555387828801614fde565b60006020828403121561573d578081fd5b81356116a481615e99565b60008060008060e0858703121561575d578182fd5b61576685615042565b935060208501356001600160401b0380821115615781578384fd5b61578d88838901614e50565b945060408701359150808211156157a2578384fd5b506157af87828801614d78565b9250506157bf86606087016150f6565b905092959194509250565b60008060008060008061012087890312156157e3578384fd5b6157ec87615042565b95506020808801356001600160401b0380821115615808578687fd5b6158148b838c01614e50565b975060408a0135915080821115615829578687fd5b6158358b838c01614d78565b96506158448b60608c016150f6565b955060e08a0135915080821115615859578485fd5b508801601f81018a1361586a578384fd5b8035615878614d9882615e59565b81815283810190838501858402850186018e1015615894578788fd5b8794505b838510156158b6578035835260019490940193918501918501615898565b50809650505050505061010087013590509295509295509295565b60008060008060e085870312156158e6578182fd5b84356001600160401b03808211156158fc578384fd5b9086019060c0828903121561590f578384fd5b60405160c08101818110838211171561592457fe5b6040528235815261593760208401615042565b602082015261594860408401614d6d565b604082015261595960608401614d6d565b60608201526080830135608082015260a083013582811115615979578586fd5b6159858a828601614fde565b60a08301525080965050505061599e86602087016150f6565b939693955050505060a08201359160c0013590565b6000602082840312156159c4578081fd5b5051919050565b6001600160a01b03169052565b6000815180845260208085019450808401835b83811015615a105781516001600160a01b0316875295820195908201906001016159eb565b509495945050505050565b6000815180845260208085019450808401835b83811015615a1057815187529582019590820190600101615a2e565b60008151808452815b81811015615a6f57602081850181015186830182015201615a53565b81811115615a805782602083870101525b50601f01601f19169290920160200192915050565b60038110615a9f57fe5b9052565b6000610120825160028110615ab457fe5b808552506020830151615aca60208601826159cb565b506040830151615add60408601826159cb565b50606083015160608501526080830151608085015260a083015160a085015260c0830151615b0e60c08601826159cb565b5060e0830151615b2160e08601826159cb565b5061010080840151828287015261127183870182615a4a565b6000828483379101908152919050565b6bffffffffffffffffffffffff19606093841b811682529190921b16601482015260280190565b6001600160a01b0391909116815260200190565b6001600160a01b0383168152604081016117f76020830184615a95565b6001600160a01b03929092168252602082015260400190565b6000602082526116a460208301846159d8565b600060408252615be160408301856159d8565b828103602084810191909152845180835285820192820190845b81811015614de05784516001600160a01b031683529383019391830191600101615bfb565b600060608252615c3360608301866159d8565b8281036020840152615c458186615a1b565b905082810360408401526112718185615a1b565b600060808252615c6c60808301876159d8565b8281036020840152615c7e8187615a1b565b90508281036040840152615c928186615a1b565b90508281036060840152614bbf8185615a4a565b600060608252615cb960608301866159d8565b8281036020840152615ccb8186615a1b565b915050826040830152949350505050565b6000602082526116a46020830184615a1b565b901515815260200190565b92151583526020830191909152604082015260600190565b90815260200190565b9283526001600160a01b03918216602084015216604082015260600190565b8781526001600160a01b0387811660208301528616604082015260e060608201819052600090615d6c90830187615a1b565b8560808401528460a084015282810360c0840152615d8a8185615a4a565b9a9950505050505050505050565b602081016116a78284615a95565b918252602082015260400190565b600060808252615dc76080830187615aa3565b8281036020840152615dd98187615a1b565b604084019590955250506060015292915050565b600060608252615e006060830186615aa3565b60208301949094525060400152919050565b938452602084019290925260408301526001600160a01b0316606082015260800190565b6040518181016001600160401b0381118282101715615e5157fe5b604052919050565b60006001600160401b03821115615e6c57fe5b5060209081020190565b6001600160a01b038116811461055e57600080fd5b801515811461055e57600080fd5b6003811061055e57600080fdfea2646970667358221220a46ae94e922a3a2617b76c6120f54a0e1abd43dbed290d15119534663723fee664736f6c6343000706003360c060405234801561001057600080fd5b50604051610b05380380610b0583398101604081905261002f9161004d565b30608052600160005560601b6001600160601b03191660a05261007b565b60006020828403121561005e578081fd5b81516001600160a01b0381168114610074578182fd5b9392505050565b60805160a05160601c610a5f6100a66000398061040b52806104f85250806102995250610a5f6000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063851c1bb311610066578063851c1bb3146100f1578063aaabadc514610104578063d877845c14610119578063e42abf3514610121578063fbfa77cf1461014157610093565b806338e9922e1461009857806355c67628146100ad5780636b6b9f69146100cb5780636daefab6146100de575b600080fd5b6100ab6100a6366004610964565b610149565b005b6100b56101a8565b6040516100c291906109ec565b60405180910390f35b6100ab6100d9366004610964565b6101ae565b6100ab6100ec3660046107ae565b610201565b6100b56100ff366004610904565b610293565b61010c6102ed565b6040516100c29190610994565b6100b56102fc565b61013461012f36600461082f565b610302565b6040516100c291906109a8565b61010c610409565b61015161042d565b6101686706f05b59d3b2000082111561025861045e565b60018190556040517fa9ba3ffe0b6c366b81232caab38605a0699ad5398d6cce76f91ee809e322dafc9061019d9083906109ec565b60405180910390a150565b60015490565b6101b661042d565b6101cc662386f26fc1000082111561025961045e565b60028190556040517f5a0b7386237e7f07fa741efc64e59c9387d2cccafec760efed4d53387f20e19a9061019d9083906109ec565b610209610470565b61021161042d565b61021b8483610489565b60005b8481101561028357600086868381811061023457fe5b90506020020160208101906102499190610948565b9050600085858481811061025957fe5b6020029190910135915061027990506001600160a01b0383168583610496565b505060010161021e565b5061028c6104ed565b5050505050565b604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091526001600160e01b031984168284015282516024818403018152604490920190925280519101205b919050565b60006102f76104f4565b905090565b60025490565b6060815167ffffffffffffffff8111801561031c57600080fd5b50604051908082528060200260200182016040528015610346578160200160208202803683370190505b50905060005b82518110156104035782818151811061036157fe5b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016103949190610994565b60206040518083038186803b1580156103ac57600080fd5b505afa1580156103c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e4919061097c565b8282815181106103f057fe5b602090810291909101015260010161034c565b50919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006104446000356001600160e01b031916610293565b905061045b6104538233610587565b61019161045e565b50565b8161046c5761046c81610617565b5050565b6104826002600054141561019061045e565b6002600055565b61046c818314606761045e565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526104e890849061066a565b505050565b6001600055565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663aaabadc56040518163ffffffff1660e01b815260040160206040518083038186803b15801561054f57600080fd5b505afa158015610563573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f7919061092c565b60006105916104f4565b6001600160a01b0316639be2a8848484306040518463ffffffff1660e01b81526004016105c0939291906109f5565b60206040518083038186803b1580156105d857600080fd5b505afa1580156105ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061091906108e4565b9392505050565b62461bcd60e51b6000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b600080836001600160a01b0316836040518082805190602001908083835b602083106106a75780518252601f199092019160209182019101610688565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610709576040519150601f19603f3d011682016040523d82523d6000602084013e61070e565b606091505b50915091506000821415610726573d6000803e3d6000fd5b61075481516000148061074c575081806020019051602081101561074957600080fd5b50515b6101a261045e565b50505050565b60008083601f84011261076b578081fd5b50813567ffffffffffffffff811115610782578182fd5b602083019150836020808302850101111561079c57600080fd5b9250929050565b80356102e881610a14565b6000806000806000606086880312156107c5578081fd5b853567ffffffffffffffff808211156107dc578283fd5b6107e889838a0161075a565b90975095506020880135915080821115610800578283fd5b5061080d8882890161075a565b909450925050604086013561082181610a14565b809150509295509295909350565b60006020808385031215610841578182fd5b823567ffffffffffffffff80821115610858578384fd5b818501915085601f83011261086b578384fd5b81358181111561087757fe5b8381026040518582820101818110858211171561089057fe5b604052828152858101935084860182860187018a10156108ae578788fd5b8795505b838610156108d7576108c3816107a3565b8552600195909501949386019386016108b2565b5098975050505050505050565b6000602082840312156108f5578081fd5b81518015158114610610578182fd5b600060208284031215610915578081fd5b81356001600160e01b031981168114610610578182fd5b60006020828403121561093d578081fd5b815161061081610a14565b600060208284031215610959578081fd5b813561061081610a14565b600060208284031215610975578081fd5b5035919050565b60006020828403121561098d578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6020808252825182820181905260009190848201906040850190845b818110156109e0578351835292840192918401916001016109c4565b50909695505050505050565b90815260200190565b9283526001600160a01b03918216602084015216604082015260600190565b6001600160a01b038116811461045b57600080fdfea26469706673582212205eb0133be1bb0cfc4aab2fcc4860b222c9904bf72661e95ad8bf441e543b7f1564736f6c63430007060033",
    "sourceMap": "3244:648:30:-:0;;;3306:322;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3470:10;3521:19;3542:20;1632:114:7;;;;;;;;;;;;;-1:-1:-1;;;1632:114:7;;;1671:4;2020:280:13;;;;;;;;;;;;;-1:-1:-1;;;2020:280:13;;;3654:4:31;-1:-1:-1;;;;;3638:22:31;3630:31;;3495:4:30;1350::0;-1:-1:-1;;;;;1342:12:0;;;-1:-1:-1;;;;;1342:12:0;;;;;;;1308:53;1443:4:22;1410:39;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1385:64:22;;-1:-1:-1;;;;;;1385:64:22;;;2018:1:17;2123:7;:22;1929:46:1;;2100:22:13;;;;;;;2085:37;;2150:25;;;;;2132:43;;-1:-1:-1;2198:95:13;2185:108;;2458:93:8;2164:7;2467:49;;;6544:3:2;2458:8:8;:93::i;:::-;2561:96;2232:7;2570:51;;;6608:3:2;2561:8:8;:96::i;:::-;2697:15;:37;;;2745:40;;;;2818:41;2795:64;;3726:26:31::2;3741:10:::0;3726:14:::2;:26::i;:::-;3464:295:::0;3306:322:30;;;;3244:648;;866:101:2;935:9;930:34;;946:18;954:9;946:7;:18::i;:::-;866:101;;:::o;3911:150:31:-;3985:32;;-1:-1:-1;;;;;3985:32:31;;;;;;;;4027:11;:27;;-1:-1:-1;;;;;4027:27:31;;;;;-1:-1:-1;;;;;;4027:27:31;;;;;;;;;3911:150::o;1074:3172:2:-;-1:-1:-1;;;3588:3:2;3581:79;;;3799:66;3793:4;3786:80;3941:1;3935:4;3928:15;2999:73;2210:2;2243:18;;;2288;;;2215:4;2284:29;;;3040:1;3036:14;2195:18;;;;3025:26;;;;2336:18;;;;2383;;;2379:29;;;3057:2;3053:17;3021:50;;;;2999:73;2994:3;2990:83;4008:4;4001:26;4234:3;;4224:14;3244:648:30;;;;;;;;:::o;14:586:45:-;;;;;224:3;212:9;203:7;199:23;195:33;192:2;;;246:6;238;231:22;192:2;283:9;277:16;302:47;343:5;302:47;:::i;:::-;418:2;403:18;;397:25;368:5;;-1:-1:-1;431:49:45;397:25;431:49;:::i;:::-;546:2;531:18;;525:25;590:2;575:18;;;569:25;182:418;;499:7;;-1:-1:-1;182:418:45;-1:-1:-1;;;182:418:45:o;605:219::-;-1:-1:-1;;;;;785:32:45;;;;767:51;;755:2;740:18;;722:102::o;829:147::-;-1:-1:-1;;;;;920:31:45;;910:42;;900:2;;966:1;963;956:12;900:2;890:86;:::o;:::-;3244:648:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x6080604052600436106101855760003560e01c8063945bcec9116100d1578063e6c460921161008a578063f84d066e11610064578063f84d066e1461046a578063f94d46681461048a578063fa6e671d146104b9578063fec90d72146104d9576101b3565b8063e6c4609214610407578063ed24911d14610427578063f6c009271461043c576101b3565b8063945bcec914610365578063aaabadc514610378578063ad5c46481461039a578063b05f8e48146103af578063b95cac28146103df578063d2946c2b146103f2576101b3565b806352bbbe291161013e5780637d3aeb96116101185780637d3aeb96146102e5578063851c1bb3146103055780638bdb39131461032557806390193b7c14610345576101b3565b806352bbbe29146102925780635c38449e146102a557806366a9c7d2146102c5576101b3565b8063058a628f146101b857806309b2760f146101d85780630e8e3e841461020e5780630f5a6efa1461022157806316c38b3c1461024e5780631c0de0511461026e576101b3565b366101b3576101b1610195610506565b6001600160a01b0316336001600160a01b03161461020661052b565b005b600080fd5b3480156101c457600080fd5b506101b16101d3366004615177565b61053d565b3480156101e457600080fd5b506101f86101f336600461572c565b610561565b6040516102059190615d12565b60405180910390f35b6101b161021c366004615352565b610614565b34801561022d57600080fd5b5061024161023c366004615215565b610750565b6040516102059190615cdc565b34801561025a57600080fd5b506101b16102693660046154a6565b6107e5565b34801561027a57600080fd5b506102836107fe565b60405161020593929190615cfa565b6101f86102a03660046158d1565b610827565b3480156102b157600080fd5b506101b16102c03660046156a2565b6109c8565b3480156102d157600080fd5b506101b16102e036600461558d565b610dca565b3480156102f157600080fd5b506101b161030036600461555f565b610f69565b34801561031157600080fd5b506101f861032036600461567a565b6110bd565b34801561033157600080fd5b506101b16103403660046154f6565b611116565b34801561035157600080fd5b506101f8610360366004615177565b61112c565b6102416103733660046157ca565b611147565b34801561038457600080fd5b5061038d61127b565b6040516102059190615b71565b3480156103a657600080fd5b5061038d61128f565b3480156103bb57600080fd5b506103cf6103ca366004615656565b61129e565b6040516102059493929190615e12565b6101b16103ed3660046154f6565b611361565b3480156103fe57600080fd5b5061038d61137a565b34801561041357600080fd5b506101b1610422366004615262565b61139e565b34801561043357600080fd5b506101f86114ba565b34801561044857600080fd5b5061045c6104573660046154de565b6114c4565b604051610205929190615b85565b34801561047657600080fd5b50610241610485366004615748565b6114ee565b34801561049657600080fd5b506104aa6104a53660046154de565b6115d2565b60405161020593929190615ca6565b3480156104c557600080fd5b506101b16104d43660046151cb565b611606565b3480156104e557600080fd5b506104f96104f4366004615193565b611698565b6040516102059190615cef565b7f00000000000000000000000000000000000000000000000000000000000000005b90565b8161053957610539816116ad565b5050565b610545611700565b61054d611719565b61055681611747565b61055e6117a3565b50565b600061056b611700565b6105736117aa565b600061058233846006546117bf565b6000818152600560205260409020549091506105a49060ff16156101f461052b565b60008181526005602052604090819020805460ff1916600190811790915560068054909101905551339082907f3c13bc30b8e878c53fd2a36b679409c073afd75950be43d8858768e956fbc20e906105fd908790615d98565b60405180910390a3905061060f6117a3565b919050565b61061c611700565b6000806000805b845181101561073b5760008060008060006106518a878151811061064357fe5b6020026020010151896117fe565b9c50939850919650945092509050600185600381111561066d57fe5b14156106845761067f84838386611876565b61072a565b86610696576106916117aa565b600196505b60008560038111156106a457fe5b14156106d5576106b684838386611899565b6106bf846118b9565b1561067f576106ce89846118c6565b985061072a565b6106ea6106e1856118b9565b1561020761052b565b60006106f585610528565b9050600286600381111561070557fe5b141561071c57610717818484876118d8565b610728565b610728818484876118f1565b505b505060019093019250610623915050565b506107458361195f565b50505061055e6117a3565b606081516001600160401b038111801561076957600080fd5b50604051908082528060200260200182016040528015610793578160200160208202803683370190505b50905060005b82518110156107de576107bf848483815181106107b257fe5b6020026020010151611982565b8282815181106107cb57fe5b6020908102919091010152600101610799565b5092915050565b6107ed611700565b6107f5611719565b610556816119ad565b600080600061080b611a29565b159250610816611a46565b9150610820611a6a565b9050909192565b6000610831611700565b6108396117aa565b835161084481611a8e565b610853834211156101fc61052b565b61086660008760800151116101fe61052b565b60006108758760400151611ac0565b905060006108868860600151611ac0565b90506108a9816001600160a01b0316836001600160a01b031614156101fd61052b565b6108b1614c98565b885160808201526020890151819060018111156108ca57fe5b908160018111156108d757fe5b9052506001600160a01b03808416602083015282811660408084019190915260808b0151606084015260a08b01516101008401528951821660c08401528901511660e082015260008061092983611ae5565b9198509250905061096060008c60200151600181111561094557fe5b146109535789831115610958565b898210155b6101fb61052b565b6109788b60400151838c600001518d60200151611bd9565b6109908b60600151828c604001518d60600151611cb7565b6109b26109a08c604001516118b9565b6109ab5760006109ad565b825b61195f565b5050505050506109c06117a3565b949350505050565b6109d0611700565b6109d86117aa565b6109e483518351611d91565b600083516001600160401b03811180156109fd57600080fd5b50604051908082528060200260200182016040528015610a27578160200160208202803683370190505b509050600084516001600160401b0381118015610a4357600080fd5b50604051908082528060200260200182016040528015610a6d578160200160208202803683370190505b5090506000805b8651811015610be6576000878281518110610a8b57fe5b602002602001015190506000878381518110610aa357fe5b60200260200101519050610aee846001600160a01b0316836001600160a01b03161160006001600160a01b0316846001600160a01b031614610ae6576066610ae9565b60685b61052b565b819350816001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610b1d9190615b71565b60206040518083038186803b158015610b3557600080fd5b505afa158015610b49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6d91906159b3565b858481518110610b7957fe5b602002602001018181525050610b8e81611d9e565b868481518110610b9a57fe5b602002602001018181525050610bc881868581518110610bb657fe5b6020026020010151101561021061052b565b610bdc6001600160a01b0383168b83611e25565b5050600101610a74565b5060405163f04f270760e01b81526001600160a01b0388169063f04f270790610c19908990899088908a90600401615c59565b600060405180830381600087803b158015610c3357600080fd5b505af1158015610c47573d6000803e3d6000fd5b5050505060005b8651811015610db8576000878281518110610c6557fe5b602002602001015190506000848381518110610c7d57fe5b602002602001015190506000826001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610cb59190615b71565b60206040518083038186803b158015610ccd57600080fd5b505afa158015610ce1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0591906159b3565b9050610d168282101561020361052b565b60008282039050610d3f888681518110610d2c57fe5b602002602001015182101561025a61052b565b610d498482611e77565b836001600160a01b03168c6001600160a01b03167f0d7d75e01ab95780d3cd1c8ec0dd6c2ce19e3a20427eec8bf53283b6fb8e95f08c8881518110610d8a57fe5b602002602001015184604051610da1929190615da6565b60405180910390a350505050806001019050610c4e565b50505050610dc46117a3565b50505050565b610dd2611700565b610dda6117aa565b82610de481611e99565b610df083518351611d91565b60005b8351811015610e8e576000848281518110610e0a57fe5b60200260200101519050610e3660006001600160a01b0316826001600160a01b0316141561013561052b565b838281518110610e4257fe5b6020908102919091018101516000888152600a835260408082206001600160a01b0395861683529093529190912080546001600160a01b03191692909116919091179055600101610df3565b506000610e9a85611eca565b90506002816002811115610eaa57fe5b1415610ef857610ec0845160021461020c61052b565b610ef38585600081518110610ed157fe5b602002602001015186600181518110610ee657fe5b6020026020010151611ee4565b610f20565b6001816002811115610f0657fe5b1415610f1657610ef38585611f90565b610f208585611fe8565b847ff5847d3f2197b16cdcd2098ec95d0905cd1abdaf415f07bb7cef2bba8ac5dec48585604051610f52929190615bce565b60405180910390a25050610f646117a3565b505050565b610f71611700565b610f796117aa565b81610f8381611e99565b6000610f8e84611eca565b90506002816002811115610f9e57fe5b1415610fec57610fb4835160021461020c61052b565b610fe78484600081518110610fc557fe5b602002602001015185600181518110610fda57fe5b602002602001015161203d565b611014565b6001816002811115610ffa57fe5b141561100a57610fe784846120ab565b6110148484612165565b60005b835181101561107a57600a6000868152602001908152602001600020600085838151811061104157fe5b6020908102919091018101516001600160a01b0316825281019190915260400160002080546001600160a01b0319169055600101611017565b50837f7dcdc6d02ef40c7c1a7046a011b058bd7f988fa14e20a66344f9d4e60657d610846040516110ab9190615bbb565b60405180910390a250506105396117a3565b604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091526001600160e01b03198416828401528251602481840301815260449092019092528051910120919050565b610dc46001858585611127866121c8565b6121d4565b6001600160a01b031660009081526002602052604090205490565b6060611151611700565b6111596117aa565b835161116481611a8e565b611173834211156101fc61052b565b61117f86518551611d91565b61118b8787878b61235a565b91506000805b875181101561125d5760008882815181106111a857fe5b6020026020010151905060008583815181106111c057fe5b602002602001015190506111ec8884815181106111d957fe5b60200260200101518213156101fb61052b565b600081131561122c57885160208a0151829161120b9185918491611bd9565b611214836118b9565b156112265761122385826118c6565b94505b50611253565b600081121561125357600081600003905061125183828c604001518d60600151611cb7565b505b5050600101611191565b506112678161195f565b50506112716117a3565b9695505050505050565b60035461010090046001600160a01b031690565b6000611299610506565b905090565b600080600080856112ae816125e8565b6000806112ba89611eca565b905060028160028111156112ca57fe5b14156112e1576112da8989612606565b915061130c565b60018160028111156112ef57fe5b14156112ff576112da8989612680565b61130989896126ee565b91505b61131582612706565b965061132082612712565b955061132b82612721565b6000998a52600a60209081526040808c206001600160a01b039b8c168d5290915290992054969995989796909616955050505050565b6113696117aa565b610dc46000858585611127866121c8565b7f000000000000000000000000000000000000000000000000000000000000000090565b6113a6611700565b6113ae6117aa565b6113b6614ce8565b60005b82518110156114b0578281815181106113ce57fe5b602002602001015191506000826020015190506113ea816125e8565b60408301516114046113fc8383612727565b61020961052b565b6000828152600a602090815260408083206001600160a01b038581168552925290912054611437911633146101f661052b565b8351606085015160008061144d84878786612783565b91509150846001600160a01b0316336001600160a01b0316877f6edcaf6241105b4c94c2efdbf3a6b12458eb3d07be3a0e81d24b13c44045fe7a8585604051611497929190615da6565b60405180910390a45050505050508060010190506113b9565b505061055e6117a3565b60006112996127f2565b600080826114d1816125e8565b6114da846128b0565b6114e385611eca565b925092505b50915091565b60603330146115a8576000306001600160a01b0316600036604051611514929190615b3a565b6000604051808303816000865af19150503d8060008114611551576040519150601f19603f3d011682016040523d82523d6000602084013e611556565b606091505b50509050806000811461156557fe5b60046000803e6000516001600160e01b031916637d30e60960e11b8114611590573d6000803e3d6000fd5b50602060005260043d0380600460203e602081016000f35b60006115b68585858961235a565b9050602081510263fa61cc126020830352600482036024820181fd5b6060806000836115e1816125e8565b60606115ec866128b6565b90955090506115fa81612918565b95979096509350505050565b61160e611700565b6116166117aa565b8261162081611a8e565b6001600160a01b0384811660008181526004602090815260408083209488168084529490915290819020805460ff1916861515179055519091907f46961fdb4502b646d5095fba7600486a8ac05041d55cdf0f16ed677180b5cad890611687908690615cef565b60405180910390a350610f646117a3565b60006116a483836129c6565b90505b92915050565b62461bcd60e51b6000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b6117126002600054141561019061052b565b6002600055565b60006117306000356001600160e01b0319166110bd565b905061055e61173f82336129f4565b61019161052b565b6040516001600160a01b038216907f94b979b6831a51293e2641426f97747feed46f17779fed9cd18d1ecefcfe92ef90600090a2600380546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b6001600055565b6117bd6117b5611a29565b61019261052b565b565b600069ffffffffffffffffffff821660508460028111156117dc57fe5b901b17606085901b6bffffffffffffffffffffffff19161790505b9392505050565b600080600080600080600088606001519050336001600160a01b0316816001600160a01b031614611850578761183b57611836611719565b600197505b61185061184882336129c6565b6101f761052b565b885160208a015160408b01516080909b0151919b909a9992985090965090945092505050565b61188b8361188386611ac0565b836000612a7e565b50610dc48482846000611cb7565b6118ac826118a686611ac0565b83612ad4565b610dc48482856000611bd9565b6001600160a01b03161590565b60008282016116a4848210158361052b565b6118e58385836000612a7e565b50610dc4828583612ad4565b8015610dc45761190c6001600160a01b038516848484612b04565b826001600160a01b0316846001600160a01b03167f540a1a3f28340caec336c81d8d7b3df139ee5cdc1839a4f283d7ebb7eaae2d5c8484604051611951929190615ba2565b60405180910390a350505050565b61196e8134101561020461052b565b348190038015610539576105393382612b5e565b6001600160a01b039182166000908152600b6020908152604080832093909416825291909152205490565b80156119cd576119c86119be611a46565b421061019361052b565b6119e2565b6119e26119d8611a6a565b42106101a961052b565b6003805482151560ff19909116811790915560408051918252517f9e3a5e37224532dea67b89face185703738a228a6e8a23dee546960180d3be649181900360200190a150565b6000611a33611a6a565b42118061129957505060035460ff161590565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b336001600160a01b0382161461055e57611aa6611719565b611ab081336129c6565b61055e5761055e816101f7612bcd565b6000611acb826118b9565b611add57611ad882610528565b6116a7565b6116a7610506565b600080600080611af885608001516128b0565b90506000611b098660800151611eca565b90506002816002811115611b1957fe5b1415611b3057611b298683612c01565b9450611b5b565b6001816002811115611b3e57fe5b1415611b4e57611b298683612cb1565b611b588683612d44565b94505b611b6e8660000151876060015187612f68565b809450819550505085604001516001600160a01b031686602001516001600160a01b031687608001517f2170c741c41531aec20e7c107c24eecfdd15e69c9bb0a8dd37b1840b9e0b207b8787604051611bc8929190615da6565b60405180910390a450509193909250565b82611be357610dc4565b611bec846118b9565b15611c6d57611bfe811561020261052b565b611c0d8347101561020461052b565b611c15610506565b6001600160a01b031663d0e30db0846040518263ffffffff1660e01b81526004016000604051808303818588803b158015611c4f57600080fd5b505af1158015611c63573d6000803e3d6000fd5b5050505050610dc4565b6000611c7885610528565b90508115611c95576000611c8f8483876001612a7e565b90940393505b8315611cb057611cb06001600160a01b038216843087612b04565b5050505050565b82611cc157610dc4565b611cca846118b9565b15611d5a57611cdc811561020261052b565b611ce4610506565b6001600160a01b0316632e1a7d4d846040518263ffffffff1660e01b8152600401611d0f9190615d12565b600060405180830381600087803b158015611d2957600080fd5b505af1158015611d3d573d6000803e3d6000fd5b50611d55925050506001600160a01b03831684612b5e565b610dc4565b6000611d6585610528565b90508115611d7d57611d78838286612ad4565b611cb0565b611cb06001600160a01b0382168486611e25565b610539818314606761052b565b600080611da961137a565b6001600160a01b031663d877845c6040518163ffffffff1660e01b815260040160206040518083038186803b158015611de157600080fd5b505afa158015611df5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1991906159b3565b90506117f78382612f96565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610f64908490612fe3565b801561053957610539611e8861137a565b6001600160a01b0384169083611e25565b611ea2816125e8565b61055e611eae826128b0565b6001600160a01b0316336001600160a01b0316146101f561052b565b600061ffff605083901c166116a7600382106101f461052b565b611f05816001600160a01b0316836001600160a01b0316141561020a61052b565b611f24816001600160a01b0316836001600160a01b031610606661052b565b60008381526009602052604090208054611f61906001600160a01b0316158015611f59575060018201546001600160a01b0316155b61020b61052b565b80546001600160a01b039384166001600160a01b03199182161782556001909101805492909316911617905550565b6000828152600860205260408120905b8251811015610dc4576000611fd1848381518110611fba57fe5b6020026020010151846130cd90919063ffffffff16565b9050611fdf8161020a61052b565b50600101611fa0565b6000828152600160205260408120905b8251811015610dc457600061202684838151811061201257fe5b602090810291909101015184906000613130565b90506120348161020a61052b565b50600101611ff8565b600080600061204d8686866131dd565b92509250925061207761205f846132a4565b801561206f575061206f836132a4565b61020d61052b565b600095865260096020526040862080546001600160a01b031990811682556001909101805490911690559490945550505050565b6000828152600860205260408120905b8251811015610dc45760008382815181106120d257fe5b6020026020010151905061211e61206f600760008881526020019081526020016000206000846001600160a01b03166001600160a01b03168152602001908152602001600020546132a4565b60008581526007602090815260408083206001600160a01b0385168452909152812081905561214d84836132b1565b905061215b8161020961052b565b50506001016120bb565b6000828152600160205260408120905b8251811015610dc457600083828151811061218c57fe5b6020026020010151905060006121a284836133b8565b90506121b061206f826132a4565b6121ba84836133c7565b505050806001019050612175565b6121d0614d11565b5090565b6121dc611700565b836121e6816125e8565b836121f081611a8e565b612204836000015151846020015151611d91565b60006122138460000151613469565b9050600061222188836134f8565b905060008060006122368c8c8c8c8c89613589565b92509250925060006122478c611eca565b9050600281600281111561225757fe5b14156122bf576122ba8c8760008151811061226e57fe5b60200260200101518660008151811061228357fe5b60200260200101518960018151811061229857fe5b6020026020010151886001815181106122ad57fe5b602002602001015161374e565b6122e8565b60018160028111156122cd57fe5b14156122de576122ba8c878661378d565b6122e88c856137fa565b6000808e60018111156122f757fe5b1490508b6001600160a01b03168d7fe5ce249087ce04f05a957192435400fd97868dba0e6a4b4c049abf8af80dae78896123318886613843565b8760405161234193929190615c20565b60405180910390a3505050505050505050611cb06117a3565b606083516001600160401b038111801561237357600080fd5b5060405190808252806020026020018201604052801561239d578160200160208202803683370190505b5090506123a8614d3b565b6123b0614c98565b60008060005b89518110156125db578981815181106123cb57fe5b602002602001015194506000895186602001511080156123ef575089518660400151105b90506123fc81606461052b565b600061241e8b88602001518151811061241157fe5b6020026020010151611ac0565b905060006124358c89604001518151811061241157fe5b9050612458816001600160a01b0316836001600160a01b031614156101fd61052b565b60608801516124a857612470600085116101fe61052b565b600061247d8b84846138ea565b6001600160a01b0316876001600160a01b031614905061249f816101ff61052b565b50606088018590525b87516080880152868a60018111156124bc57fe5b908160018111156124c957fe5b9052506001600160a01b0380831660208901528181166040808a01919091526060808b0151908a015260808a01516101008a01528c51821660c08a01528c01511660e088015260008061251b89611ae5565b9198509250905061252d8c858561390c565b975061256161253b83613926565b8c8c602001518151811061254b57fe5b602002602001015161393a90919063ffffffff16565b8b8b602001518151811061257157fe5b6020026020010181815250506125af61258982613926565b8c8c604001518151811061259957fe5b602002602001015161396e90919063ffffffff16565b8b8b60400151815181106125bf57fe5b60200260200101818152505050505050508060010190506123b6565b5050505050949350505050565b60008181526005602052604090205461055e9060ff166101f461052b565b6000806000806000612617876139a2565b945094509450945050836001600160a01b0316866001600160a01b0316141561264657829450505050506116a7565b816001600160a01b0316866001600160a01b0316141561266b5793506116a792505050565b6126766102096116ad565b5050505092915050565b60008281526007602090815260408083206001600160a01b0385168452909152812054816126ad82613a18565b806126cb575060008581526008602052604090206126cb9085613a2a565b9050806126e6576126db856125e8565b6126e66102096116ad565b509392505050565b60008281526001602052604081206109c081846133b8565b6001600160701b031690565b60701c6001600160701b031690565b60e01c90565b60008061273384611eca565b9050600281600281111561274357fe5b141561275b576127538484613a4b565b9150506116a7565b600181600281111561276957fe5b1415612779576127538484613a9c565b6127538484613ab4565b600080600061279186611eca565b905060008760028111156127a157fe5b14156127bd576127b386828787613acc565b92509250506127e9565b60018760028111156127cb57fe5b14156127dd576127b386828787613b47565b6127b386828787613bc3565b94509492505050565b60007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061285f613c26565b3060405160200180868152602001858152602001848152602001838152602001826001600160a01b031681526020019550505050505060405160208183030381529060405280519060200120905090565b60601c90565b60608060006128c484611eca565b905060028160028111156128d457fe5b14156128ed576128e384613c2a565b9250925050612913565b60018160028111156128fb57fe5b141561290a576128e384613d5f565b6128e384613e84565b915091565b6060600082516001600160401b038111801561293357600080fd5b5060405190808252806020026020018201604052801561295d578160200160208202803683370190505b5091506000905060005b82518110156114e857600084828151811061297e57fe5b6020026020010151905061299181613f7e565b84838151811061299d57fe5b6020026020010181815250506129bb836129b683612721565b613f99565b925050600101612967565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205460ff1690565b6003546040516326f8aa2160e21b815260009161010090046001600160a01b031690639be2a88490612a2e90869086903090600401615d1b565b60206040518083038186803b158015612a4657600080fd5b505afa158015612a5a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a491906154c2565b600080612a8b8686611982565b9050612aa48380612a9c5750848210155b61020161052b565b612aae8185613fb0565b9150818103612aca878783612ac287613926565b600003613fbf565b5050949350505050565b6000612ae08484611982565b90506000612aee82846118c6565b9050611cb0858583612aff87613926565b613fbf565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610dc4908590612fe3565b612b6d814710156101a361052b565b6040516000906001600160a01b0384169083908381818185875af1925050503d8060008114612bb8576040519150601f19603f3d011682016040523d82523d6000602084013e612bbd565b606091505b50509050610f64816101a461052b565b6001600160a01b0382166000908152600260205260409020805460018101909155610f64612bfb848361401a565b8361052b565b600080600080612c1e8660800151876020015188604001516131dd565b92509250925060008087604001516001600160a01b031688602001516001600160a01b03161015612c53575083905082612c59565b50829050835b612c6588888484614168565b60408b015160208c01519199509294509092506001600160a01b03918216911610612c9957612c948183614265565b612ca3565b612ca38282614265565b909255509295945050505050565b600080612cc684608001518560200151612680565b90506000612cdc85608001518660400151612680565b9050612cea85858484614168565b6080880180516000908152600760208181526040808420828e01516001600160a01b03908116865290835281852098909855935183529081528282209a830151909516815298909352919096209590955550929392505050565b60808201516000908152600160209081526040822090840151829182918290612d6e9083906142a0565b90506000612d898860400151846142a090919063ffffffff16565b9050811580612d96575080155b15612db357612da888608001516125e8565b612db36102096116ad565b60001991820191016000612dc6846142bf565b90506000816001600160401b0381118015612de057600080fd5b50604051908082528060200260200182016040528015612e0a578160200160208202803683370190505b50600060a08c018190529091505b82811015612e8a576000612e2c87836142c3565b9050612e3781613f7e565b838381518110612e4357fe5b602002602001018181525050612e608c60a001516129b683612721565b60a08d015281861415612e7557809850612e81565b84821415612e81578097505b50600101612e18565b5060405162f64aa560e11b81526001600160a01b038a16906301ec954a90612ebc908d90859089908990600401615db4565b602060405180830381600087803b158015612ed657600080fd5b505af1158015612eea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f0e91906159b3565b9750600080612f268c600001518d606001518c612f68565b9092509050612f3589836142d9565b9850612f41888261430a565b9750612f4e87878b614320565b612f5987868a614320565b50505050505050505092915050565b60008080856001811115612f7857fe5b1415612f88575082905081612f8e565b50819050825b935093915050565b6000828202612fba841580612fb3575083858381612fb057fe5b04145b600361052b565b80612fc95760009150506116a7565b670de0b6b3a76400006000198201046001019150506116a7565b600080836001600160a01b0316836040518082805190602001908083835b602083106130205780518252601f199092019160209182019101613001565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114613082576040519150601f19603f3d011682016040523d82523d6000602084013e613087565b606091505b5091509150600082141561309f573d6000803e3d6000fd5b610dc48151600014806130c557508180602001905160208110156130c257600080fd5b50515b6101a261052b565b60006130d98383613a2a565b61312857508154600180820184556000848152602080822090930180546001600160a01b0319166001600160a01b038616908117909155855490825282860190935260409020919091556116a7565b5060006116a7565b6001600160a01b0382166000908152600284016020526040812054806131bd57505082546040805180820182526001600160a01b03858116808352602080840187815260008781526001808c018452878220965187546001600160a01b031916961695909517865590519484019490945594820180895590835260028801909452919020919091556117f7565b6000190160009081526001808601602052604082200183905590506117f7565b60008060008060006131ef8787614338565b9150915060006131ff8383614369565b60008a81526009602090815260408083208484526002019091528120805460018201549197509293509061323283613a18565b80613241575061324182613a18565b8061326257506132518c87613a4b565b801561326257506132628c86613a4b565b90508061327d576132728c6125e8565b61327d6102096116ad565b613287838361439c565b985061329383836143c1565b975050505050505093509350939050565b6001600160e01b03161590565b6001600160a01b038116600090815260018301602052604081205480156133ae57835460001980830191908101906000908790839081106132ee57fe5b60009182526020909120015487546001600160a01b039091169150819088908590811061331757fe5b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905591831681526001898101909252604090209084019055865487908061336057fe5b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b03881682526001898101909152604082209190915594506116a79350505050565b60009150506116a7565b60006116a483836102096143d8565b6001600160a01b038116600090815260028301602052604081205480156133ae57835460001990810160008181526001878101602090815260408084209587018452808420865481546001600160a01b03199081166001600160a01b0392831617835588860180549387019390935588548216875260028d018086528488209a909a5588541690975584905593895593871682529390925281205590506116a7565b6060600082516001600160401b038111801561348457600080fd5b506040519080825280602002602001820160405280156134ae578160200160208202803683370190505b50905060005b83518110156107de576134cc84828151811061241157fe5b8282815181106134d857fe5b6001600160a01b03909216602092830291909101909101526001016134b4565b6060600080613506856128b6565b9150915061351682518551611d91565b613526600083511161020f61052b565b60005b82518110156135805761357885828151811061354157fe5b60200260200101516001600160a01b031684838151811061355e57fe5b60200260200101516001600160a01b03161461020861052b565b600101613529565b50949350505050565b606080606060008061359a86612918565b9150915060006135a98b6128b0565b905060008c60018111156135b957fe5b1461365c57806001600160a01b03166374f3b0098c8c8c87876135da614415565b8f604001516040518863ffffffff1660e01b81526004016136019796959493929190615d3a565b600060405180830381600087803b15801561361b57600080fd5b505af115801561362f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526136579190810190615450565b6136f5565b806001600160a01b031663d5c096c48c8c8c8787613678614415565b8f604001516040518863ffffffff1660e01b815260040161369f9796959493929190615d3a565b600060405180830381600087803b1580156136b957600080fd5b505af11580156136cd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526136f59190810190615450565b809550819650505061370b87518651865161448f565b60008c600181111561371957fe5b146137305761372b89898988886144a7565b61373d565b61373d8a898988886145ed565b955050505096509650969350505050565b600061375a8584614369565b600087815260096020908152604080832084845260020190915290209091506137838584614265565b9055505050505050565b60005b8251811015610dc4578181815181106137a557fe5b60200260200101516007600086815260200190815260200160002060008584815181106137ce57fe5b6020908102919091018101516001600160a01b0316825281019190915260400160002055600101613790565b6000828152600160205260408120905b8251811015610dc45761383b8184838151811061382357fe5b6020026020010151846143209092919063ffffffff16565b60010161380a565b606082516001600160401b038111801561385c57600080fd5b50604051908082528060200260200182016040528015613886578160200160208202803683370190505b50905060005b83518110156107de57826138b6578381815181106138a657fe5b60200260200101516000036138cb565b8381815181106138c257fe5b60200260200101515b8282815181106138d757fe5b602090810291909101015260010161388c565b6000808460018111156138f957fe5b1461390457816109c0565b509092915050565b60008084600181111561391b57fe5b146107de57826109c0565b60006121d0600160ff1b83106101a561052b565b60008282016116a48284128015906139525750848212155b80613967575060008412801561396757508482125b600061052b565b60008183036116a48284128015906139865750848213155b8061399b575060008412801561399b57508482135b600161052b565b6000818152600960205260408120805460018201546001600160a01b03918216928492909116908290816139d68685614369565b60008181526002840160205260409020805460018201549199509192506139fd828261439c565b9650613a0982826143c1565b94505050505091939590929450565b6000613a23826132a4565b1592915050565b6001600160a01b031660009081526001919091016020526040902054151590565b600082815260096020526040812080546001600160a01b0384811691161480613a83575060018101546001600160a01b038481169116145b80156109c0575050506001600160a01b03161515919050565b60008281526008602052604081206109c08184613a2a565b60008281526001602052604081206109c08184614762565b6000806002856002811115613add57fe5b1415613af357613aee868585614783565b613b1d565b6001856002811115613b0157fe5b1415613b1257613aee868585614791565b613b1d86858561479f565b8215613b3757613b376001600160a01b0385163385611e25565b5050600081900394909350915050565b6000806002856002811115613b5857fe5b1415613b6e57613b698685856147ad565b613b98565b6001856002811115613b7c57fe5b1415613b8d57613b698685856147bb565b613b988685856147c9565b8215613bb357613bb36001600160a01b038516333086612b04565b5090946000869003945092505050565b6000806002856002811115613bd457fe5b1415613bec57613be58685856147d7565b9050613c19565b6001856002811115613bfa57fe5b1415613c0b57613be58685856147e7565b613c168685856147f7565b90505b6000915094509492505050565b4690565b606080600080600080613c3c876139a2565b92975090955093509150506001600160a01b0384161580613c6457506001600160a01b038216155b15613c8d5750506040805160008082526020820190815281830190925294509250612913915050565b60408051600280825260608201835290916020830190803683370190505095508386600081518110613cbb57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508186600181518110613ce957fe5b6001600160a01b03929092166020928302919091018201526040805160028082526060820183529092909190830190803683370190505094508285600081518110613d3057fe5b6020026020010181815250508085600181518110613d4a57fe5b60200260200101818152505050505050915091565b60008181526008602052604090206060908190613d7b816142bf565b6001600160401b0381118015613d9057600080fd5b50604051908082528060200260200182016040528015613dba578160200160208202803683370190505b50925082516001600160401b0381118015613dd457600080fd5b50604051908082528060200260200182016040528015613dfe578160200160208202803683370190505b50915060005b8351811015613e7d576000613e198383614807565b905080858381518110613e2857fe5b6001600160a01b03928316602091820292909201810191909152600088815260078252604080822093851682529290915220548451859084908110613e6957fe5b602090810291909101015250600101613e04565b5050915091565b60008181526001602052604090206060908190613ea0816142bf565b6001600160401b0381118015613eb557600080fd5b50604051908082528060200260200182016040528015613edf578160200160208202803683370190505b50925082516001600160401b0381118015613ef957600080fd5b50604051908082528060200260200182016040528015613f23578160200160208202803683370190505b50915060005b8351811015613e7d57613f3c8282614834565b858381518110613f4857fe5b60200260200101858481518110613f5b57fe5b60209081029190910101919091526001600160a01b039091169052600101613f29565b6000613f8982612712565b613f9283612706565b0192915050565b600081831015613fa957816116a4565b5090919050565b6000818310613fa957816116a4565b6001600160a01b038085166000818152600b602090815260408083209488168084529490915290819020859055517f18e1ea4139e68413d7d08aa752e71568e36b2c5bf940893314c2c5b01eaa0c4290611951908590615d12565b600080614025614858565b9050428110156140395760009150506116a7565b6000614043614864565b905080614055576000925050506116a7565b600081614060614975565b80516020918201206040805180840194909452838101919091523360608401526080830188905260a08084018790528151808503909101815260c090930190528151910120905060006140b2826149c4565b905060008060006140c1614a10565b925092509250600060018585858560405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015614123573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381161580159061415957508a6001600160a01b0316816001600160a01b0316145b9b9a5050505050505050505050565b60008060008061417786613f7e565b9050600061418486613f7e565b905061419b61419288612721565b6129b688612721565b60a08a015260405163274b044360e21b81526001600160a01b03891690639d2c110c906141d0908c9086908690600401615ded565b602060405180830381600087803b1580156141ea57600080fd5b505af11580156141fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061422291906159b3565b925060008061423a8b600001518c6060015187612f68565b909250905061424989836142d9565b9650614255888261430a565b9550505050509450945094915050565b60008061427d61427485612721565b6129b685612721565b90506109c061428b85612706565b61429485612706565b8363ffffffff16614a37565b6001600160a01b03166000908152600291909101602052604090205490565b5490565b6000908152600191820160205260409020015490565b6000806142ef836142e986612706565b906118c6565b905060006142fc85612712565b905043611271838383614a45565b6000806142ef8361431a86612706565b90614a73565b60009182526001928301602052604090912090910155565b600080826001600160a01b0316846001600160a01b03161061435b57828461435e565b83835b915091509250929050565b6000828260405160200161437e929190615b4a565b60405160208183030381529060405280519060200120905092915050565b60006116a46143aa84612706565b6143b384612706565b6143bc86612721565b614a45565b60006116a46143cf84612712565b6143b384612712565b6001600160a01b03821660009081526002840160205260408120546143ff8115158461052b565b61440c85600183036142c3565b95945050505050565b600061441f61137a565b6001600160a01b03166355c676286040518163ffffffff1660e01b815260040160206040518083038186803b15801561445757600080fd5b505afa15801561446b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129991906159b3565b610f6482841480156144a057508183145b606761052b565b606083516001600160401b03811180156144c057600080fd5b506040519080825280602002602001820160405280156144ea578160200160208202803683370190505b50905060005b8551518110156145e357600084828151811061450857fe5b602002602001015190506145388760200151838151811061452557fe5b60200260200101518210156101f961052b565b60008760000151838151811061454a57fe5b6020026020010151905061456481838b8b60600151611cb7565b600085848151811061457257fe5b6020026020010151905061458e61458883611ac0565b82611e77565b6145bd61459b84836118c6565b8986815181106145a757fe5b602002602001015161430a90919063ffffffff16565b8585815181106145c957fe5b6020026020010181815250505050508060010190506144f0565b5095945050505050565b6060600084516001600160401b038111801561460857600080fd5b50604051908082528060200260200182016040528015614632578160200160208202803683370190505b50915060005b86515181101561475857600085828151811061465057fe5b602002602001015190506146808860200151838151811061466d57fe5b60200260200101518211156101fa61052b565b60008860000151838151811061469257fe5b602002602001015190506146ac81838c8c60600151611bd9565b6146b5816118b9565b156146c7576146c484836118c6565b93505b60008684815181106146d557fe5b602002602001015190506146eb61458883611ac0565b8083101561470a576147058382038a86815181106145a757fe5b614732565b6147328184038a868151811061471c57fe5b60200260200101516142d990919063ffffffff16565b86858151811061473e57fe5b602002602001018181525050505050806001019050614638565b506145e38161195f565b6001600160a01b031660009081526002919091016020526040902054151590565b610dc48383614a8984614ac4565b610dc48383614a8984614b6f565b610dc48383614a8984614bca565b610dc48383614c1984614ac4565b610dc48383614c1984614b6f565b610dc48383614c1984614bca565b60006109c08484614c3a85614ac4565b60006109c08484614c3a85614b6f565b60006109c08484614c3a85614bca565b600082600001828154811061481857fe5b6000918252602090912001546001600160a01b03169392505050565b600090815260019182016020526040902080549101546001600160a01b0390911691565b60006112996000614c54565b6000803560e01c8063b95cac2881146148ac57638bdb391381146148d4576352bbbe2981146148fc5763945bcec981146149245763fa6e671d811461494c5760009250614970565b7f3f7b71252bd19113ff48c19c6e004a9bcfcca320a0d74d58e85877cbd7dcae589250614970565b7f8bbc57f66ea936902f50a71ce12b92c43f3c5340bb40c27c4e90ab84eeae33539250614970565b7fe192dcbc143b1e244ad73b813fd3c097b832ad260a157340b4e5e5beda067abe9250614970565b7f9bfc43a4d98313c6766986ffd7c916c7481566d9f224c6819af0a53388aced3a9250614970565b7fa3f865aa351e51cfeb40f5178d1564bb629fe9030b83caf6361d1baaf5b90b5a92505b505090565b60606000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505082519293505050608010156105285760803603815290565b60006149ce6127f2565b82604051602001808061190160f01b81525060020183815260200182815260200192505050604051602081830303815290604052805190602001209050919050565b6000806000614a1f6020614c54565b9250614a2b6040614c54565b91506108206060614c54565b60e01b60709190911b010190565b6000838301614a68858210801590614a605750600160701b82105b61020e61052b565b61440c858585614a37565b6000614a8383831115600161052b565b50900390565b600080614a998361431a86612706565b90506000614aaa846142e987612712565b90506000614ab786612721565b9050611271838383614a45565b6000806000806000614ad5896139a2565b9450509350935093506000836001600160a01b0316896001600160a01b03161415614b20576000614b0a84898b63ffffffff16565b9050614b168185614c5e565b9093509050614b42565b6000614b3083898b63ffffffff16565b9050614b3c8184614c5e565b90925090505b614b4c8383614265565b8555614b588383614c7a565b600190950194909455509192505050949350505050565b600080614b7c8686612680565b90506000614b8e82858763ffffffff16565b60008881526007602090815260408083206001600160a01b038b16845290915290208190559050614bbf8183614c5e565b979650505050505050565b600084815260016020526040812081614be382876133b8565b90506000614bf582868863ffffffff16565b9050614c02838883613130565b50614c0d8183614c5e565b98975050505050505050565b600080614c29836142e986612706565b90506000614aaa8461431a87612712565b600080614c4684612706565b90504361440c828583614a45565b3601607f19013590565b6000614c6982612712565b614c7284612712565b039392505050565b60006116a4614c8884612712565b614c9184612712565b6000614a37565b60408051610120810190915280600081526000602082018190526040820181905260608083018290526080830182905260a0830182905260c0830182905260e08301919091526101009091015290565b604080516080810190915280600081526000602082018190526040820181905260609091015290565b60405180608001604052806060815260200160608152602001606081526020016000151581525090565b6040518060a0016040528060008019168152602001600081526020016000815260200160008152602001606081525090565b803561060f81615e76565b600082601f830112614d88578081fd5b81356020614d9d614d9883615e59565b615e36565b8281528181019085830183850287018401881015614db9578586fd5b855b85811015614de0578135614dce81615e76565b84529284019290840190600101614dbb565b5090979650505050505050565b600082601f830112614dfd578081fd5b81356020614e0d614d9883615e59565b8281528181019085830183850287018401881015614e29578586fd5b855b85811015614de0578135614e3e81615e76565b84529284019290840190600101614e2b565b600082601f830112614e60578081fd5b81356020614e70614d9883615e59565b82815281810190858301855b85811015614de0578135880160a080601f19838d03011215614e9c578889fd5b604080518281016001600160401b038282108183111715614eb957fe5b8184528a8601358352838601358b84015260609150818601358484015260809350838601358284015284860135945080851115614ef4578c8dfd5b5050614f048d8a85870101614fde565b91810191909152865250509284019290840190600101614e7c565b600082601f830112614f2f578081fd5b81356020614f3f614d9883615e59565b8281528181019085830183850287018401881015614f5b578586fd5b855b85811015614de057813584529284019290840190600101614f5d565b600082601f830112614f89578081fd5b81516020614f99614d9883615e59565b8281528181019085830183850287018401881015614fb5578586fd5b855b85811015614de057815184529284019290840190600101614fb7565b803561060f81615e8b565b600082601f830112614fee578081fd5b81356001600160401b0381111561500157fe5b615014601f8201601f1916602001615e36565b818152846020838601011115615028578283fd5b816020850160208301379081016020019190915292915050565b80356002811061060f57600080fd5b600060808284031215615062578081fd5b61506c6080615e36565b905081356001600160401b038082111561508557600080fd5b61509185838601614d78565b835260208401359150808211156150a757600080fd5b6150b385838601614f1f565b602084015260408401359150808211156150cc57600080fd5b506150d984828501614fde565b6040830152506150eb60608301614fd3565b606082015292915050565b600060808284031215615107578081fd5b604051608081018181106001600160401b038211171561512357fe5b604052905080823561513481615e76565b8152602083013561514481615e8b565b6020820152604083013561515781615e76565b6040820152606083013561516a81615e8b565b6060919091015292915050565b600060208284031215615188578081fd5b81356116a481615e76565b600080604083850312156151a5578081fd5b82356151b081615e76565b915060208301356151c081615e76565b809150509250929050565b6000806000606084860312156151df578081fd5b83356151ea81615e76565b925060208401356151fa81615e76565b9150604084013561520a81615e8b565b809150509250925092565b60008060408385031215615227578182fd5b823561523281615e76565b915060208301356001600160401b0381111561524c578182fd5b61525885828601614ded565b9150509250929050565b60006020808385031215615274578182fd5b82356001600160401b038082111561528a578384fd5b818501915085601f83011261529d578384fd5b81356152ab614d9882615e59565b818152848101908486016080808502870188018b10156152c9578889fd5b8896505b848710156153435780828c0312156152e3578889fd5b6040805182810181811089821117156152f857fe5b8252833561530581615e99565b8152838a01358a8201528184013561531c81615e76565b918101919091526060838101359082015284526001969096019592870192908101906152cd565b50909998505050505050505050565b60006020808385031215615364578182fd5b82356001600160401b038082111561537a578384fd5b818501915085601f83011261538d578384fd5b813561539b614d9882615e59565b8181528481019084860160a0808502870188018b10156153b9578889fd5b8896505b848710156153435780828c0312156153d3578889fd5b6040805182810181811089821117156153e857fe5b82528335600481106153f8578b8cfd5b8152615405848b01614d6d565b8a820152818401358282015260609150615420828501614d6d565b8282015260809150615433828501614d6d565b9181019190915284526001969096019592870192908101906153bd565b60008060408385031215615462578182fd5b82516001600160401b0380821115615478578384fd5b61548486838701614f79565b93506020850151915080821115615499578283fd5b5061525885828601614f79565b6000602082840312156154b7578081fd5b81356116a481615e8b565b6000602082840312156154d3578081fd5b81516116a481615e8b565b6000602082840312156154ef578081fd5b5035919050565b6000806000806080858703121561550b578182fd5b84359350602085013561551d81615e76565b9250604085013561552d81615e76565b915060608501356001600160401b03811115615547578182fd5b61555387828801615051565b91505092959194509250565b60008060408385031215615571578182fd5b8235915060208301356001600160401b0381111561524c578182fd5b6000806000606084860312156155a1578081fd5b833592506020808501356001600160401b03808211156155bf578384fd5b6155cb88838901614ded565b945060408701359150808211156155e0578384fd5b508501601f810187136155f1578283fd5b80356155ff614d9882615e59565b81815283810190838501858402850186018b101561561b578687fd5b8694505b8385101561564657803561563281615e76565b83526001949094019391850191850161561f565b5080955050505050509250925092565b60008060408385031215615668578182fd5b8235915060208301356151c081615e76565b60006020828403121561568b578081fd5b81356001600160e01b0319811681146116a4578182fd5b600080600080608085870312156156b7578182fd5b84356156c281615e76565b935060208501356001600160401b03808211156156dd578384fd5b6156e988838901614ded565b945060408701359150808211156156fe578384fd5b61570a88838901614f1f565b9350606087013591508082111561571f578283fd5b5061555387828801614fde565b60006020828403121561573d578081fd5b81356116a481615e99565b60008060008060e0858703121561575d578182fd5b61576685615042565b935060208501356001600160401b0380821115615781578384fd5b61578d88838901614e50565b945060408701359150808211156157a2578384fd5b506157af87828801614d78565b9250506157bf86606087016150f6565b905092959194509250565b60008060008060008061012087890312156157e3578384fd5b6157ec87615042565b95506020808801356001600160401b0380821115615808578687fd5b6158148b838c01614e50565b975060408a0135915080821115615829578687fd5b6158358b838c01614d78565b96506158448b60608c016150f6565b955060e08a0135915080821115615859578485fd5b508801601f81018a1361586a578384fd5b8035615878614d9882615e59565b81815283810190838501858402850186018e1015615894578788fd5b8794505b838510156158b6578035835260019490940193918501918501615898565b50809650505050505061010087013590509295509295509295565b60008060008060e085870312156158e6578182fd5b84356001600160401b03808211156158fc578384fd5b9086019060c0828903121561590f578384fd5b60405160c08101818110838211171561592457fe5b6040528235815261593760208401615042565b602082015261594860408401614d6d565b604082015261595960608401614d6d565b60608201526080830135608082015260a083013582811115615979578586fd5b6159858a828601614fde565b60a08301525080965050505061599e86602087016150f6565b939693955050505060a08201359160c0013590565b6000602082840312156159c4578081fd5b5051919050565b6001600160a01b03169052565b6000815180845260208085019450808401835b83811015615a105781516001600160a01b0316875295820195908201906001016159eb565b509495945050505050565b6000815180845260208085019450808401835b83811015615a1057815187529582019590820190600101615a2e565b60008151808452815b81811015615a6f57602081850181015186830182015201615a53565b81811115615a805782602083870101525b50601f01601f19169290920160200192915050565b60038110615a9f57fe5b9052565b6000610120825160028110615ab457fe5b808552506020830151615aca60208601826159cb565b506040830151615add60408601826159cb565b50606083015160608501526080830151608085015260a083015160a085015260c0830151615b0e60c08601826159cb565b5060e0830151615b2160e08601826159cb565b5061010080840151828287015261127183870182615a4a565b6000828483379101908152919050565b6bffffffffffffffffffffffff19606093841b811682529190921b16601482015260280190565b6001600160a01b0391909116815260200190565b6001600160a01b0383168152604081016117f76020830184615a95565b6001600160a01b03929092168252602082015260400190565b6000602082526116a460208301846159d8565b600060408252615be160408301856159d8565b828103602084810191909152845180835285820192820190845b81811015614de05784516001600160a01b031683529383019391830191600101615bfb565b600060608252615c3360608301866159d8565b8281036020840152615c458186615a1b565b905082810360408401526112718185615a1b565b600060808252615c6c60808301876159d8565b8281036020840152615c7e8187615a1b565b90508281036040840152615c928186615a1b565b90508281036060840152614bbf8185615a4a565b600060608252615cb960608301866159d8565b8281036020840152615ccb8186615a1b565b915050826040830152949350505050565b6000602082526116a46020830184615a1b565b901515815260200190565b92151583526020830191909152604082015260600190565b90815260200190565b9283526001600160a01b03918216602084015216604082015260600190565b8781526001600160a01b0387811660208301528616604082015260e060608201819052600090615d6c90830187615a1b565b8560808401528460a084015282810360c0840152615d8a8185615a4a565b9a9950505050505050505050565b602081016116a78284615a95565b918252602082015260400190565b600060808252615dc76080830187615aa3565b8281036020840152615dd98187615a1b565b604084019590955250506060015292915050565b600060608252615e006060830186615aa3565b60208301949094525060400152919050565b938452602084019290925260408301526001600160a01b0316606082015260800190565b6040518181016001600160401b0381118282101715615e5157fe5b604052919050565b60006001600160401b03821115615e6c57fe5b5060209081020190565b6001600160a01b038116811461055e57600080fd5b801515811461055e57600080fd5b6003811061055e57600080fdfea2646970667358221220a46ae94e922a3a2617b76c6120f54a0e1abd43dbed290d15119534663723fee664736f6c63430007060033",
    "sourceMap": "3244:648:30:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6374:61:21;6405:7;:5;:7::i;:::-;-1:-1:-1;;;;;6383:30:21;:10;-1:-1:-1;;;;;6383:30:21;;9022:3:2;6374:8:21;:61::i;:::-;3244:648:30;;;;;3765:140:31;;;;;;;;;;-1:-1:-1;3765:140:31;;;;;:::i;:::-;;:::i;2550:771:25:-;;;;;;;;;;-1:-1:-1;2550:771:25;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2521:2571:29;;;;;;:::i;:::-;;:::i;2170:345::-;;;;;;;;;;-1:-1:-1;2170:345:29;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3634:111:30:-;;;;;;;;;;-1:-1:-1;3634:111:30;;;;;:::i;:::-;;:::i;3154:363:8:-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;2389:2144:28:-;;;;;;:::i;:::-;;:::i;1451:2156:23:-;;;;;;;;;;-1:-1:-1;1451:2156:23;;;;;:::i;:::-;;:::i;1113:1188:26:-;;;;;;;;;;-1:-1:-1;1113:1188:26;;;;;:::i;:::-;;:::i;2307:1095::-;;;;;;;;;;-1:-1:-1;2307:1095:26;;;;;:::i;:::-;;:::i;2487:430:1:-;;;;;;;;;;-1:-1:-1;2487:430:1;;;;;:::i;:::-;;:::i;2309:384:24:-;;;;;;;;;;-1:-1:-1;2309:384:24;;;;;:::i;:::-;;:::i;1873:117:7:-;;;;;;;;;;-1:-1:-1;1873:117:7;;;;;:::i;:::-;;:::i;4539:1825:28:-;;;;;;:::i;:::-;;:::i;4067:105:31:-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;3804:86:30:-;;;;;;;;;;;;;:::i;3857:984:26:-;;;;;;;;;;-1:-1:-1;3857:984:26;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;1741:562:24:-;;;;;;:::i;:::-;;:::i;1462:135:22:-;;;;;;;;;;;;;:::i;1564:1096:20:-;;;;;;;;;;-1:-1:-1;1564:1096:20;;;;;:::i;:::-;;:::i;1752:115:7:-;;;;;;;;;;;;;:::i;3327:246:25:-;;;;;;;;;;-1:-1:-1;3327:246:25;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;19634:5730:28:-;;;;;;;;;;-1:-1:-1;19634:5730:28;;;;;:::i;:::-;;:::i;3408:443:26:-;;;;;;;;;;-1:-1:-1;3408:443:26;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;4178:301:31:-;;;;;;;;;;-1:-1:-1;4178:301:31;;;;;:::i;:::-;;:::i;4485:155::-;;;;;;;;;;-1:-1:-1;4485:155:31;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1420:76:0:-;1484:5;1420:76;;:::o;866:101:2:-;935:9;930:34;;946:18;954:9;946:7;:18::i;:::-;866:101;;:::o;3765:140:31:-;2561:20:17;:18;:20::i;:::-;2156:21:1::1;:19;:21::i;:::-;3869:29:31::2;3884:13;3869:14;:29::i;:::-;2602:19:17::0;:17;:19::i;:::-;3765:140:31;:::o;2550:771:25:-;2701:7;2561:20:17;:18;:20::i;:::-;2970:18:8::1;:16;:18::i;:::-;2902:14:25::2;2919:61;2929:10;2941:14;2964;;2919:9;:61::i;:::-;3001:25;::::0;;;:17:::2;:25;::::0;;;;;2902:78;;-1:-1:-1;2991:60:25::2;::::0;3001:25:::2;;3000:26;7978:3:2;2991:8:25;:60::i;:::-;3108:25;::::0;;;:17:::2;:25;::::0;;;;;;:32;;-1:-1:-1;;3108:32:25::2;3136:4;3108:32:::0;;::::2;::::0;;;3151:14:::2;:19:::0;;;;::::2;::::0;;3241:50;3264:10:::2;::::0;3126:6;;3241:50:::2;::::0;::::2;::::0;3276:14;;3241:50:::2;:::i;:::-;;;;;;;;3308:6:::0;-1:-1:-1;2602:19:17;:17;:19::i;:::-;2550:771:25;;;:::o;2521:2571:29:-;2561:20:17;:18;:20::i;:::-;2735:18:29::1;2844:27:::0;2889:21:::1;2934:9:::0;2929:2078:::1;2953:3;:10;2949:1;:14;2929:2078;;;2984:22;3020:12:::0;3046:14:::1;3074::::0;3102:25:::1;3328:100;3368:3;3372:1;3368:6;;;;;;;;;;;;;;3392:22;3328;:100::i;:::-;3261:167:::0;-1:-1:-1;3261:167:29;;-1:-1:-1;3261:167:29;;-1:-1:-1;3261:167:29;-1:-1:-1;3261:167:29;-1:-1:-1;3261:167:29;-1:-1:-1;3455:35:29::1;3447:4;:43;;;;;;;;;3443:1554;;;3608:62;3637:5;3644:6;3652:9;3663:6;3608:28;:62::i;:::-;3443:1554;;;3939:16;3934:127;;3979:18;:16;:18::i;:::-;4038:4;4019:23;;3934:127;4091:34;4083:4;:42;;;;;;;;;4079:904;;;4149:59;4175:5;4182:6;4190:9;4201:6;4149:25;:59::i;:::-;4320:13;4327:5;4320:6;:13::i;:::-;4316:103;;;4374:22;:10:::0;4389:6;4374:14:::1;:22::i;:::-;4361:35;;4079:904;;;4517:56;4527:13;4534:5;4527:6;:13::i;:::-;4526:14;9083:3:2;4517:8:29;:56::i;:::-;4595:12;4610:16;4620:5;4610:9;:16::i;:::-;4595:31:::0;-1:-1:-1;4661:35:29::1;4653:4;:43;;;;;;;;;4649:316;;;4724:58;4749:5;4756:6;4764:9;4775:6;4724:24;:58::i;:::-;4649:316;;;4882:60;4909:5;4916:6;4924:9;4935:6;4882:26;:60::i;:::-;4079:904;;-1:-1:-1::0;;2965:3:29::1;::::0;;::::1;::::0;-1:-1:-1;2929:2078:29::1;::::0;-1:-1:-1;;2929:2078:29::1;;;5054:31;5074:10;5054:19;:31::i;:::-;2591:1:17;;;2602:19:::0;:17;:19::i;2170:345:29:-;2300:25;2366:6;:13;-1:-1:-1;;;;;2352:28:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2352:28:29;;2341:39;;2395:9;2390:119;2414:6;:13;2410:1;:17;2390:119;;;2462:36;2482:4;2488:6;2495:1;2488:9;;;;;;;;;;;;;;2462:19;:36::i;:::-;2448:8;2457:1;2448:11;;;;;;;;;;;;;;;;;:50;2429:3;;2390:119;;;;2170:345;;;;:::o;3634:111:30:-;2561:20:17;:18;:20::i;:::-;2156:21:1::1;:19;:21::i;:::-;3720:18:30::2;3731:6;3720:10;:18::i;3154:363:8:-:0;3257:11;3282:26;3322:27;3384:14;:12;:14::i;:::-;3383:15;3374:24;;3429;:22;:24::i;:::-;3408:45;;3485:25;:23;:25::i;:::-;3463:47;;3154:363;;;:::o;2389:2144:28:-;2681:24;2561:20:17;:18;:20::i;:::-;2970:18:8::1;:16;:18::i;:::-;2650:12:28::0;;3418:22:31::2;2650:12:28::0;3418:16:31::2;:22::i;:::-;2873:59:28::3;2901:8;2882:15;:27;;8414:3:2;2873:8:28;:59::i;:::-;3100:68;3129:1;3109:10;:17;;;:21;8540:3:2;3100:8:28;:68::i;:::-;3179:14;3196:38;3215:10;:18;;;3196;:38::i;:::-;3179:55;;3244:15;3262:39;3281:10;:19;;;3262:18;:39::i;:::-;3244:57;;3311:60;3331:8;-1:-1:-1::0;;;;;3320:19:28::3;:7;-1:-1:-1::0;;;;;3320:19:28::3;;;8474:3:2;3311:8:28;:60::i;:::-;3475:47;;:::i;:::-;3553:17:::0;;3532:18:::3;::::0;::::3;:38:::0;3599:15:::3;::::0;::::3;::::0;3532:11;;3580:34:::3;::::0;::::3;;;;;;;;;;;;;;;;::::0;;-1:-1:-1;;;;;;3624:29:28;;::::3;:19;::::0;::::3;:29:::0;3663:31;;::::3;:20;::::0;;::::3;:31:::0;;;;3725:17:::3;::::0;::::3;::::0;3704:18:::3;::::0;::::3;:38:::0;3775:19:::3;::::0;::::3;::::0;3752:20:::3;::::0;::::3;:42:::0;3823:12;;3804:31;::::3;:16;::::0;::::3;:31:::0;3862:15;::::3;::::0;3845:32:::3;:14;::::0;::::3;:32:::0;-1:-1:-1;;4044:26:28::3;3624:11:::0;4044:13:::3;:26::i;:::-;4002:68:::0;;-1:-1:-1;4002:68:28;-1:-1:-1;4002:68:28;-1:-1:-1;4080:106:28::3;4108:17;4089:10;:15;;;:36;;;;;;;;;:77;;4161:5;4149:8;:17;;4089:77;;;4141:5;4128:9;:18;;4089:77;8363:3:2;4080:8:28;:106::i;:::-;4197:84;4211:10;:18;;;4231:8;4241:5;:12;;;4255:5;:25;;;4197:13;:84::i;:::-;4291;4302:10;:19;;;4323:9;4334:5;:15;;;4351:5;:23;;;4291:10;:84::i;:::-;4464:62;4484:26;4491:10;:18;;;4484:6;:26::i;:::-;:41;;4524:1;4484:41;;;4513:8;4484:41;4464:19;:62::i;:::-;3450:1:31;;;;;2998::8::2;2602:19:17::0;:17;:19::i;:::-;2389:2144:28;;;;;;:::o;1451:2156:23:-;2561:20:17;:18;:20::i;:::-;2970:18:8::1;:16;:18::i;:::-;1667:66:23::2;1703:6;:13;1718:7;:14;1667:35;:66::i;:::-;1744:27;1788:6;:13;-1:-1:-1::0;;;;;1774:28:23::2;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;-1:-1:-1;1774:28:23::2;;1744:58;;1812:32;1861:6;:13;-1:-1:-1::0;;;;;1847:28:23::2;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;-1:-1:-1;1847:28:23::2;;1812:63;;1983:20;2031:9:::0;2026:565:::2;2050:6;:13;2046:1;:17;2026:565;;;2084:12;2099:6;2106:1;2099:9;;;;;;;;;;;;;;2084:24;;2122:14;2139:7;2147:1;2139:10;;;;;;;;;;;;;;2122:27;;2164:96;2181:13;-1:-1:-1::0;;;;;2173:21:23::2;:5;-1:-1:-1::0;;;;;2173:21:23::2;;2212:1;-1:-1:-1::0;;;;;2196:18:23::2;:5;-1:-1:-1::0;;;;;2196:18:23::2;;:63;;4943:3:2;2196:63:23;;;5050:3:2;2196:63:23;2164:8;:96::i;:::-;2290:5;2274:21;;2331:5;-1:-1:-1::0;;;;;2331:15:23::2;;2355:4;2331:30;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2310:15;2326:1;2310:18;;;;;;;;;;;;;:51;;;::::0;::::2;2391:36;2420:6;2391:28;:36::i;:::-;2375:10;2386:1;2375:13;;;;;;;;;;;;;:52;;;::::0;::::2;2442:78;2473:6;2451:15;2467:1;2451:18;;;;;;;;;;;;;;:28;;9613:3:2;2442:8:23;:78::i;:::-;2534:46;-1:-1:-1::0;;;;;2534:18:23;::::2;2561:9:::0;2573:6;2534:18:::2;:46::i;:::-;-1:-1:-1::0;;2065:3:23::2;;2026:565;;;-1:-1:-1::0;2601:65:23::2;::::0;-1:-1:-1;;;2601:65:23;;-1:-1:-1;;;;;2601:26:23;::::2;::::0;::::2;::::0;:65:::2;::::0;2628:6;;2636:7;;2645:10;;2657:8;;2601:65:::2;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;2682:9;2677:924;2701:6;:13;2697:1;:17;2677:924;;;2735:12;2750:6;2757:1;2750:9;;;;;;;;;;;;;;2735:24;;2773:22;2798:15;2814:1;2798:18;;;;;;;;;;;;;;2773:43;;3049:23;3075:5;-1:-1:-1::0;;;;;3075:15:23::2;;3099:4;3075:30;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3049:56;;3119:77;3147:14;3128:15;:33;;8865:3:2;3119:8:23;:77::i;:::-;3298:25;3344:14;3326:15;:32;3298:60;;3372:87;3402:10;3413:1;3402:13;;;;;;;;;;;;;;3381:17;:34;;9836:3:2;3372:8:23;:87::i;:::-;3474:39;3488:5;3495:17;3474:13;:39::i;:::-;3553:5;-1:-1:-1::0;;;;;3532:58:23::2;3542:9;-1:-1:-1::0;;;;;3532:58:23::2;;3560:7;3568:1;3560:10;;;;;;;;;;;;;;3572:17;3532:58;;;;;;;:::i;:::-;;;;;;;;2677:924;;;;2716:3;;;;;2677:924;;;;2998:1:8;;;2602:19:17::0;:17;:19::i;:::-;1451:2156:23;;;;:::o;1113:1188:26:-;2561:20:17;:18;:20::i;:::-;2970:18:8::1;:16;:18::i;:::-;1293:6:26::2;1954:27:25;1974:6;1954:19;:27::i;:::-;1311:72:26::3;1347:6;:13;1362;:20;1311:35;:72::i;:::-;1463:9;1458:224;1482:6;:13;1478:1;:17;1458:224;;;1516:12;1531:6;1538:1;1531:9;;;;;;;;;;;;;;1516:24;;1554:50;1579:1;-1:-1:-1::0;;;;;1563:18:26::3;:5;-1:-1:-1::0;;;;;1563:18:26::3;;;6154:3:2;1554:8:26;:50::i;:::-;1655:13;1669:1;1655:16;;;;;;;;;::::0;;::::3;::::0;;;;;;;1619:26:::3;::::0;;;:18:::3;:26:::0;;;;;;-1:-1:-1;;;;;1619:33:26;;::::3;::::0;;;;;;;;;:52;;-1:-1:-1;;;;;;1619:52:26::3;::::0;;;::::3;::::0;;;::::3;::::0;;-1:-1:-1;1497:3:26::3;1458:224;;;;1692:33;1728:30;1751:6;1728:22;:30::i;:::-;1692:66:::0;-1:-1:-1;1790:28:26::3;1772:14;:46;;;;;;;;;1768:464;;;1834:60;1843:6;:13;1860:1;1843:18;9373:3:2;1834:8:26;:60::i;:::-;1908:57;1936:6;1944;1951:1;1944:9;;;;;;;;;;;;;;1955:6;1962:1;1955:9;;;;;;;;;;;;;;1908:27;:57::i;:::-;1768:464;;;2004:36;1986:14;:54;;;;;;;;;1982:250;;;2056:50;2091:6;2099;2056:34;:50::i;1982:250::-;2179:42;2206:6;2214;2179:26;:42::i;:::-;2264:6;2247:47;2272:6;2280:13;2247:47;;;;;;;:::i;:::-;;;;;;;;1991:1:25;2998::8::2;2602:19:17::0;:17;:19::i;:::-;1113:1188:26;;;:::o;2307:1095::-;2561:20:17;:18;:20::i;:::-;2970:18:8::1;:16;:18::i;:::-;2467:6:26::2;1954:27:25;1974:6;1954:19;:27::i;:::-;2489:33:26::3;2525:30;2548:6;2525:22;:30::i;:::-;2489:66:::0;-1:-1:-1;2587:28:26::3;2569:14;:46;;;;;;;;;2565:470;;;2631:60;2640:6;:13;2657:1;2640:18;9373:3:2;2631:8:26;:60::i;:::-;2705:59;2735:6;2743;2750:1;2743:9;;;;;;;;;;;;;;2754:6;2761:1;2754:9;;;;;;;;;;;;;;2705:29;:59::i;:::-;2565:470;;;2803:36;2785:14;:54;;;;;;;;;2781:254;;;2855:52;2892:6;2900;2855:36;:52::i;2781:254::-;2980:44;3009:6;3017;2980:28;:44::i;:::-;3238:9;3233:113;3257:6;:13;3253:1;:17;3233:113;;;3298:18;:26;3317:6;3298:26;;;;;;;;;;;:37;3325:6;3332:1;3325:9;;;;;;;;;::::0;;::::3;::::0;;;;;;;-1:-1:-1;;;;;3298:37:26::3;::::0;;;::::3;::::0;;;;;;-1:-1:-1;3298:37:26;3291:44;;-1:-1:-1;;;;;;3291:44:26::3;::::0;;;3272:3:::3;3233:113;;;;3380:6;3361:34;3388:6;3361:34;;;;;;:::i;:::-;;;;;;;;1991:1:25;2998::8::2;2602:19:17::0;:17;:19::i;2487:430:1:-;2859:50;;;2876:22;2859:50;;;;;;;;-1:-1:-1;;;;;;2859:50:1;;;;;;;;;;;;;;;;;;;;;;2849:61;;;;;2487:430;;;:::o;2309:384:24:-;2589:97;2601:26;2629:6;2637;2645:9;2656:29;2677:7;2656:20;:29::i;:::-;2589:11;:97::i;1873:117:7:-;-1:-1:-1;;;;;1967:16:7;1941:7;1967:16;;;:10;:16;;;;;;;1873:117::o;4539:1825:28:-;4900:27;2561:20:17;:18;:20::i;:::-;2970:18:8::1;:16;:18::i;:::-;4869:12:28::0;;3418:22:31::2;4869:12:28::0;3418:16:31::2;:22::i;:::-;5095:59:28::3;5123:8;5104:15;:27;;8414:3:2;5095:8:28;:59::i;:::-;5165:65;5201:6;:13;5216:6;:13;5165:35;:65::i;:::-;5360:42;5375:5;5382:6;5390:5;5397:4;5360:14;:42::i;:::-;5346:56;;5568:18;5605:9:::0;5600:670:::3;5624:6;:13;5620:1;:17;5600:670;;;5658:12;5673:6;5680:1;5673:9;;;;;;;;;;;;;;5658:24;;5696:12;5711:11;5723:1;5711:14;;;;;;;;;;;;;;5696:29;;5739:47;5757:6;5764:1;5757:9;;;;;;;;;;;;;;5748:5;:18;;8363:3:2;5739:8:28;:47::i;:::-;5813:1;5805:5;:9;5801:459;;;5918:12:::0;;5932:25:::3;::::0;::::3;::::0;5862:5;;5886:72:::3;::::0;5900:5;;5862;;5886:13:::3;:72::i;:::-;5981:13;5988:5;5981:6;:13::i;:::-;5977:98;;;6031:25;:10:::0;6046:9;6031:14:::3;:25::i;:::-;6018:38;;5977:98;5801:459;;;;6107:1;6099:5;:9;6095:165;;;6128:14;6154:5;6153:6;;6128:32;;6178:67;6189:5;6196:6;6204:5;:15;;;6221:5;:23;;;6178:10;:67::i;:::-;6095:165;;-1:-1:-1::0;;5639:3:28::3;;5600:670;;;;6326:31;6346:10;6326:19;:31::i;:::-;3450:1:31;2998::8::2;2602:19:17::0;:17;:19::i;:::-;4539:1825:28;;;;;;;;:::o;4067:105:31:-;4154:11;;;;;-1:-1:-1;;;;;4154:11:31;;4067:105::o;3804:86:30:-;3852:5;3876:7;:5;:7::i;:::-;3869:14;;3804:86;:::o;3857:984:26:-;4025:12;4051:15;4080:23;4117:20;3987:6;1732:29:25;1754:6;1732:21;:29::i;:::-;4162:15:26::1;4187:33:::0;4223:30:::1;4246:6;4223:22;:30::i;:::-;4187:66:::0;-1:-1:-1;4286:28:26::1;4268:14;:46;;;;;;;;;4264:391;;;4340:38;4364:6;4372:5;4340:23;:38::i;:::-;4330:48;;4264:391;;;4417:36;4399:14;:54;;;;;;;;;4395:260;;;4479:45;4510:6;4518:5;4479:30;:45::i;4395:260::-;4607:37;4630:6;4638:5;4607:22;:37::i;:::-;4597:47;;4395:260;4672:14;:7;:12;:14::i;:::-;4665:21;;4706:17;:7;:15;:17::i;:::-;4696:27;;4751:25;:7;:23;:25::i;:::-;4801:26;::::0;;;:18:::1;:26;::::0;;;;;;;-1:-1:-1;;;;;4801:33:26;;::::1;::::0;;;;;;;;;3857:984;;;;4733:43;4801:33;;;::::1;::::0;-1:-1:-1;;;;;3857:984:26:o;1741:562:24:-;2970:18:8;:16;:18::i;:::-;2190:106:24::1;2202:26;2230:6;2238;2254:9;2266:29;2287:7;2266:20;:29::i;1462:135:22:-:0;1568:22;1462:135;:::o;1564:1096:20:-;2561:20:17;:18;:20::i;:::-;2970:18:8::1;:16;:18::i;:::-;1839:23:20::2;;:::i;:::-;1878:9;1873:781;1897:3;:10;1893:1;:14;1873:781;;;2032:3;2036:1;2032:6;;;;;;;;;;;;;;2027:11;;2053:14;2070:2;:9;;;2053:26;;2093:29;2115:6;2093:21;:29::i;:::-;2152:8;::::0;::::2;::::0;2174:72:::2;2183:33;2202:6:::0;2152:8;2183:18:::2;:33::i;:::-;9194:3:2;2174:8:20;:72::i;:::-;2269:26;::::0;;;:18:::2;:26;::::0;;;;;;;-1:-1:-1;;;;;2269:33:20;;::::2;::::0;;;;;;;;2260:90:::2;::::0;2269:33:::2;2306:10;2269:47;8093:3:2;2260:8:20;:90::i;:::-;2390:7:::0;;2428:9:::2;::::0;::::2;::::0;2365:22:::2;::::0;2493:60:::2;2390:7:::0;2531:6;2539:5;2428:9;2493:31:::2;:60::i;:::-;2451:102;;;;2612:5;-1:-1:-1::0;;;;;2573:70:20::2;2600:10;-1:-1:-1::0;;;;;2573:70:20::2;2592:6;2573:70;2619:9;2630:12;2573:70;;;;;;;:::i;:::-;;;;;;;;1873:781;;;;;;1909:3;;;;;1873:781;;;;2998:1:8;2602:19:17::0;:17;:19::i;1752:115:7:-;1814:7;1840:20;:18;:20::i;3327:246:25:-;3459:7;3468:18;3434:6;1732:29;1754:6;1732:21;:29::i;:::-;3510:23:::1;3526:6;3510:15;:23::i;:::-;3535:30;3558:6;3535:22;:30::i;:::-;3502:64;;;;1771:1;3327:246:::0;;;;:::o;19634:5730:28:-;19821:15;20944:10;20966:4;20944:27;20940:4418;;21240:12;21266:4;-1:-1:-1;;;;;21258:18:28;21277:8;;21258:28;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21239:47;;;21502:7;21535:1;21530:2283;;;;23973:9;21530:2283;22006:4;22003:1;22000;21985:26;22059:1;22053:8;-1:-1:-1;;;;;;22049:81:28;-1:-1:-1;;;22281:77:28;;22275:2;;22414:16;22411:1;22408;22393:38;22470:16;22467:1;22460:27;22275:2;;23120;23117:1;23110:13;23484:4;23466:16;23462:27;23541:4;23535;23529;23514:32;23787:2;23781:4;23777:13;23774:1;23767:24;21370:2648;24048:22;24073:42;24088:5;24095:6;24103:5;24110:4;24073:14;:42::i;:::-;24048:67;;24540:2;24531:6;24525:13;24521:22;25002:66;24995:4;24987:6;24983:17;24976:93;25111:4;25103:6;25099:17;25330:2;25324:4;25320:13;25313:5;25306:28;3408:443:26;3559:22;3595:25;3634:23;3521:6;1732:29:25;1754:6;1732:21;:29::i;:::-;3682:28:26::1;3744:22;3759:6;3744:14;:22::i;:::-;3720:46:::0;;-1:-1:-1;3720:46:26;-1:-1:-1;3806:38:26::1;3720:46:::0;3806:36:::1;:38::i;:::-;3408:443:::0;;3776:68;;-1:-1:-1;3408:443:26;-1:-1:-1;;;;3408:443:26:o;4178:301:31:-;2561:20:17;:18;:20::i;:::-;2970:18:8::1;:16;:18::i;:::-;4345:6:31::2;3418:22;3435:4;3418:16;:22::i;:::-;-1:-1:-1::0;;;;;4363:25:31;;::::3;;::::0;;;:17:::3;:25;::::0;;;;;;;:34;;::::3;::::0;;;;;;;;;;;:45;;-1:-1:-1;;4363:45:31::3;::::0;::::3;;;::::0;;4423:49;4363:25;;:34;4423:49:::3;::::0;::::3;::::0;4363:45;;4423:49:::3;:::i;:::-;;;;;;;;2998:1:8::2;2602:19:17::0;:17;:19::i;4485:155:31:-;4576:4;4599:34;4619:4;4625:7;4599:19;:34::i;:::-;4592:41;;4485:155;;;;;:::o;1074:3172:2:-;-1:-1:-1;;;3588:3:2;3581:79;;;3799:66;3793:4;3786:80;3941:1;3935:4;3928:15;2999:73;2210:2;2243:18;;;2288;;;2215:4;2284:29;;;3040:1;3036:14;2195:18;;;;3025:26;;;;2336:18;;;;2383;;;2379:29;;;3057:2;3053:17;3021:50;;;;2999:73;2994:3;2990:83;4008:4;4001:26;4234:3;;4224:14;2634:271:17;2757:48;2061:1;2766:7;;:19;;6323:3:2;2757:8:17;:48::i;:::-;2061:1;2880:7;:18;2634:271::o;2300:181:1:-;2355:16;2374:20;2386:7;;-1:-1:-1;;;;;;2386:7:1;2374:11;:20::i;:::-;2355:39;;2404:70;2413:33;2425:8;2435:10;2413:11;:33::i;:::-;6379:3:2;2404:8:1;:70::i;3911:150:31:-;3985:32;;-1:-1:-1;;;;;3985:32:31;;;;;;;;4027:11;:27;;-1:-1:-1;;;;;4027:27:31;;;;;-1:-1:-1;;;;;;4027:27:31;;;;;;;;;3911:150::o;2911:208:17:-;2018:1;3090:7;:22;2911:208::o;4220:98:8:-;4272:39;4281:14;:12;:14::i;:::-;6423:3:2;4272:8:8;:39::i;:::-;4220:98::o;4445:381:25:-;4580:7;4650:14;;;4726:6;4705:14;4697:23;;;;;;;;4689:44;;4675:58;4784:6;4757:34;;;-1:-1:-1;;4757:34:25;4743:48;;-1:-1:-1;4445:381:25;;;;;;:::o;8950:1162:29:-;9095:17;9126:6;9146:7;9167;9188:15;9217:4;9400:14;9417:2;:9;;;9400:26;;9451:10;-1:-1:-1;;;;;9441:20:29;:6;-1:-1:-1;;;;;9441:20:29;;9437:575;;9779:22;9774:130;;9821:21;:19;:21::i;:::-;9885:4;9860:29;;9774:130;9918:83;9927:39;9947:6;9955:10;9927:19;:39::i;:::-;8156:3:2;9918:8:29;:83::i;:::-;10030:7;;10039:8;;;;10049:9;;;;10068:12;;;;;10030:7;;10039:8;;10049:9;10060:6;;-1:-1:-1;10068:12:29;;-1:-1:-1;10082:22:29;;-1:-1:-1;8950:1162:29;-1:-1:-1;;;8950:1162:29:o;5390:404::-;5660:74;5685:6;5693:25;5712:5;5693:18;:25::i;:::-;5720:6;5728:5;5660:24;:74::i;:::-;;5744:43;5755:5;5762:6;5770:9;5781:5;5744:10;:43::i;5098:286::-;5254:70;5279:9;5290:25;5309:5;5290:18;:25::i;:::-;5317:6;5254:24;:70::i;:::-;5334:43;5348:5;5355:6;5363;5371:5;5334:13;:43::i;1597:105:0:-;-1:-1:-1;;;;;1673:22:0;;;1597:105::o;367:166:11:-;425:7;456:5;;;471:37;480:6;;;;425:7;471:8;:37::i;5800:379:29:-;6058:54;6083:6;6091:5;6098:6;6106:5;6058:24;:54::i;:::-;;6122:50;6147:9;6158:5;6165:6;6122:24;:50::i;6185:329::-;6346:10;;6342:166;;6372:49;-1:-1:-1;;;;;6372:22:29;;6395:6;6403:9;6414:6;6372:22;:49::i;:::-;6471:6;-1:-1:-1;;;;;6440:57:29;6464:5;-1:-1:-1;;;;;6440:57:29;;6479:9;6490:6;6440:57;;;;;;;:::i;:::-;;;;;;;;6185:329;;;;:::o;5409:261:21:-;5477:58;5499:10;5486:9;:23;;8919:3:2;5477:8:21;:58::i;:::-;5563:9;:22;;;5599:10;;5595:69;;5625:28;:10;5646:6;5625:20;:28::i;8662:153:29:-;-1:-1:-1;;;;;8771:30:29;;;8745:7;8771:30;;;:21;:30;;;;;;;;:37;;;;;;;;;;;;;8662:153::o;3793:358:8:-;3849:6;3845:232;;;3871:81;3898:24;:22;:24::i;:::-;3880:15;:42;6481:3:2;3871:8:8;:81::i;:::-;3845:232;;;3983:83;4010:25;:23;:25::i;:::-;3992:15;:43;7911:3:2;3983:8:8;:83::i;:::-;4087:7;:16;;;;;-1:-1:-1;;4087:16:8;;;;;;;;4118:26;;;;;;;;;;;;;;;;3793:358;:::o;4544:237::-;4591:4;4737:25;:23;:25::i;:::-;4719:15;:43;:55;;;-1:-1:-1;;4767:7:8;;;;4766:8;;4544:237::o;4894:108::-;4976:19;4894:108;:::o;5008:110::-;5091:20;5008:110;:::o;5003:582:31:-;5066:10;-1:-1:-1;;;;;5066:18:31;;;5062:517;;5204:21;:19;:21::i;:::-;5439:37;5459:4;5465:10;5439:19;:37::i;:::-;5434:135;;5496:58;5515:4;8156:3:2;5496:18:31;:58::i;1874:139:0:-;1939:6;1964:13;1971:5;1964:6;:13::i;:::-;:42;;1990:16;2000:5;1990:9;:16::i;:::-;1964:42;;;1980:7;:5;:7::i;11685:1131:28:-;11799:24;11837:16;11867:17;11984:12;11999:31;12015:7;:14;;;11999:15;:31::i;:::-;11984:46;;12040:33;12076:38;12099:7;:14;;;12076:22;:38::i;:::-;12040:74;-1:-1:-1;12147:28:28;12129:14;:46;;;;;;;;;12125:500;;;12210:68;12242:7;12272:4;12210:31;:68::i;:::-;12191:87;;12125:500;;;12317:36;12299:14;:54;;;;;;;;;12295:330;;;12388:75;12427:7;12457:4;12388:38;:75::i;12295:330::-;12555:59;12586:7;12608:4;12555:30;:59::i;:::-;12536:78;;12295:330;12659:59;12671:7;:12;;;12685:7;:14;;;12701:16;12659:11;:59::i;:::-;12635:83;;;;;;;;12771:7;:16;;;-1:-1:-1;;;;;12733:76:28;12754:7;:15;;;-1:-1:-1;;;;;12733:76:28;12738:7;:14;;;12733:76;12789:8;12799:9;12733:76;;;;;;;:::i;:::-;;;;;;;;11685:1131;;;;;;;:::o;1883:1514:21:-;2039:11;2035:48;;2066:7;;2035:48;2097:13;2104:5;2097:6;:13::i;:::-;2093:1298;;;2126:67;2136:19;2135:20;8802:3:2;2126:8:21;:67::i;:::-;2580:66;2614:6;2589:21;:31;;8919:3:2;2580:8:21;:66::i;:::-;2660:7;:5;:7::i;:::-;-1:-1:-1;;;;;2660:15:21;;2684:6;2660:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2093:1298;;;2725:12;2740:16;2750:5;2740:9;:16::i;:::-;2725:31;;2775:19;2771:494;;;2934:23;2960:53;2985:6;2993:5;3000:6;3008:4;2960:24;:53::i;:::-;3225:25;;;;-1:-1:-1;2771:494:21;3283:10;;3279:102;;3313:53;-1:-1:-1;;;;;3313:22:21;;3336:6;3352:4;3359:6;3313:22;:53::i;:::-;2093:1298;1883:1514;;;;:::o;3767:1086::-;3929:11;3925:48;;3956:7;;3925:48;3987:13;3994:5;3987:6;:13::i;:::-;3983:864;;;4167:65;4177:17;4176:18;8802:3:2;4167:8:21;:65::i;:::-;4448:7;:5;:7::i;:::-;-1:-1:-1;;;;;4448:16:21;;4465:6;4448:24;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4552:27:21;;-1:-1:-1;;;;;;;;4552:19:21;;4572:6;4552:19;:27::i;:::-;3983:864;;;4610:12;4625:16;4635:5;4625:9;:16::i;:::-;4610:31;;4659:17;4655:182;;;4696:50;4721:9;4732:5;4739:6;4696:24;:50::i;:::-;4655:182;;;4785:37;-1:-1:-1;;;;;4785:18:21;;4804:9;4815:6;4785:18;:37::i;855:131:6:-;933:46;947:1;942;:6;5002:3:2;933:8:6;:46::i;1925:405:22:-;2002:7;2195:18;2216:26;:24;:26::i;:::-;-1:-1:-1;;;;;2216:52:22;;:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2195:75;;2287:36;2304:6;2312:10;2287:16;:36::i;605:214:19:-;753:58;;;-1:-1:-1;;;;;753:58:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;753:58:19;-1:-1:-1;;;753:58:19;;;717:95;;745:5;;717:19;:95::i;2336:182:22:-;2412:10;;2408:104;;2438:63;2465:26;:24;:26::i;:::-;-1:-1:-1;;;;;2438:18:22;;;2494:6;2438:18;:63::i;2359:185:25:-;2427:29;2449:6;2427:21;:29::i;:::-;2466:71;2489:23;2505:6;2489:15;:23::i;:::-;-1:-1:-1;;;;;2475:37:25;:10;-1:-1:-1;;;;;2475:37:25;;8031:3:2;2466:8:25;:71::i;5510:1061::-;5581:33;5781:14;5769:6;5758:18;;;5750:46;6278:43;6295:1;6287:9;;7978:3:2;6278:8:25;:43::i;3805:982:35:-;4091:59;4110:6;-1:-1:-1;;;;;4100:16:35;:6;-1:-1:-1;;;;;4100:16:35;;;9256:3:2;4091:8:35;:59::i;:::-;4161:49;4179:6;-1:-1:-1;;;;;4170:15:35;:6;-1:-1:-1;;;;;4170:15:35;;4943:3:2;4161:8:35;:49::i;:::-;4334:37;4374:27;;;:19;:27;;;;;4420:17;;4411:101;;-1:-1:-1;;;;;4420:17:35;:30;:64;;;;-1:-1:-1;4454:17:35;;;;-1:-1:-1;;;;;4454:17:35;:30;4420:64;9312:3:2;4411:8:35;:101::i;:::-;4585:26;;-1:-1:-1;;;;;4585:26:35;;;-1:-1:-1;;;;;;4585:26:35;;;;;;;4621:17;;;:26;;;;;;;;;;;-1:-1:-1;3805:982:35:o;2280:519:34:-;2383:43;2429:35;;;:27;:35;;;;;;2475:318;2499:6;:13;2495:1;:17;2475:318;;;2533:10;2546:34;2569:6;2576:1;2569:9;;;;;;;;;;;;;;2546:10;:14;;:34;;;;:::i;:::-;2533:47;;2594:48;2603:5;9256:3:2;2594:8:34;:48::i;:::-;-1:-1:-1;2514:3:34;;2475:318;;2330:589:33;2425:53;2481:29;;;:21;:29;;;;;;2521:392;2545:6;:13;2541:1;:17;2521:392;;;2797:10;2810:30;2827:6;2834:1;2827:9;;;;;;;;;;;;;;;;;;2810:12;;2838:1;2810:16;:30::i;:::-;2797:43;;2854:48;2863:5;9256:3:2;2854:8:33;:48::i;:::-;-1:-1:-1;2560:3:33;;2521:392;;5124:666:35;5272:16;5302;5332:41;5386:54;5417:6;5425;5433;5386:30;:54::i;:::-;5258:182;;;;;;5451:78;5460:17;:8;:15;:17::i;:::-;:38;;;;;5481:17;:8;:15;:17::i;:::-;9432:3:2;5451:8:35;:78::i;:::-;5547:27;;;;:19;:27;;;;;5540:34;;-1:-1:-1;;;;;;5540:34:35;;;;;;;;;;;;;;;;5753:30;;;;-1:-1:-1;;;;5124:666:35:o;3192:758:34:-;3297:43;3343:35;;;:27;:35;;;;;;3389:555;3413:6;:13;3409:1;:17;3389:555;;;3447:12;3462:6;3469:1;3462:9;;;;;;;;;;;;;;3447:24;;3485:93;3494:53;:29;:37;3524:6;3494:37;;;;;;;;;;;:44;3532:5;-1:-1:-1;;;;;3494:44:34;-1:-1:-1;;;;;3494:44:34;;;;;;;;;;;;;:51;:53::i;3485:93::-;3766:37;;;;:29;:37;;;;;;;;-1:-1:-1;;;;;3766:44:34;;;;;;;;;3759:51;;;3840:33;:10;3804:5;3840:17;:33::i;:::-;3825:48;;3887:46;3896:7;9194:3:2;3887:8:34;:46::i;:::-;-1:-1:-1;;3428:3:34;;3389:555;;3292:643:33;3389:53;3445:29;;;:21;:29;;;;;;3485:444;3509:6;:13;3505:1;:17;3485:444;;;3543:12;3558:6;3565:1;3558:9;;;;;;;;;;;;;;3543:24;;3581:22;3606:43;3629:12;3643:5;3606:22;:43::i;:::-;3581:68;;3663:63;3672:23;:14;:21;:23::i;3663:63::-;3892:26;:12;3912:5;3892:19;:26::i;:::-;;3485:444;;3524:3;;;;;3485:444;;3614:267:24;3722:31;;:::i;:::-;-1:-1:-1;3858:7:24;3834:41::o;3975:2358::-;2561:20:17;:18;:20::i;:::-;4202:6:24::1;1732:29:25;1754:6;1732:21;:29::i;:::-;4226:6:24::2;3418:22:31;3435:4;3418:16;:22::i;:::-;4533:79:24::3;4569:6;:13;;;:20;4591:6;:13;;;:20;4533:35;:79::i;:::-;4777:22;4802:33;4821:6;:13;;;4802:18;:33::i;:::-;4777:58;;4845:25;4873:45;4903:6;4911;4873:29;:45::i;:::-;4845:73;;5115:30;5159:31:::0;5204:43:::3;5260:73;5283:4;5289:6;5297;5305:9;5316:6;5324:8;5260:22;:73::i;:::-;5101:232;;;;;;5406:33;5442:30;5465:6;5442:22;:30::i;:::-;5406:66:::0;-1:-1:-1;5504:28:24::3;5486:14;:46;;;;;;;;;5482:443;;;5548:94;5577:6;5585;5592:1;5585:9;;;;;;;;;;;;;;5596:13;5610:1;5596:16;;;;;;;;;;;;;;5614:6;5621:1;5614:9;;;;;;;;;;;;;;5625:13;5639:1;5625:16;;;;;;;;;;;;;;5548:28;:94::i;:::-;5482:443;;;5681:36;5663:14;:54;;;;;;;;;5659:266;;;5733:62;5765:6;5773;5781:13;5733:31;:62::i;5659:266::-;5868:46;5892:6;5900:13;5868:23;:46::i;:::-;5935:13;::::0;5951:4:::3;:34;;;;;;;;;5935:50;;6097:6;-1:-1:-1::0;;;;;6045:281:24::3;6077:6;6045:281;6117:6;6231:45;6251:14;6267:8;6231:19;:45::i;:::-;6290:26;6045:281;;;;;;;;:::i;:::-;;;;;;;;3450:1:31;;;;;;;1771::25::2;2591::17::1;2602:19:::0;:17;:19::i;8232:3150:28:-;8409:27;8475:6;:13;-1:-1:-1;;;;;8462:27:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8462:27:28;;8448:41;;8667:34;;:::i;:::-;8711:47;;:::i;:::-;8868:30;8908:32;8956:9;8951:2425;8975:5;:12;8971:1;:16;8951:2425;;;9024:5;9030:1;9024:8;;;;;;;;;;;;;;9008:24;;9047:17;9096:6;:13;9067;:26;;;:42;:105;;;;;9159:6;:13;9129;:27;;;:43;9067:105;9047:125;;9186:44;9195:12;4838:3:2;9186:8:28;:44::i;:::-;9245:14;9262:54;9281:6;9288:13;:26;;;9281:34;;;;;;;;;;;;;;9262:18;:54::i;:::-;9245:71;;9330:15;9348:55;9367:6;9374:13;:27;;;9367:35;;;;;;;9348:55;9330:73;;9417:60;9437:8;-1:-1:-1;;;;;9426:19:28;:7;-1:-1:-1;;;;;9426:19:28;;;8474:3:2;9417:8:28;:60::i;:::-;9545:20;;;;9541:720;;9939:52;9952:1;9948;:5;8540:3:2;9939:8:28;:52::i;:::-;10009:23;10062:36;10074:4;10080:7;10089:8;10062:11;:36::i;:::-;-1:-1:-1;;;;;10035:63:28;:23;-1:-1:-1;;;;;10035:63:28;;10009:89;;10116:65;10125:18;8606:3:2;10116:8:28;:65::i;:::-;-1:-1:-1;10199:20:28;;;:47;;;9541:720;10392:20;;10371:18;;;:41;:11;10445:4;10426:23;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;10463:29:28;;;:19;;;:29;10506:31;;;:20;;;;:31;;;;10572:20;;;;;10551:18;;;:41;10629:22;;;;10606:20;;;:45;10684:12;;10665:31;;:16;;;:31;10727:15;;;10710:32;:14;;;:32;-1:-1:-1;;10931:26:28;10463:11;10931:13;:26::i;:::-;10881:76;;-1:-1:-1;10881:76:28;-1:-1:-1;10881:76:28;-1:-1:-1;10998:41:28;11015:4;11021:7;11030:8;10998:16;:41::i;:::-;10972:67;;11148:64;11192:19;:8;:17;:19::i;:::-;11148:11;11160:13;:26;;;11148:39;;;;;;;;;;;;;;:43;;:64;;;;:::i;:::-;11106:11;11118:13;:26;;;11106:39;;;;;;;;;;;;;:106;;;;;11269:96;11331:20;:9;:18;:20::i;:::-;11269:11;11281:13;:27;;;11269:40;;;;;;;;;;;;;;:44;;:96;;;;:::i;:::-;11226:11;11238:13;:27;;;11226:40;;;;;;;;;;;;;:139;;;;;8951:2425;;;;;8989:3;;;;;8951:2425;;;;8232:3150;;;;;;;;;;:::o;2091:137:25:-;2171:25;;;;:17;:25;;;;;;2162:59;;2171:25;;7978:3:2;2162:8:25;:59::i;12286:636:35:-;12372:7;12610:13;12625:16;12643:13;12658:16;12678:32;12703:6;12678:24;:32::i;:::-;12607:103;;;;;;;;;12734:6;-1:-1:-1;;;;;12725:15:35;:5;-1:-1:-1;;;;;12725:15:35;;12721:195;;;12763:8;12756:15;;;;;;;;12721:195;12801:6;-1:-1:-1;;;;;12792:15:35;:5;-1:-1:-1;;;;;12792:15:35;;12788:128;;;12830:8;-1:-1:-1;12823:15:35;;-1:-1:-1;;;12823:15:35;12788:128;12869:36;9194:3:2;12869:7:35;:36::i;:::-;12286:636;;;;;;;;:::o;8346:898:34:-;8439:7;8476:37;;;:29;:37;;;;;;;;-1:-1:-1;;;;;8476:44:34;;;;;;;;;;8439:7;8830:19;8476:44;8830:17;:19::i;:::-;:83;;;-1:-1:-1;8853:35:34;;;;:27;:35;;;;;:60;;8906:5;8853:44;:60::i;:::-;8807:106;;8929:15;8924:289;;9123:29;9145:6;9123:21;:29::i;:::-;9166:36;9194:3:2;9166:7:34;:36::i;:::-;-1:-1:-1;9230:7:34;8346:898;-1:-1:-1;;;8346:898:34:o;8359:256:33:-;8444:7;8519:29;;;:21;:29;;;;;8565:43;8519:29;8602:5;8565:22;:43::i;3700:147:32:-;-1:-1:-1;;;;;3817:23:32;;3700:147::o;3959:157::-;4098:3;4087:14;-1:-1:-1;;;;;4079:30:32;;3959:157::o;4205:164::-;4351:3;4340:14;;4205:164::o;7130:581:20:-;7210:4;7226:33;7262:30;7285:6;7262:22;:30::i;:::-;7226:66;-1:-1:-1;7324:28:20;7306:14;:46;;;;;;;;;7302:403;;;7375:45;7406:6;7414:5;7375:30;:45::i;:::-;7368:52;;;;;7302:403;7459:36;7441:14;:54;;;;;;;;;7437:268;;;7518:52;7556:6;7564:5;7518:37;:52::i;7437:268::-;7650:44;7680:6;7688:5;7650:29;:44::i;3038:679::-;3204:6;3212;3230:33;3266:30;3289:6;3266:22;:30::i;:::-;3230:66;-1:-1:-1;3319:26:20;3311:4;:34;;;;;;;;;3307:404;;;3368:59;3389:6;3397:14;3413:5;3420:6;3368:20;:59::i;:::-;3361:66;;;;;;;3307:404;3456:25;3448:4;:33;;;;;;;;;3444:267;;;3504:58;3524:6;3532:14;3548:5;3555:6;3504:19;:58::i;3444:267::-;3640:60;3662:6;3670:14;3686:5;3693:6;3640:21;:60::i;3038:679::-;;;;;;;;:::o;2386:188:13:-;2447:7;2494:10;2506:12;2520:15;2537:13;:11;:13::i;:::-;2560:4;2483:83;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2483:83:13;;;;;;;;;;;;;;;;;;;;;;;;2473:94;;;;;;2466:101;;2386:188;:::o;5009:314:25:-;5308:6;5288:27;;5009:314::o;4951:564:26:-;5014:22;5038:25;5075:33;5111:30;5134:6;5111:22;:30::i;:::-;5075:66;-1:-1:-1;5173:28:26;5155:14;:46;;;;;;;;;5151:358;;;5224:30;5247:6;5224:22;:30::i;:::-;5217:37;;;;;;;5151:358;5293:36;5275:14;:54;;;;;;;;;5271:238;;;5352:37;5382:6;5352:29;:37::i;5271:238::-;5469:29;5491:6;5469:21;:29::i;4951:564::-;;;;:::o;4919:539:32:-;5040:24;5078;5170:8;:15;-1:-1:-1;;;;;5156:30:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5156:30:32;;5146:40;;5215:1;5196:20;;5232:9;5227:225;5251:7;:14;5247:1;:18;5227:225;;;5286:15;5304:8;5313:1;5304:11;;;;;;;;;;;;;;5286:29;;5342:14;5348:7;5342:5;:14::i;:::-;5329:7;5337:1;5329:10;;;;;;;;;;;;;:27;;;;;5389:52;5398:16;5416:24;5432:7;5416:15;:24::i;:::-;5389:8;:52::i;:::-;5370:71;-1:-1:-1;;5267:3:32;;5227:225;;5691:145:31;-1:-1:-1;;;;;5797:23:31;;;5774:4;5797:23;;;:17;:23;;;;;;;;:32;;;;;;;;;;;;;;;5691:145::o;5842:226::-;6008:11;;:53;;-1:-1:-1;;;6008:53:31;;5927:4;;6008:11;;;-1:-1:-1;;;;;6008:11:31;;:22;;:53;;6031:8;;6041:4;;6055;;6008:53;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;7222:684:29:-;7387:16;7415:22;7440:35;7460:7;7469:5;7440:19;:35::i;:::-;7415:60;;7485:90;7494:12;:42;;;;7529:6;7511:14;:24;;7494:42;8736:3:2;7485:8:29;:90::i;:::-;7597:32;7606:14;7622:6;7597:8;:32::i;:::-;7586:43;-1:-1:-1;7793:25:29;;;7828:71;7848:7;7857:5;7793:25;7878:19;7586:43;7878:17;:19::i;:::-;7876:22;;7828:19;:71::i;:::-;7222:684;;;;;;;;:::o;6612:339::-;6751:22;6776:35;6796:7;6805:5;6776:19;:35::i;:::-;6751:60;-1:-1:-1;6821:18:29;6842:26;6751:60;6861:6;6842:18;:26::i;:::-;6821:47;;6878:66;6898:7;6907:5;6914:10;6926:17;:6;:15;:17::i;:::-;6878:19;:66::i;825:250:19:-;999:68;;;-1:-1:-1;;;;;999:68:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;999:68:19;-1:-1:-1;;;999:68:19;;;963:105;;991:5;;963:19;:105::i;2109:369:12:-;2190:78;2224:6;2199:21;:31;;7534:3:2;2190:8:12;:78::i;:::-;2375:35;;2357:12;;-1:-1:-1;;;;;2375:14:12;;;2398:6;;2357:12;2375:35;2357:12;2375:35;2398:6;2375:14;:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2356:54;;;2420:51;2429:7;7597:3:2;2420:8:12;:51::i;2115:190:7:-;-1:-1:-1;;;;;2215:16:7;;2195:17;2215:16;;;:10;:16;;;;;:18;;;;;;;;2243:55;2252:34;2226:4;2215:18;2252:17;:34::i;:::-;2288:9;2243:8;:55::i;12822:1849:28:-;12968:24;13223:21;13258;13293:41;13347:81;13378:7;:14;;;13394:7;:15;;;13411:7;:16;;;13347:30;:81::i;:::-;13209:219;;;;;;13539:22;13571:23;13701:7;:16;;;-1:-1:-1;;;;;13683:34:28;:7;:15;;;-1:-1:-1;;;;;13683:34:28;;13679:312;;;-1:-1:-1;13783:13:28;;-1:-1:-1;13828:13:28;13679:312;;;-1:-1:-1;13967:13:28;;-1:-1:-1;13923:13:28;13679:312;14166:140;14214:7;14235:4;14253:14;14281:15;14166:34;:140::i;:::-;14450:16;;;;14432:15;;;;14112:194;;-1:-1:-1;14112:194:28;;-1:-1:-1;14112:194:28;;-1:-1:-1;;;;;;14432:34:28;;;;;;:211;;14580:63;14611:15;14628:14;14580:30;:63::i;:::-;14432:211;;;14481:63;14512:14;14528:15;14481:30;:63::i;:::-;14406:237;;;-1:-1:-1;12822:1849:28;;;-1:-1:-1;;;;;12822:1849:28:o;14677:887::-;14836:24;14872:22;14897:63;14928:7;:14;;;14944:7;:15;;;14897:30;:63::i;:::-;14872:88;;14970:23;14996:64;15027:7;:14;;;15043:7;:16;;;14996:30;:64::i;:::-;14970:90;;15236:140;15284:7;15305:4;15323:14;15351:15;15236:34;:140::i;:::-;15417:14;;;;;15387:45;;;;:29;:45;;;;;;;;15433:15;;;;-1:-1:-1;;;;;15387:62:28;;;;;;;;;;;:79;;;;15506:14;;15476:45;;;;;;;;15522:16;;;;15476:63;;;;;;;;;;;;;:81;;;;-1:-1:-1;15182:194:28;;14677:887;-1:-1:-1;;;14677:887:28:o;16781:2740::-;17220:14;;;;16918:24;17198:37;;;:21;:37;;;;;;;17294:15;;;;16918:24;;;;;;17263:47;;17198:37;;17263:30;:47::i;:::-;17245:65;;17320:16;17339:48;17370:7;:16;;;17339:12;:30;;:48;;;;:::i;:::-;17320:67;-1:-1:-1;17402:12:28;;;:29;;-1:-1:-1;17418:13:28;;17402:29;17398:311;;;17611:37;17633:7;:14;;;17611:21;:37::i;:::-;17662:36;9194:3:2;17662:7:28;:36::i;:::-;-1:-1:-1;;17868:12:28;;;;17890:13;17914:19;17936:21;:12;:19;:21::i;:::-;17914:43;;17967:32;18016:11;-1:-1:-1;;;;;18002:26:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;18002:26:28;-1:-1:-1;18065:1:28;18039:23;;;:27;;;17967:61;;-1:-1:-1;18076:663:28;18100:11;18096:1;:15;18076:663;;;18354:15;18372:33;:12;18403:1;18372:30;:33::i;:::-;18354:51;;18441:15;:7;:13;:15::i;:::-;18420;18436:1;18420:18;;;;;;;;;;;;;:36;;;;;18496:60;18505:7;:23;;;18530:25;:7;:23;:25::i;18496:60::-;18470:23;;;:86;18575:12;;;18571:158;;;18624:7;18607:24;;18571:158;;;18661:8;18656:1;:13;18652:77;;;18707:7;18689:25;;18652:77;-1:-1:-1;18113:3:28;;18076:663;;;-1:-1:-1;18888:56:28;;-1:-1:-1;;;18888:56:28;;-1:-1:-1;;;;;18888:11:28;;;;;:56;;18900:7;;18909:15;;18926:7;;18935:8;;18888:56;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;18869:75;;18955:16;18973:17;18994:59;19006:7;:12;;;19020:7;:14;;;19036:16;18994:11;:59::i;:::-;18954:99;;-1:-1:-1;18954:99:28;-1:-1:-1;19080:37:28;:14;18954:99;19080:27;:37::i;:::-;19063:54;-1:-1:-1;19145:39:28;:15;19174:9;19145:28;:39::i;:::-;19127:57;-1:-1:-1;19396:53:28;:12;19425:7;19434:14;19396:28;:53::i;:::-;19459:55;:12;19488:8;19498:15;19459:28;:55::i;:::-;16781:2740;;;;;;;;;;;;;:::o;7504:419::-;7639:16;;;7690:4;:25;;;;;;;;;7686:231;;;-1:-1:-1;7756:11:28;;-1:-1:-1;7769:16:28;7686:231;;;-1:-1:-1;7876:16:28;;-1:-1:-1;7894:11:28;7686:231;7504:419;;;;;;:::o;1862:617:9:-;1922:7;1959:5;;;1974:57;1983:6;;;:26;;;2008:1;2003;1993:7;:11;;;;;;:16;1983:26;4467:1:2;1974:8:9;:57::i;:::-;2046:12;2042:431;;2081:1;2074:8;;;;;2042:431;893:4;-1:-1:-1;;2439:11:9;;2438:19;2461:1;2437:25;2430:32;;;;;1415:799:19;1658:12;1672:23;1699:5;-1:-1:-1;;;;;1699:10:19;1710:4;1699:16;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1699:16:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1657:58;;;;1853:1;1844:7;1841:14;1838:2;;;1895:16;1892:1;1889;1874:38;1939:16;1936:1;1929:27;1838:2;2110:97;2119:10;:17;2140:1;2119:22;:56;;;;2156:10;2145:30;;;;;;;;;;;;;;;-1:-1:-1;2145:30:19;2119:56;7468:3:2;2110:8:19;:97::i;1803:410:15:-;1873:4;1894:20;1903:3;1908:5;1894:8;:20::i;:::-;1889:318;;-1:-1:-1;1930:23:15;;;;;;;;-1:-1:-1;1930:23:15;;;;;;;;;;;;-1:-1:-1;;;;;;1930:23:15;-1:-1:-1;;;;;1930:23:15;;;;;;;;2110:18;;2088:19;;;:12;;;:19;;;;;;:40;;;;2142:11;;1889:318;-1:-1:-1;2191:5:15;2184:12;;2481:859:14;-1:-1:-1;;;;;2734:17:14;;2601:4;2734:17;;;:12;;;:17;;;;;;2811:13;2807:527;;-1:-1:-1;;2865:11:14;;2921:53;;;;;;;;-1:-1:-1;;;;;2921:53:14;;;;;;;;;;;;;-1:-1:-1;2890:28:14;;;:12;;;;:28;;;;;:84;;;;-1:-1:-1;;;;;;2890:84:14;;;;;;;;;;;;;;;;;;3002:18;;;2988:32;;;3162:17;;;:12;;;:17;;;;;;:38;;;;3214:11;;2807:527;-1:-1:-1;;3269:12:14;3256:26;;;;:12;;;;:26;;;;;:33;:41;;;:26;-1:-1:-1;3311:12:14;;13539:1758:35;13715:16;13745;13775:41;13842:13;13857;13874:30;13889:6;13897;13874:14;:30::i;:::-;13841:63;;;;13914:16;13933:36;13954:6;13962;13933:20;:36::i;:::-;13995:27;;;;:19;:27;;;;;;;;:46;;;:36;;:46;;;;;14236:23;;14293:26;;;;13995:46;;-1:-1:-1;13914:55:35;;-1:-1:-1;14293:26:35;14639:22;14236:23;14639:20;:22::i;:::-;:63;;;;14677:25;:13;:23;:25::i;:::-;14639:177;;;;14719:46;14750:6;14758;14719:30;:46::i;:::-;:96;;;;;14769:46;14800:6;14808;14769:30;:46::i;:::-;14615:201;;14832:16;14827:291;;15028:29;15050:6;15028:21;:29::i;:::-;15071:36;9194:3:2;15071:7:35;:36::i;:::-;15139:65;15178:10;15190:13;15139:38;:65::i;:::-;15128:76;;15225:65;15264:10;15276:13;15225:38;:65::i;:::-;15214:76;;13539:1758;;;;;;;;;;;;;:::o;5615:265:32:-;-1:-1:-1;;;;;5844:23:32;5843:30;;5615:265::o;2381:1531:15:-;-1:-1:-1;;;;;2591:19:15;;2454:4;2591:19;;;:12;;;:19;;;;;;2625:15;;2621:1285;;3066:18;;-1:-1:-1;;3018:14:15;;;;3066:22;;;;2994:21;;3066:3;;:22;;3348;;;;;;;;;;;;;;;;3462:26;;-1:-1:-1;;;;;3348:22:15;;;;-1:-1:-1;3348:22:15;;3462:3;;3474:13;;3462:26;;;;;;;;;;;;;;;;;;:38;;-1:-1:-1;;;;;;3462:38:15;-1:-1:-1;;;;;3462:38:15;;;;;;3566:23;;;;;-1:-1:-1;3566:12:15;;;:23;;;;;;3592:17;;;3566:43;;3715:17;;3566:12;;3715:17;;;;;;;;;;;;;;;-1:-1:-1;;3715:17:15;;;;;-1:-1:-1;;;;;;3715:17:15;;;;;;;;;-1:-1:-1;;;;;3807:19:15;;;;3715:17;3807:12;;;:19;;;;;;3800:26;;;;3715:17;-1:-1:-1;3841:11:15;;-1:-1:-1;;;;3841:11:15;2621:1285;3890:5;3883:12;;;;;8771:236:33;8918:7;8948:52;:12;8965:5;9194:3:2;8948:16:33;:52::i;4074:1613:14:-;-1:-1:-1;;;;;4285:17:14;;4152:4;4285:17;;;:12;;;:17;;;;;;4361:13;;4357:1324;;4769:11;;-1:-1:-1;;4769:15:14;;;4699:21;5068:23;;;4734:1;5068:12;;;:23;;;;;;;;4723:12;;;5183:27;;;;;:39;;;;-1:-1:-1;;;;;;5183:39:14;;;-1:-1:-1;;;;;5183:39:14;;;;;;;;;;;;;;;;;;5301:14;;;;5288:28;;:12;;;:28;;;;;;:48;;;;5442:30;;;;;;;;;5486:23;;;5584:17;;;;;;;;;;;5577:24;4734:1;-1:-1:-1;5616:11:14;;2110:303:0;2185:15;2212:22;2250:6;:13;-1:-1:-1;;;;;2237:27:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2237:27:0;;2212:52;;2279:9;2274:110;2298:6;:13;2294:1;:17;2274:110;;;2344:29;2363:6;2370:1;2363:9;;;;;;;2344:29;2332:6;2339:1;2332:9;;;;;;;;-1:-1:-1;;;;;2332:41:0;;;:9;;;;;;;;;;;:41;2313:3;;2274:110;;11958:590:24;12091:16;12124:28;12154:25;12183:22;12198:6;12183:14;:22::i;:::-;12123:82;;;;12215:79;12251:12;:19;12272:14;:21;12215:35;:79::i;:::-;12304:56;12335:1;12313:12;:19;:23;9544:3:2;12304:8:24;:56::i;:::-;12376:9;12371:145;12395:12;:19;12391:1;:23;12371:145;;;12435:70;12463:14;12478:1;12463:17;;;;;;;;;;;;;;-1:-1:-1;;;;;12444:36:24;:12;12457:1;12444:15;;;;;;;;;;;;;;-1:-1:-1;;;;;12444:36:24;;9136:3:2;12435:8:24;:70::i;:::-;12416:3;;12371:145;;;-1:-1:-1;12533:8:24;11958:590;-1:-1:-1;;;;11958:590:24:o;6560:1752::-;6839:30;6883:31;6928:38;6992:30;7024:23;7051:35;:8;:33;:35::i;:::-;6991:95;;;;7097:14;7124:23;7140:6;7124:15;:23::i;:::-;7097:51;-1:-1:-1;7208:26:24;7200:4;:34;;;;;;;;;:564;;7514:4;-1:-1:-1;;;;;7514:15:24;;7547:6;7571;7595:9;7622:13;7653:15;7686:31;:29;:31::i;:::-;7735:6;:15;;;7514:250;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;7514:250:24;;;;;;;;;;;;:::i;:::-;7200:564;;;7249:4;-1:-1:-1;;;;;7249:15:24;;7282:6;7306;7330:9;7357:13;7388:15;7421:31;:29;:31::i;:::-;7470:6;:15;;;7249:250;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;7249:250:24;;;;;;;;;;;;:::i;:::-;7158:606;;;;;;;;7775:105;7811:8;:15;7828:14;:21;7851;:28;7775:35;:105::i;:::-;8066:26;8058:4;:34;;;;;;;;;:247;;8212:93;8238:9;8249:6;8257:8;8267:14;8283:21;8212:25;:93::i;:::-;8058:247;;;8107:90;8133:6;8141;8149:8;8159:14;8175:21;8107:25;:90::i;:::-;8042:263;;6560:1752;;;;;;;;;;;;;:::o;6003:433:35:-;6188:16;6207:36;6228:6;6236;6207:20;:36::i;:::-;6253:41;6297:27;;;:19;:27;;;;;;;;:46;;;:36;;:46;;;;;6188:55;;-1:-1:-1;6379:50:35;6410:8;6420;6379:30;:50::i;:::-;6353:76;;-1:-1:-1;;;;;;6003:433:35:o;4153:294:34:-;4315:9;4310:131;4334:6;:13;4330:1;:17;4310:131;;;4419:8;4428:1;4419:11;;;;;;;;;;;;;;4368:29;:37;4398:6;4368:37;;;;;;;;;;;:48;4406:6;4413:1;4406:9;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4368:48:34;;;;;;;;;;;-1:-1:-1;4368:48:34;:62;4349:3;;4310:131;;4128:471:33;4223:53;4279:29;;;:21;:29;;;;;;4319:274;4343:8;:15;4339:1;:19;4319:274;;;4538:44;4567:1;4570:8;4579:1;4570:11;;;;;;;;;;;;;;4538:12;:28;;:44;;;;;:::i;:::-;4360:3;;4319:274;;12760:353:24;12875:28;12947:6;:13;-1:-1:-1;;;;;12934:27:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12934:27:24;;12919:42;;12976:9;12971:136;12995:6;:13;12991:1;:17;12971:136;;;13047:8;:49;;13086:6;13093:1;13086:9;;;;;;;;;;;;;;13078:18;;13047:49;;;13065:6;13072:1;13065:9;;;;;;;;;;;;;;13047:49;13029:12;13042:1;13029:15;;;;;;;;;;;;;;;;;:67;13010:3;;12971:136;;6776:199:28;6897:6;;6922:4;:25;;;;;;;;;:46;;6960:8;6922:46;;;-1:-1:-1;6950:7:28;;6915:53;-1:-1:-1;;6776:199:28:o;7157:204::-;7283:6;;7308:4;:25;;;;;;;;;:46;;7347:7;7308:46;;1002:175:18;1058:6;1076:64;-1:-1:-1;;;1085:5:18;:14;7666:3:2;1076:8:18;:64::i;635:194:11:-;691:6;720:5;;;735:69;745:6;;;;;;:16;;;760:1;755;:6;;745:16;744:38;;;;771:1;767;:5;:14;;;;;780:1;776;:5;767:14;4322:1:2;735:8:11;:69::i;1219:194::-;1275:6;1304:5;;;1319:69;1329:6;;;;;;:16;;;1344:1;1339;:6;;1329:16;1328:38;;;;1355:1;1351;:5;:14;;;;;1364:1;1360;:5;1351:14;4370:1:2;1319:8:11;:69::i;10934:843:35:-;11043:41;11263:27;;;:19;:27;;;;;11309:17;;;11345;;;-1:-1:-1;;;;;11309:17:35;;;;11043:41;;11345:17;;;;11043:41;;;11392:36;11309:17;11345;11392:20;:36::i;:::-;11453:29;;;;:19;;;:29;;;;;11514:23;;11571:26;;;;11453:29;;-1:-1:-1;11373:55:35;;-1:-1:-1;11619:65:35;11514:23;11571:26;11619:38;:65::i;:::-;11608:76;;11705:65;11744:10;11756:13;11705:38;:65::i;:::-;11694:76;;10934:843;;;;;;;;;;;:::o;6041:105:32:-;6100:4;6124:15;6131:7;6124:6;:15::i;:::-;6123:16;;6041:105;-1:-1:-1;;6041:105:32:o;3993:134:15:-;-1:-1:-1;;;;;4096:19:15;4073:4;4096:19;;;:12;;;;;:19;;;;;;:24;;;3993:134::o;15499:342:35:-;15592:4;15648:27;;;:19;:27;;;;;15764:17;;-1:-1:-1;;;;;15755:26:35;;;15764:17;;15755:26;;:56;;-1:-1:-1;15794:17:35;;;;-1:-1:-1;;;;;15785:26:35;;;15794:17;;15785:26;15755:56;15754:80;;;;-1:-1:-1;;;;;;;;15816:18:35;;;;15499:342;-1:-1:-1;15499:342:35:o;9462:256:34:-;9562:4;9624:35;;;:27;:35;;;;;9676;9624;9704:5;9676:19;:35::i;9205:245:33:-;9297:4;9369:29;;;:21;:29;;;;;9415:28;9369:29;9437:5;9415:21;:28::i;3967:952:20:-;4133:16;;4204:28;4186:14;:46;;;;;;;;;4182:394;;;4248:49;4275:6;4283:5;4290:6;4248:26;:49::i;:::-;4182:394;;;4336:36;4318:14;:54;;;;;;;;;4314:262;;;4388:56;4422:6;4430:5;4437:6;4388:33;:56::i;4314:262::-;4517:48;4543:6;4551:5;4558:6;4517:25;:48::i;:::-;4590:10;;4586:79;;4616:38;-1:-1:-1;;;;;4616:18:20;;4635:10;4647:6;4616:18;:38::i;:::-;-1:-1:-1;;4865:7:20;;;;;4866:6;;-1:-1:-1;3967:952:20;-1:-1:-1;;3967:952:20:o;5171:970::-;5336:16;;5407:28;5389:14;:46;;;;;;;;;5385:394;;;5451:49;5478:6;5486:5;5493:6;5451:26;:49::i;:::-;5385:394;;;5539:36;5521:14;:54;;;;;;;;;5517:262;;;5591:56;5625:6;5633:5;5640:6;5591:33;:56::i;5517:262::-;5720:48;5746:6;5754:5;5761:6;5720:25;:48::i;:::-;5793:10;;5789:98;;5819:57;-1:-1:-1;;;;;5819:22:20;;5842:10;5862:4;5869:6;5819:22;:57::i;:::-;-1:-1:-1;6087:6:20;;6126:7;;;;;-1:-1:-1;5171:970:20;-1:-1:-1;;;5171:970:20:o;6347:697::-;6514:16;;6585:28;6567:14;:46;;;;;;;;;6563:451;;;6644:53;6675:6;6683:5;6690:6;6644:30;:53::i;:::-;6629:68;;6563:451;;;6736:36;6718:14;:54;;;;;;;;;6714:300;;;6803:60;6841:6;6849:5;6856:6;6803:37;:60::i;6714:300::-;6951:52;6981:6;6989:5;6996:6;6951:29;:52::i;:::-;6936:67;;6714:300;7036:1;7024:13;;6347:697;;;;;;;:::o;3388:427:13:-;3790:9;;3765:44::o;9748:864:35:-;9843:22;9867:25;9911:13;9926:16;9944:13;9959:16;9979:32;10004:6;9979:24;:32::i;:::-;9908:103;;-1:-1:-1;9908:103:35;;-1:-1:-1;9908:103:35;-1:-1:-1;9908:103:35;-1:-1:-1;;;;;;;10167:19:35;;;;:42;;-1:-1:-1;;;;;;10190:19:35;;;10167:42;10163:115;;;-1:-1:-1;;10233:15:35;;;10246:1;10233:15;;;;;;10250:16;;;;;;;;;10233:15;-1:-1:-1;10233:15:35;-1:-1:-1;10225:42:35;;-1:-1:-1;;10225:42:35;10163:115;10432:15;;;10445:1;10432:15;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10432:15:35;10423:24;;10469:6;10457;10464:1;10457:9;;;;;;;;;;;;;:18;-1:-1:-1;;;;;10457:18:35;;;-1:-1:-1;;;;;10457:18:35;;;;;10497:6;10485;10492:1;10485:9;;;;;;;;-1:-1:-1;;;;;10485:18:35;;;;:9;;;;;;;;;;:18;10525:16;;;10539:1;10525:16;;;;;;;;;;10539:1;;10525:16;;;;;;;;;;-1:-1:-1;10525:16:35;10514:27;;10565:8;10551;10560:1;10551:11;;;;;;;;;;;;;:22;;;;;10597:8;10583;10592:1;10583:11;;;;;;;;;;;;;:22;;;;;9748:864;;;;;;;:::o;7319:799:34:-;7486:43;7532:35;;;:27;:35;;;;;7421:22;;;;7599:19;7532:35;7599:17;:19::i;:::-;-1:-1:-1;;;;;7586:33:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7586:33:34;;7577:42;;7654:6;:13;-1:-1:-1;;;;;7640:28:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7640:28:34;;7629:39;;7684:9;7679:433;7703:6;:13;7699:1;:17;7679:433;;;7949:12;7971:26;:10;7995:1;7971:23;:26::i;:::-;7949:49;;8024:5;8012:6;8019:1;8012:9;;;;;;;;-1:-1:-1;;;;;8012:17:34;;;:9;;;;;;;;;;:17;;;;8057:37;;;;:29;:37;;;;;;:44;;;;;;;;;;;8043:11;;:8;;8052:1;;8043:11;;;;;;;;;;;;;;;:58;-1:-1:-1;7718:3:34;;7679:433;;;;7319:799;;;;:::o;7385:700:33:-;7544:53;7600:29;;;:21;:29;;;;;7479:22;;;;7661:21;7600:29;7661:19;:21::i;:::-;-1:-1:-1;;;;;7648:35:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7648:35:33;;7639:44;;7718:6;:13;-1:-1:-1;;;;;7704:28:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7704:28:33;;7693:39;;7748:9;7743:336;7767:6;:13;7763:1;:17;7743:336;;;8040:28;:12;8066:1;8040:25;:28::i;:::-;8014:6;8021:1;8014:9;;;;;;;;;;;;;8025:8;8034:1;8025:11;;;;;;;;;;;;;;;;;8013:55;;;;-1:-1:-1;;;;;8013:55:33;;;;;7782:3;;7743:336;;3313:295:32;3368:7;3585:16;3593:7;3585;:16::i;:::-;3569:13;3574:7;3569:4;:13::i;:::-;:32;;3313:295;-1:-1:-1;;3313:295:32:o;1495:105:11:-;1553:7;1584:1;1579;:6;;:14;;1592:1;1579:14;;;-1:-1:-1;1588:1:11;;1495:105;-1:-1:-1;1495:105:11:o;1683:104::-;1741:7;1771:1;1767;:5;:13;;1779:1;1767:13;;8311:267:29;-1:-1:-1;;;;;8461:30:29;;;;;;;:21;:30;;;;;;;;:37;;;;;;;;;;;;;;:50;;;8526:45;;;;;8565:5;;8526:45;:::i;2311:1170:7:-;2389:4;2405:16;2424:11;:9;:11::i;:::-;2405:30;;2613:15;2602:8;:26;2598:69;;;2651:5;2644:12;;;;;2598:69;2677:16;2696:11;:9;:11::i;:::-;2677:30;-1:-1:-1;2721:22:7;2717:175;;2876:5;2869:12;;;;;;2717:175;3014:18;3056:8;3076:11;:9;:11::i;:::-;3066:22;;;;;;;3045:73;;;;;;;;;;;;;;;;;3090:10;3045:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3035:84;;;;;;-1:-1:-1;;3146:28:7;3035:84;3146:16;:28::i;:::-;3129:45;;3185:7;3194:9;3205;3218:12;:10;:12::i;:::-;3184:46;;;;;;3241:24;3268:26;3278:6;3286:1;3289;3292;3268:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3268:26:7;;-1:-1:-1;;3268:26:7;;;-1:-1:-1;;;;;;;3416:30:7;;;;;;:58;;;3470:4;-1:-1:-1;;;;;3450:24:7;:16;-1:-1:-1;;;;;3450:24:7;;3416:58;3409:65;2311:1170;-1:-1:-1;;;;;;;;;;;2311:1170:7:o;15728:1047:28:-;15978:25;16017:26;16057:24;16106:20;16129:22;:14;:20;:22::i;:::-;16106:45;;16161:21;16185:23;:15;:21;:23::i;:::-;16161:47;;16244:77;16253:32;:14;:30;:32::i;:::-;16287:33;:15;:31;:33::i;16244:77::-;16218:23;;;:103;16472:49;;-1:-1:-1;;;16472:49:28;;-1:-1:-1;;;;;16472:11:28;;;;;:49;;16218:7;;16493:12;;16507:13;;16472:49;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;16453:68;;16532:16;16550:17;16571:59;16583:7;:12;;;16597:7;:14;;;16613:16;16571:11;:59::i;:::-;16531:99;;-1:-1:-1;16531:99:28;-1:-1:-1;16661:37:28;:14;16531:99;16661:27;:37::i;:::-;16641:57;-1:-1:-1;16729:39:28;:15;16758:9;16729:28;:39::i;:::-;16708:60;;15728:1047;;;;;;;;;;;;:::o;12976:506:32:-;13067:7;13282:25;13317:72;13326:30;13342:13;13326:15;:30::i;:::-;13358;13374:13;13358:15;:30::i;13317:72::-;13282:108;;13408:67;13414:19;13419:13;13414:4;:19::i;:::-;13435;13440:13;13435:4;:19::i;:::-;13456:18;13408:67;;:5;:67::i;8138:144:14:-;-1:-1:-1;;;;;8258:17:14;8232:7;8258:17;;;:12;;;;;:17;;;;;;;8138:144::o;5993:115::-;6090:11;;5993:115::o;7365:156::-;7462:7;7488:19;;;:12;;;;:19;;;;;:26;;;7365:156::o;7291:321:32:-;7369:7;7388:15;7406:25;7424:6;7406:13;7411:7;7406:4;:13::i;:::-;:17;;:25::i;:::-;7388:43;;7441:22;7466:16;7474:7;7466;:16::i;:::-;7441:41;-1:-1:-1;7521:12:32;7551:54;7561:7;7441:41;7521:12;7551:9;:54::i;7881:321::-;7959:7;7978:15;7996:25;8014:6;7996:13;8001:7;7996:4;:13::i;:::-;:17;;:25::i;3729:177:14:-;3865:19;;;;:12;;;;:19;;;;;;:26;;;:34;3729:177::o;16201:169:35:-;16277:6;16285;16319;-1:-1:-1;;;;;16310:15:35;:6;-1:-1:-1;;;;;16310:15:35;;:53;;16348:6;16356;16310:53;;;16329:6;16337;16310:53;16303:60;;;;16201:169;;;;;:::o;15928:158::-;16010:7;16063:6;16071;16046:32;;;;;;;;;:::i;:::-;;;;;;;;;;;;;16036:43;;;;;;16029:50;;15928:158;;;;:::o;11934:395:32:-;12030:7;12223:99;12233:27;12249:10;12233:15;:27::i;:::-;12262:30;12278:13;12262:15;:30::i;:::-;12294:27;12310:10;12294:15;:27::i;:::-;12223:9;:99::i;12458:395::-;12554:7;12747:99;12757:27;12773:10;12757:15;:27::i;:::-;12786:30;12802:13;12786:15;:30::i;7708:278:14:-;-1:-1:-1;;;;;7872:17:14;;7837:7;7872:17;;;:12;;;:17;;;;;;7899:30;7908:9;;;7919;7899:8;:30::i;:::-;7946:33;7964:3;7977:1;7969:5;:9;7946:17;:33::i;:::-;7939:40;7708:278;-1:-1:-1;;;;;7708:278:14:o;1673:146:22:-;1737:7;1763:26;:24;:26::i;:::-;-1:-1:-1;;;;;1763:47:22;;:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;992:182:6:-;1111:56;1125:1;1120;:6;:16;;;;;1135:1;1130;:6;1120:16;5002:3:2;1111:8:6;:56::i;10568:1072:24:-;10822:30;10894:8;:15;-1:-1:-1;;;;;10880:30:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10880:30:24;;10864:46;;10925:9;10920:714;10944:13;;:20;10940:24;;10920:714;;;10985:17;11005:10;11016:1;11005:13;;;;;;;;;;;;;;10985:33;;11032:62;11054:6;:13;;;11068:1;11054:16;;;;;;;;;;;;;;11041:9;:29;;8263:3:2;11032:8:24;:62::i;:::-;11184:12;11199:6;:13;;;11213:1;11199:16;;;;;;;;;;;;;;11184:31;;11229:66;11240:5;11247:9;11258;11269:6;:25;;;11229:10;:66::i;:::-;11310:17;11330:21;11352:1;11330:24;;;;;;;;;;;;;;11310:44;;11368:51;11382:25;11401:5;11382:18;:25::i;:::-;11409:9;11368:13;:51::i;:::-;11573:50;11598:24;:9;11612;11598:13;:24::i;:::-;11573:8;11582:1;11573:11;;;;;;;;;;;;;;:24;;:50;;;;:::i;:::-;11554:13;11568:1;11554:16;;;;;;;;;;;;;:69;;;;;10920:714;;;10966:3;;;;;10920:714;;;;10568:1072;;;;;;;:::o;8626:1605::-;8868:30;9020:18;9083:8;:15;-1:-1:-1;;;;;9069:30:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;9069:30:24;;9053:46;;9114:9;9109:1028;9133:13;;:20;9129:24;;9109:1028;;;9174:16;9193:9;9203:1;9193:12;;;;;;;;;;;;;;9174:31;;9219:61;9240:6;:13;;;9254:1;9240:16;;;;;;;;;;;;;;9228:8;:28;;8315:3:2;9219:8:24;:61::i;:::-;9375:12;9390:6;:13;;;9404:1;9390:16;;;;;;;;;;;;;;9375:31;;9420:65;9434:5;9441:8;9451:6;9459;:25;;;9420:13;:65::i;:::-;9504:13;9511:5;9504:6;:13::i;:::-;9500:89;;;9550:24;:10;9565:8;9550:14;:24::i;:::-;9537:37;;9500:89;9603:17;9623:21;9645:1;9623:24;;;;;;;;;;;;;;9603:44;;9661:51;9675:25;9694:5;9675:18;:25::i;9661:51::-;9946:9;9934:8;:21;;9933:193;;10080:46;10117:8;10105:9;:20;10080:8;10089:1;10080:11;;;;;;;:46;9933:193;;;10015:46;10051:9;10040:8;:20;10015:8;10024:1;10015:11;;;;;;;;;;;;;;:24;;:46;;;;:::i;:::-;9914:13;9928:1;9914:16;;;;;;;;;;;;;:212;;;;;9109:1028;;;9155:3;;;;;9109:1028;;;;10193:31;10213:10;10193:19;:31::i;5766:137:14:-;-1:-1:-1;;;;;5874:17:14;5851:4;5874:17;;;:12;;;;;:17;;;;;;:22;;;5766:137::o;6714:226:35:-;6845:88;6878:6;6886:5;6893:31;6926:6;6845:32;:88::i;4741:234:34:-;4879:89;4913:6;4921:5;4928:31;4961:6;4879:33;:89::i;4873:218:33:-;5003:81;5029:6;5037:5;5044:31;5077:6;5003:25;:81::i;7218:226:35:-;7349:88;7382:6;7390:5;7397:31;7430:6;7349:32;:88::i;5269:234:34:-;5407:89;5441:6;5449:5;5456:31;5489:6;5407:33;:89::i;5365:218:33:-;5495:81;5521:6;5529:5;5536:31;5569:6;5495:25;:81::i;7775:251:35:-;7909:6;7934:85;7967:6;7975:5;7982:28;8012:6;7934:32;:85::i;5850:259:34:-;5991:6;6016:86;6050:6;6058:5;6065:28;6095:6;6016:33;:86::i;5910:243:33:-;6043:6;6068:78;6094:6;6102:5;6109:28;6139:6;6068:25;:78::i;5175:135:15:-;5259:7;5285:3;:11;;5297:5;5285:18;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5285:18:15;;5175:135;-1:-1:-1;;;5175:135:15:o;6981:228:14:-;7073:6;7140:19;;;:12;;;;:19;;;;;7177:10;;7189:12;;;-1:-1:-1;;;;;7177:10:14;;;;6981:228::o;4100:202:7:-;4144:7;4267:27;4292:1;4267:24;:27::i;6074:1492:31:-;6127:12;6712:1;6699:15;6694:3;6690:25;6910:8;6940:10;6935:79;;;;7036:10;7031:79;;;;7132:10;7127:79;;;;7228:10;7223:85;;;;7330:10;7325:86;;;;7466:66;7458:74;;6903:647;;6935:79;6981:15;6973:23;;6935:79;;7031;7077:15;7069:23;;7031:79;;7127;7173:15;7165:23;;7127:79;;7223:85;7269:21;7261:29;;7223:85;;7325:86;7371:22;7363:30;;6903:647;;;6405:1155;:::o;5154:500:7:-;5198:19;5238:8;;5229:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5346:13:7;;5229:17;;-1:-1:-1;;;1518:6:7;-1:-1:-1;5342:306:7;;;5600:22;5584:14;5580:43;5572:6;5565:59;5154:500;:::o;3199:183:13:-;3276:7;3341:20;:18;:20::i;:::-;3363:10;3312:62;;;;;;-1:-1:-1;;;3312:62:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3302:73;;;;;;3295:80;;3199:183;;;:::o;4578:385:7:-;4660:7;4681:9;4704;4836:30;4861:4;4836:24;:30::i;:::-;4828:39;-1:-1:-1;4882:30:7;4907:4;4882:24;:30::i;:::-;4878:34;;4926:30;4951:4;4926:24;:30::i;14005:259:32:-;14205:3;14185:23;14232:3;14213:22;;;;14184:52;:72;;14005:259::o;6377:650::-;6504:7;6540:16;;;6789:75;6798:15;;;;;;:34;;;-1:-1:-1;;;6817:6:32;:15;6798:34;9492:3:2;6789:8:32;:75::i;:::-;6984:36;6990:5;6997:8;7007:12;6984:5;:36::i;948:166:11:-;1006:7;1025:37;1039:1;1034;:6;;4370:1:2;1025:8:11;:37::i;:::-;-1:-1:-1;1084:5:11;;;948:166::o;8366:346:32:-;8445:7;8464:15;8482:25;8500:6;8482:13;8487:7;8482:4;:13::i;:25::-;8464:43;;8517:18;8538:28;8559:6;8538:16;8546:7;8538;:16::i;:28::-;8517:49;;8576:30;8609:24;8625:7;8609:15;:24::i;:::-;8576:57;;8651:54;8661:7;8670:10;8682:22;8651:9;:54::i;8435:1028:35:-;8633:6;8665:37;8716:13;8743:16;8787;8816:32;8841:6;8816:24;:32::i;:::-;8651:197;;;;;;;;;8859:12;8894:6;-1:-1:-1;;;;;8885:15:35;:5;-1:-1:-1;;;;;8885:15:35;;8881:382;;;8916:18;8937:26;8946:8;8956:6;8937:8;:26;;:::i;:::-;8916:47;-1:-1:-1;8985:33:35;8916:47;9009:8;8985:23;:33::i;:::-;9043:10;;-1:-1:-1;8977:41:35;-1:-1:-1;8881:382:35;;;9115:18;9136:26;9145:8;9155:6;9136:8;:26;;:::i;:::-;9115:47;-1:-1:-1;9184:33:35;9115:47;9208:8;9184:23;:33::i;:::-;9242:10;;-1:-1:-1;9176:41:35;-1:-1:-1;8881:382:35;9295:50;9326:8;9336;9295:30;:50::i;:::-;9273:72;;9380:53;9414:8;9424;9380:33;:53::i;:::-;9355:22;;;;:78;;;;-1:-1:-1;9451:5:35;;-1:-1:-1;;;8435:1028:35;;;;;;:::o;6534:483:34:-;6734:6;6752:22;6777:45;6808:6;6816:5;6777:30;:45::i;:::-;6752:70;;6833:18;6854:32;6863:14;6879:6;6854:8;:32;;:::i;:::-;6896:37;;;;:29;:37;;;;;;;;-1:-1:-1;;;;;6896:44:34;;;;;;;;;:57;;;6833:53;-1:-1:-1;6971:39:34;6833:53;6995:14;6971:23;:39::i;:::-;6964:46;6534:483;-1:-1:-1;;;;;;;6534:483:34:o;6558:545:33:-;6749:6;6823:29;;;:21;:29;;;;;6749:6;6887:43;6823:29;6924:5;6887:22;:43::i;:::-;6862:68;;6941:18;6962:32;6971:14;6987:6;6962:8;:32;;:::i;:::-;6941:53;-1:-1:-1;7004:35:33;:12;7021:5;6941:53;7004:16;:35::i;:::-;-1:-1:-1;7057:39:33;:10;7081:14;7057:23;:39::i;:::-;7050:46;6558:545;-1:-1:-1;;;;;;;;6558:545:33:o;8875:346:32:-;8954:7;8973:15;8991:25;9009:6;8991:13;8996:7;8991:4;:13::i;:25::-;8973:43;;9026:18;9047:28;9068:6;9047:16;9055:7;9047;:16::i;9569:263::-;9649:7;9668:19;9690:13;9695:7;9690:4;:13::i;:::-;9668:35;-1:-1:-1;9742:12:32;9771:54;9668:35;9794:10;9742:12;9771:9;:54::i;5873:273:7:-;6081:14;6073:56;-1:-1:-1;;6073:56:7;6060:70;;6036:104::o;4461:279:32:-;4546:6;4713:19;4721:10;4713:7;:19::i;:::-;4683;4691:10;4683:7;:19::i;:::-;4676:57;;4461:279;-1:-1:-1;;;4461:279:32:o;13608:281::-;13702:7;13826:56;13832:22;13840:13;13832:7;:22::i;:::-;13856;13864:13;13856:7;:22::i;:::-;13880:1;13826:5;:56::i;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;14:138:45:-;84:20;;113:33;84:20;113:33;:::i;157:779::-;;267:3;260:4;252:6;248:17;244:27;234:2;;289:5;282;275:20;234:2;329:6;316:20;355:4;379:65;394:49;440:2;394:49;:::i;:::-;379:65;:::i;:::-;478:15;;;509:12;;;;541:15;;;587:11;;;575:24;;571:33;;568:42;-1:-1:-1;565:2:45;;;627:5;620;613:20;565:2;653:5;667:240;681:2;678:1;675:9;667:240;;;752:3;739:17;769:33;796:5;769:33;:::i;:::-;815:18;;853:12;;;;885;;;;699:1;692:9;667:240;;;-1:-1:-1;925:5:45;;224:712;-1:-1:-1;;;;;;;224:712:45:o;941:779::-;;1051:3;1044:4;1036:6;1032:17;1028:27;1018:2;;1073:5;1066;1059:20;1018:2;1113:6;1100:20;1139:4;1163:65;1178:49;1224:2;1178:49;:::i;1163:65::-;1262:15;;;1293:12;;;;1325:15;;;1371:11;;;1359:24;;1355:33;;1352:42;-1:-1:-1;1349:2:45;;;1411:5;1404;1397:20;1349:2;1437:5;1451:240;1465:2;1462:1;1459:9;1451:240;;;1536:3;1523:17;1553:33;1580:5;1553:33;:::i;:::-;1599:18;;1637:12;;;;1669;;;;1483:1;1476:9;1451:240;;1725:1538;;1852:3;1845:4;1837:6;1833:17;1829:27;1819:2;;1874:5;1867;1860:20;1819:2;1914:6;1901:20;1940:4;1964:65;1979:49;2025:2;1979:49;:::i;1964:65::-;2063:15;;;2094:12;;;;2126:15;;;2159:5;2173:1061;2187:2;2184:1;2181:9;2173:1061;;;2267:3;2254:17;2246:6;2242:30;2295:4;2347:2;2341;2337:7;2332:2;2327:3;2323:12;2319:26;2315:35;2312:2;;;2367:5;2360;2353:20;2312:2;2398;2433;2427:9;2479:2;2471:6;2467:15;-1:-1:-1;;;;;2577:6:45;2565:10;2562:22;2557:2;2545:10;2542:18;2539:46;2536:2;;;2588:9;2536:2;2623:10;2619:2;2612:22;2683:2;2679;2675:11;2662:25;2654:6;2647:41;2746:2;2742;2738:11;2725:25;2720:2;2712:6;2708:15;2701:50;2774:2;2764:12;;2834:2;2830;2826:11;2813:25;2808:2;2800:6;2796:15;2789:50;2862:3;2852:13;;2923:2;2919;2915:11;2902:25;2897:2;2889:6;2885:15;2878:50;2978:2;2974;2970:11;2957:25;2941:41;;3011:2;3001:8;2998:16;2995:2;;;3031:5;3024;3017:20;2995:2;;;3076:51;3123:3;3118:2;3107:8;3103:2;3099:17;3095:26;3076:51;:::i;:::-;3059:15;;;3052:76;;;;3141:19;;-1:-1:-1;;3180:12:45;;;;3212;;;;2205:1;2198:9;2173:1061;;3268:705;;3381:3;3374:4;3366:6;3362:17;3358:27;3348:2;;3403:5;3396;3389:20;3348:2;3443:6;3430:20;3469:4;3493:65;3508:49;3554:2;3508:49;:::i;3493:65::-;3592:15;;;3623:12;;;;3655:15;;;3701:11;;;3689:24;;3685:33;;3682:42;-1:-1:-1;3679:2:45;;;3741:5;3734;3727:20;3679:2;3767:5;3781:163;3795:2;3792:1;3789:9;3781:163;;;3852:17;;3840:30;;3890:12;;;;3922;;;;3813:1;3806:9;3781:163;;3978:702;;4102:3;4095:4;4087:6;4083:17;4079:27;4069:2;;4124:5;4117;4110:20;4069:2;4157:6;4151:13;4183:4;4207:65;4222:49;4268:2;4222:49;:::i;4207:65::-;4306:15;;;4337:12;;;;4369:15;;;4415:11;;;4403:24;;4399:33;;4396:42;-1:-1:-1;4393:2:45;;;4455:5;4448;4441:20;4393:2;4481:5;4495:156;4509:2;4506:1;4503:9;4495:156;;;4566:10;;4554:23;;4597:12;;;;4629;;;;4527:1;4520:9;4495:156;;4685:132;4752:20;;4781:30;4752:20;4781:30;:::i;4822:542::-;;4919:3;4912:4;4904:6;4900:17;4896:27;4886:2;;4941:5;4934;4927:20;4886:2;4981:6;4968:20;-1:-1:-1;;;;;5003:2:45;5000:26;4997:2;;;5029:9;4997:2;5064:54;5106:2;5087:13;;-1:-1:-1;;5083:27:45;5112:4;5079:38;5064:54;:::i;:::-;5143:2;5134:7;5127:19;5189:3;5182:4;5177:2;5169:6;5165:15;5161:26;5158:35;5155:2;;;5210:5;5203;5196:20;5155:2;5279;5272:4;5264:6;5260:17;5253:4;5244:7;5240:18;5227:55;5302:16;;;5320:4;5298:27;5291:42;;;;5306:7;4876:488;-1:-1:-1;;4876:488:45:o;5369:152::-;5446:20;;5495:1;5485:12;;5475:2;;5511:1;5508;5501:12;5526:851;;5639:4;5627:9;5622:3;5618:19;5614:30;5611:2;;;5661:5;5654;5647:20;5611:2;5687:20;5702:4;5687:20;:::i;:::-;5678:29;;5743:9;5730:23;-1:-1:-1;;;;;5813:2:45;5805:6;5802:14;5799:2;;;5829:1;5826;5819:12;5799:2;5856:60;5912:3;5903:6;5892:9;5888:22;5856:60;:::i;:::-;5849:5;5842:75;5970:2;5959:9;5955:18;5942:32;5926:48;;5999:2;5989:8;5986:16;5983:2;;;6015:1;6012;6005:12;5983:2;6051:65;6112:3;6101:8;6090:9;6086:24;6051:65;:::i;:::-;6046:2;6039:5;6035:14;6028:89;6170:2;6159:9;6155:18;6142:32;6126:48;;6199:2;6189:8;6186:16;6183:2;;;6215:1;6212;6205:12;6183:2;;6251:49;6296:3;6285:8;6274:9;6270:24;6251:49;:::i;:::-;6246:2;6239:5;6235:14;6228:73;;6333:37;6366:2;6355:9;6351:18;6333:37;:::i;:::-;6328:2;6321:5;6317:14;6310:61;5601:776;;;;:::o;6382:907::-;;6494:4;6482:9;6477:3;6473:19;6469:30;6466:2;;;6516:5;6509;6502:20;6466:2;6553;6547:9;6595:4;6587:6;6583:17;6666:6;6654:10;6651:22;-1:-1:-1;;;;;6618:10:45;6615:34;6612:62;6609:2;;;6677:9;6609:2;6704;6697:22;6737:6;-1:-1:-1;6737:6:45;6767:23;;6799:35;6767:23;6799:35;:::i;:::-;6843:23;;6918:2;6903:18;;6890:32;6931;6890;6931;:::i;:::-;6991:2;6979:15;;6972:32;7056:2;7041:18;;7028:32;7069:35;7028:32;7069:35;:::i;:::-;7132:2;7120:15;;7113:32;7197:2;7182:18;;7169:32;7210;7169;7210;:::i;:::-;7270:2;7258:15;;;;7251:32;6456:833;;-1:-1:-1;;6456:833:45:o;7294:259::-;;7406:2;7394:9;7385:7;7381:23;7377:32;7374:2;;;7427:6;7419;7412:22;7374:2;7471:9;7458:23;7490:33;7517:5;7490:33;:::i;7558:402::-;;;7687:2;7675:9;7666:7;7662:23;7658:32;7655:2;;;7708:6;7700;7693:22;7655:2;7752:9;7739:23;7771:33;7798:5;7771:33;:::i;:::-;7823:5;-1:-1:-1;7880:2:45;7865:18;;7852:32;7893:35;7852:32;7893:35;:::i;:::-;7947:7;7937:17;;;7645:315;;;;;:::o;7965:539::-;;;;8108:2;8096:9;8087:7;8083:23;8079:32;8076:2;;;8129:6;8121;8114:22;8076:2;8173:9;8160:23;8192:33;8219:5;8192:33;:::i;:::-;8244:5;-1:-1:-1;8301:2:45;8286:18;;8273:32;8314:35;8273:32;8314:35;:::i;:::-;8368:7;-1:-1:-1;8427:2:45;8412:18;;8399:32;8440;8399;8440;:::i;:::-;8491:7;8481:17;;;8066:438;;;;;:::o;8509:523::-;;;8678:2;8666:9;8657:7;8653:23;8649:32;8646:2;;;8699:6;8691;8684:22;8646:2;8743:9;8730:23;8762:33;8789:5;8762:33;:::i;:::-;8814:5;-1:-1:-1;8870:2:45;8855:18;;8842:32;-1:-1:-1;;;;;8886:30:45;;8883:2;;;8934:6;8926;8919:22;8883:2;8962:64;9018:7;9009:6;8998:9;8994:22;8962:64;:::i;:::-;8952:74;;;8636:396;;;;;:::o;9037:1744::-;;9184:2;9227;9215:9;9206:7;9202:23;9198:32;9195:2;;;9248:6;9240;9233:22;9195:2;9293:9;9280:23;-1:-1:-1;;;;;9363:2:45;9355:6;9352:14;9349:2;;;9384:6;9376;9369:22;9349:2;9427:6;9416:9;9412:22;9402:32;;9472:7;9465:4;9461:2;9457:13;9453:27;9443:2;;9499:6;9491;9484:22;9443:2;9540;9527:16;9563:65;9578:49;9624:2;9578:49;:::i;9563:65::-;9662:15;;;9693:12;;;;9725:11;;;9755:4;9786:11;;;9778:20;;9774:29;;9771:42;-1:-1:-1;9768:2:45;;;9831:6;9823;9816:22;9768:2;9858:6;9849:15;;9873:878;9887:2;9884:1;9881:9;9873:878;;;9958:2;9952:3;9943:7;9939:17;9935:26;9932:2;;;9979:6;9971;9964:22;9932:2;10011;10046;10040:9;10092:2;10084:6;10080:15;10149:6;10137:10;10134:22;10129:2;10117:10;10114:18;10111:46;10108:2;;;10160:9;10108:2;10184:22;;10232:17;;10262:49;10232:17;10262:49;:::i;:::-;10324:21;;10395:12;;;10382:26;10365:15;;;10358:51;10450:12;;;10437:26;10476:35;10437:26;10476:35;:::i;:::-;10531:15;;;10524:32;;;;10579:2;10631:12;;;10618:26;10601:15;;;10594:51;10658:19;;9905:1;9898:9;;;;;10697:12;;;;10729;;;;9873:878;;;-1:-1:-1;10770:5:45;;9164:1617;-1:-1:-1;;;;;;;;;9164:1617:45:o;10786:1776::-;;10933:2;10976;10964:9;10955:7;10951:23;10947:32;10944:2;;;10997:6;10989;10982:22;10944:2;11042:9;11029:23;-1:-1:-1;;;;;11112:2:45;11104:6;11101:14;11098:2;;;11133:6;11125;11118:22;11098:2;11176:6;11165:9;11161:22;11151:32;;11221:7;11214:4;11210:2;11206:13;11202:27;11192:2;;11248:6;11240;11233:22;11192:2;11289;11276:16;11312:65;11327:49;11373:2;11327:49;:::i;11312:65::-;11411:15;;;11442:12;;;;11474:11;;;11504:4;11535:11;;;11527:20;;11523:29;;11520:42;-1:-1:-1;11517:2:45;;;11580:6;11572;11565:22;11517:2;11607:6;11598:15;;11622:910;11636:2;11633:1;11630:9;11622:910;;;11707:2;11701:3;11692:7;11688:17;11684:26;11681:2;;;11728:6;11720;11713:22;11681:2;11760;11795;11789:9;11841:2;11833:6;11829:15;11898:6;11886:10;11883:22;11878:2;11866:10;11863:18;11860:46;11857:2;;;11909:9;11857:2;11933:22;;11981:17;;12031:1;12021:12;;12011:2;;12052:6;12044;12037:22;12011:2;12074:21;;12132:34;12153:12;;;12132:34;:::i;:::-;12127:2;12119:6;12115:15;12108:59;12226:2;12221:3;12217:12;12204:26;12199:2;12191:6;12187:15;12180:51;12254:2;12244:12;;12293:34;12323:2;12318:3;12314:12;12293:34;:::i;:::-;12288:2;12280:6;12276:15;12269:59;12351:3;12341:13;;12391:34;12421:2;12416:3;12412:12;12391:34;:::i;:::-;12374:15;;;12367:59;;;;12439:19;;11654:1;11647:9;;;;;12478:12;;;;12510;;;;11622:910;;12567:656;;;12757:2;12745:9;12736:7;12732:23;12728:32;12725:2;;;12778:6;12770;12763:22;12725:2;12816:9;12810:16;-1:-1:-1;;;;;12886:2:45;12878:6;12875:14;12872:2;;;12907:6;12899;12892:22;12872:2;12935:78;13005:7;12996:6;12985:9;12981:22;12935:78;:::i;:::-;12925:88;;13059:2;13048:9;13044:18;13038:25;13022:41;;13088:2;13078:8;13075:16;13072:2;;;13109:6;13101;13094:22;13072:2;;13137:80;13209:7;13198:8;13187:9;13183:24;13137:80;:::i;13228:253::-;;13337:2;13325:9;13316:7;13312:23;13308:32;13305:2;;;13358:6;13350;13343:22;13305:2;13402:9;13389:23;13421:30;13445:5;13421:30;:::i;13486:257::-;;13606:2;13594:9;13585:7;13581:23;13577:32;13574:2;;;13627:6;13619;13612:22;13574:2;13664:9;13658:16;13683:30;13707:5;13683:30;:::i;13748:190::-;;13860:2;13848:9;13839:7;13835:23;13831:32;13828:2;;;13881:6;13873;13866:22;13828:2;-1:-1:-1;13909:23:45;;13818:120;-1:-1:-1;13818:120:45:o;13943:742::-;;;;;14148:3;14136:9;14127:7;14123:23;14119:33;14116:2;;;14170:6;14162;14155:22;14116:2;14211:9;14198:23;14188:33;;14271:2;14260:9;14256:18;14243:32;14284:33;14311:5;14284:33;:::i;:::-;14336:5;-1:-1:-1;14393:2:45;14378:18;;14365:32;14406:35;14365:32;14406:35;:::i;:::-;14460:7;-1:-1:-1;14518:2:45;14503:18;;14490:32;-1:-1:-1;;;;;14534:30:45;;14531:2;;;14582:6;14574;14567:22;14531:2;14610:69;14671:7;14662:6;14651:9;14647:22;14610:69;:::i;:::-;14600:79;;;14106:579;;;;;;;:::o;15429:454::-;;;15598:2;15586:9;15577:7;15573:23;15569:32;15566:2;;;15619:6;15611;15604:22;15566:2;15660:9;15647:23;15637:33;;15721:2;15710:9;15706:18;15693:32;-1:-1:-1;;;;;15740:6:45;15737:30;15734:2;;;15785:6;15777;15770:22;15888:1373;;;;16099:2;16087:9;16078:7;16074:23;16070:32;16067:2;;;16120:6;16112;16105:22;16067:2;16161:9;16148:23;16138:33;;16190:2;16243;16232:9;16228:18;16215:32;-1:-1:-1;;;;;16307:2:45;16299:6;16296:14;16293:2;;;16328:6;16320;16313:22;16293:2;16356:64;16412:7;16403:6;16392:9;16388:22;16356:64;:::i;:::-;16346:74;;16473:2;16462:9;16458:18;16445:32;16429:48;;16502:2;16492:8;16489:16;16486:2;;;16523:6;16515;16508:22;16486:2;-1:-1:-1;16551:24:45;;16606:4;16598:13;;16594:27;-1:-1:-1;16584:2:45;;16640:6;16632;16625:22;16584:2;16681;16668:16;16704:65;16719:49;16765:2;16719:49;:::i;16704:65::-;16803:15;;;16834:12;;;;16866:11;;;16904;;;16896:20;;16892:29;;16889:42;-1:-1:-1;16886:2:45;;;16949:6;16941;16934:22;16886:2;16976:6;16967:15;;16991:240;17005:2;17002:1;16999:9;16991:240;;;17076:3;17063:17;17093:33;17120:5;17093:33;:::i;:::-;17139:18;;17023:1;17016:9;;;;;17177:12;;;;17209;;16991:240;;;16995:3;17250:5;17240:15;;;;;;;16057:1204;;;;;:::o;17266:342::-;;;17410:2;17398:9;17389:7;17385:23;17381:32;17378:2;;;17431:6;17423;17416:22;17378:2;17472:9;17459:23;17449:33;;17532:2;17521:9;17517:18;17504:32;17545:33;17572:5;17545:33;:::i;17613:306::-;;17724:2;17712:9;17703:7;17699:23;17695:32;17692:2;;;17745:6;17737;17730:22;17692:2;17776:23;;-1:-1:-1;;;;;;17828:32:45;;17818:43;;17808:2;;17880:6;17872;17865:22;18209:1026;;;;;18475:3;18463:9;18454:7;18450:23;18446:33;18443:2;;;18497:6;18489;18482:22;18443:2;18541:9;18528:23;18560:33;18587:5;18560:33;:::i;:::-;18612:5;-1:-1:-1;18668:2:45;18653:18;;18640:32;-1:-1:-1;;;;;18721:14:45;;;18718:2;;;18753:6;18745;18738:22;18718:2;18781:64;18837:7;18828:6;18817:9;18813:22;18781:64;:::i;:::-;18771:74;;18898:2;18887:9;18883:18;18870:32;18854:48;;18927:2;18917:8;18914:16;18911:2;;;18948:6;18940;18933:22;18911:2;18976:69;19037:7;19026:8;19015:9;19011:24;18976:69;:::i;:::-;18966:79;;19098:2;19087:9;19083:18;19070:32;19054:48;;19127:2;19117:8;19114:16;19111:2;;;19148:6;19140;19133:22;19111:2;;19176:53;19221:7;19210:8;19199:9;19195:24;19176:53;:::i;19240:299::-;;19376:2;19364:9;19355:7;19351:23;19347:32;19344:2;;;19397:6;19389;19382:22;19344:2;19441:9;19428:23;19460:49;19503:5;19460:49;:::i;19544:927::-;;;;;19852:3;19840:9;19831:7;19827:23;19823:33;19820:2;;;19874:6;19866;19859:22;19820:2;19902:38;19930:9;19902:38;:::i;:::-;19892:48;;19991:2;19980:9;19976:18;19963:32;-1:-1:-1;;;;;20055:2:45;20047:6;20044:14;20041:2;;;20076:6;20068;20061:22;20041:2;20104:81;20177:7;20168:6;20157:9;20153:22;20104:81;:::i;:::-;20094:91;;20238:2;20227:9;20223:18;20210:32;20194:48;;20267:2;20257:8;20254:16;20251:2;;;20288:6;20280;20273:22;20251:2;;20316:66;20374:7;20363:8;20352:9;20348:24;20316:66;:::i;:::-;20306:76;;;20401:64;20457:7;20452:2;20441:9;20437:18;20401:64;:::i;:::-;20391:74;;19810:661;;;;;;;:::o;20476:1817::-;;;;;;;20842:3;20830:9;20821:7;20817:23;20813:33;20810:2;;;20864:6;20856;20849:22;20810:2;20892:38;20920:9;20892:38;:::i;:::-;20882:48;;20949:2;21002;20991:9;20987:18;20974:32;-1:-1:-1;;;;;21066:2:45;21058:6;21055:14;21052:2;;;21087:6;21079;21072:22;21052:2;21115:81;21188:7;21179:6;21168:9;21164:22;21115:81;:::i;:::-;21105:91;;21249:2;21238:9;21234:18;21221:32;21205:48;;21278:2;21268:8;21265:16;21262:2;;;21299:6;21291;21284:22;21262:2;21327:66;21385:7;21374:8;21363:9;21359:24;21327:66;:::i;:::-;21317:76;;21412:64;21468:7;21463:2;21452:9;21448:18;21412:64;:::i;:::-;21402:74;;21529:3;21518:9;21514:19;21501:33;21485:49;;21559:2;21549:8;21546:16;21543:2;;;21580:6;21572;21565:22;21543:2;-1:-1:-1;21608:24:45;;21663:4;21655:13;;21651:27;-1:-1:-1;21641:2:45;;21697:6;21689;21682:22;21641:2;21738;21725:16;21761:65;21776:49;21822:2;21776:49;:::i;21761:65::-;21860:15;;;21891:12;;;;21923:11;;;21961;;;21953:20;;21949:29;;21946:42;-1:-1:-1;21943:2:45;;;22006:6;21998;21991:22;21943:2;22033:6;22024:15;;22048:163;22062:2;22059:1;22056:9;22048:163;;;22119:17;;22107:30;;22080:1;22073:9;;;;;22157:12;;;;22189;;22048:163;;;22052:3;22230:5;22220:15;;;;;;;22282:3;22271:9;22267:19;22254:33;22244:43;;20800:1493;;;;;;;;:::o;22298:1394::-;;;;;22523:3;22511:9;22502:7;22498:23;22494:33;22491:2;;;22545:6;22537;22530:22;22491:2;22590:9;22577:23;-1:-1:-1;;;;;22660:2:45;22652:6;22649:14;22646:2;;;22681:6;22673;22666:22;22646:2;22709:22;;;;22765:4;22747:16;;;22743:27;22740:2;;;22788:6;22780;22773:22;22740:2;22826;22820:9;22868:4;22860:6;22856:17;22923:6;22911:10;22908:22;22903:2;22891:10;22888:18;22885:46;22882:2;;;22934:9;22882:2;22961;22954:22;23000:16;;22985:32;;23050:40;23086:2;23078:11;;23050:40;:::i;:::-;23045:2;23037:6;23033:15;23026:65;23124:33;23153:2;23149;23145:11;23124:33;:::i;:::-;23119:2;23111:6;23107:15;23100:58;23191:33;23220:2;23216;23212:11;23191:33;:::i;:::-;23186:2;23178:6;23174:15;23167:58;23280:3;23276:2;23272:12;23259:26;23253:3;23245:6;23241:16;23234:52;23332:3;23328:2;23324:12;23311:26;23362:2;23352:8;23349:16;23346:2;;;23383:6;23375;23368:22;23346:2;23426:46;23464:7;23453:8;23449:2;23445:17;23426:46;:::i;:::-;23420:3;23412:6;23408:16;23401:72;;23492:6;23482:16;;;;;23517:64;23573:7;23568:2;23557:9;23553:18;23517:64;:::i;:::-;22481:1211;;23507:74;;-1:-1:-1;;;;23628:3:45;23613:19;;23600:33;;23680:4;23665:20;23652:34;;22481:1211::o;23697:194::-;;23820:2;23808:9;23799:7;23795:23;23791:32;23788:2;;;23841:6;23833;23826:22;23788:2;-1:-1:-1;23869:16:45;;23778:113;-1:-1:-1;23778:113:45:o;23896:106::-;-1:-1:-1;;;;;23964:31:45;23952:44;;23942:60::o;24007:466::-;;24101:5;24095:12;24128:6;24123:3;24116:19;24154:4;24183:2;24178:3;24174:12;24167:19;;24220:2;24213:5;24209:14;24241:3;24253:195;24267:6;24264:1;24261:13;24253:195;;;24332:13;;-1:-1:-1;;;;;24328:39:45;24316:52;;24388:12;;;;24423:15;;;;24364:1;24282:9;24253:195;;;-1:-1:-1;24464:3:45;;24071:402;-1:-1:-1;;;;;24071:402:45:o;24478:442::-;;24574:5;24568:12;24601:6;24596:3;24589:19;24627:4;24656:2;24651:3;24647:12;24640:19;;24693:2;24686:5;24682:14;24714:3;24726:169;24740:6;24737:1;24734:13;24726:169;;;24801:13;;24789:26;;24835:12;;;;24870:15;;;;24762:1;24755:9;24726:169;;24925:477;;25006:5;25000:12;25033:6;25028:3;25021:19;25058:3;25070:162;25084:6;25081:1;25078:13;25070:162;;;25146:4;25202:13;;;25198:22;;25192:29;25174:11;;;25170:20;;25163:59;25099:12;25070:162;;;25250:6;25247:1;25244:13;25241:2;;;25316:3;25309:4;25300:6;25295:3;25291:16;25287:27;25280:40;25241:2;-1:-1:-1;25384:2:45;25363:15;-1:-1:-1;;25359:29:45;25350:39;;;;25391:4;25346:50;;24976:426;-1:-1:-1;;24976:426:45:o;25407:143::-;25500:1;25493:5;25490:12;25480:2;;25506:9;25480:2;25526:18;;25470:80::o;25555:993::-;;25640:6;25671:5;25665:12;25703:1;25699:2;25696:9;25686:2;;25709:9;25686:2;25741;25736:3;25729:15;;25790:4;25783:5;25779:16;25773:23;25805:50;25849:4;25844:3;25840:14;25826:12;25805:50;:::i;:::-;;25903:4;25896:5;25892:16;25886:23;25918:52;25964:4;25959:3;25955:14;25939;25918:52;:::i;:::-;;26019:4;26012:5;26008:16;26002:23;25995:4;25990:3;25986:14;25979:47;26075:4;26068:5;26064:16;26058:23;26051:4;26046:3;26042:14;26035:47;26131:4;26124:5;26120:16;26114:23;26107:4;26102:3;26098:14;26091:47;26186:4;26179:5;26175:16;26169:23;26201:52;26247:4;26242:3;26238:14;26222;26201:52;:::i;:::-;;26301:4;26294:5;26290:16;26284:23;26316:52;26362:4;26357:3;26353:14;26337;26316:52;:::i;:::-;;26387:6;26441:2;26434:5;26430:14;26424:21;26475:2;26470;26465:3;26461:12;26454:24;26494:48;26538:2;26533:3;26529:12;26513:14;26494:48;:::i;26553:273::-;;26736:6;26728;26723:3;26710:33;26762:16;;26787:15;;;26762:16;26700:126;-1:-1:-1;26700:126:45:o;26831:363::-;-1:-1:-1;;27088:2:45;27084:15;;;27080:24;;27068:37;;27139:15;;;;27135:24;27130:2;27121:12;;27114:46;27185:2;27176:12;;27008:186::o;27199:203::-;-1:-1:-1;;;;;27363:32:45;;;;27345:51;;27333:2;27318:18;;27300:102::o;27407:327::-;-1:-1:-1;;;;;27621:32:45;;27603:51;;27591:2;27576:18;;27663:65;27724:2;27709:18;;27701:6;27663:65;:::i;27739:274::-;-1:-1:-1;;;;;27931:32:45;;;;27913:51;;27995:2;27980:18;;27973:34;27901:2;27886:18;;27868:145::o;28018:279::-;;28212:2;28201:9;28194:21;28232:59;28287:2;28276:9;28272:18;28264:6;28232:59;:::i;28302:851::-;;28574:2;28563:9;28556:21;28600:59;28655:2;28644:9;28640:18;28632:6;28600:59;:::i;:::-;28716:22;;;28678:2;28696:18;;;28689:50;;;;28788:13;;28810:22;;;28886:15;;;;28848;;;28919:4;28932:195;28946:6;28943:1;28940:13;28932:195;;;29011:13;;-1:-1:-1;;;;;29007:39:45;28995:52;;29102:15;;;;29067:12;;;;29043:1;28961:9;28932:195;;29158:695;;29506:2;29495:9;29488:21;29532:59;29587:2;29576:9;29572:18;29564:6;29532:59;:::i;:::-;29639:9;29631:6;29627:22;29622:2;29611:9;29607:18;29600:50;29673:49;29715:6;29707;29673:49;:::i;:::-;29659:63;;29770:9;29762:6;29758:22;29753:2;29742:9;29738:18;29731:50;29798:49;29840:6;29832;29798:49;:::i;29858:861::-;;30254:3;30243:9;30236:22;30281:60;30336:3;30325:9;30321:19;30313:6;30281:60;:::i;:::-;30389:9;30381:6;30377:22;30372:2;30361:9;30357:18;30350:50;30423:49;30465:6;30457;30423:49;:::i;:::-;30409:63;;30520:9;30512:6;30508:22;30503:2;30492:9;30488:18;30481:50;30554:49;30596:6;30588;30554:49;:::i;:::-;30540:63;;30651:9;30643:6;30639:22;30634:2;30623:9;30619:18;30612:50;30679:34;30706:6;30698;30679:34;:::i;30724:559::-;;31024:2;31013:9;31006:21;31050:59;31105:2;31094:9;31090:18;31082:6;31050:59;:::i;:::-;31157:9;31149:6;31145:22;31140:2;31129:9;31125:18;31118:50;31185:49;31227:6;31219;31185:49;:::i;:::-;31177:57;;;31270:6;31265:2;31254:9;31250:18;31243:34;30996:287;;;;;;:::o;31288:264::-;;31465:2;31454:9;31447:21;31485:61;31542:2;31531:9;31527:18;31519:6;31485:61;:::i;31828:187::-;31993:14;;31986:22;31968:41;;31956:2;31941:18;;31923:92::o;32020:329::-;32241:14;;32234:22;32216:41;;32288:2;32273:18;;32266:34;;;;32331:2;32316:18;;32309:34;32204:2;32189:18;;32171:178::o;32354:177::-;32500:25;;;32488:2;32473:18;;32455:76::o;32536:375::-;32738:25;;;-1:-1:-1;;;;;32837:15:45;;;32832:2;32817:18;;32810:43;32889:15;32884:2;32869:18;;32862:43;32726:2;32711:18;;32693:218::o;32916:852::-;33271:25;;;-1:-1:-1;;;;;33370:15:45;;;33365:2;33350:18;;33343:43;33422:15;;33417:2;33402:18;;33395:43;33474:3;33469:2;33454:18;;33447:31;;;32916:852;;33501:62;;33543:19;;33535:6;33501:62;:::i;:::-;33600:6;33594:3;33583:9;33579:19;33572:35;33644:6;33638:3;33627:9;33623:19;33616:35;33700:9;33692:6;33688:22;33682:3;33671:9;33667:19;33660:51;33728:34;33755:6;33747;33728:34;:::i;:::-;33720:42;33261:507;-1:-1:-1;;;;;;;;;;33261:507:45:o;34463:230::-;34619:2;34604:18;;34631:56;34608:9;34669:6;34631:56;:::i;34878:244::-;35048:25;;;35104:2;35089:18;;35082:34;35036:2;35021:18;;35003:119::o;35127:628::-;;35450:3;35439:9;35432:22;35477:61;35533:3;35522:9;35518:19;35510:6;35477:61;:::i;:::-;35586:9;35578:6;35574:22;35569:2;35558:9;35554:18;35547:50;35614:49;35656:6;35648;35614:49;:::i;:::-;35694:2;35679:18;;35672:34;;;;-1:-1:-1;;35737:2:45;35722:18;35715:34;35606:57;35422:333;-1:-1:-1;;35422:333:45:o;35760:417::-;;36005:2;35994:9;35987:21;36025:60;36081:2;36070:9;36066:18;36058:6;36025:60;:::i;:::-;36116:2;36101:18;;36094:34;;;;-1:-1:-1;36159:2:45;36144:18;36137:34;36017:68;35977:200;-1:-1:-1;35977:200:45:o;36617:417::-;36848:25;;;36904:2;36889:18;;36882:34;;;;36947:2;36932:18;;36925:34;-1:-1:-1;;;;;36995:32:45;36990:2;36975:18;;36968:60;36835:3;36820:19;;36802:232::o;37039:242::-;37109:2;37103:9;37139:17;;;-1:-1:-1;;;;;37171:34:45;;37207:22;;;37168:62;37165:2;;;37233:9;37165:2;37260;37253:22;37083:198;;-1:-1:-1;37083:198:45:o;37286:183::-;;-1:-1:-1;;;;;37377:6:45;37374:30;37371:2;;;37407:9;37371:2;-1:-1:-1;37458:4:45;37439:17;;;37435:28;;37361:108::o;37474:133::-;-1:-1:-1;;;;;37551:31:45;;37541:42;;37531:2;;37597:1;37594;37587:12;37612:120;37700:5;37693:13;37686:21;37679:5;37676:32;37666:2;;37722:1;37719;37712:12;37737:119;37830:1;37823:5;37820:12;37810:2;;37846:1;37843;37836:12",
    "linkReferences": {},
    "immutableReferences": {
      "138": [
        {
          "start": 4291,
          "length": 32
        }
      ],
      "3068": [
        {
          "start": 10263,
          "length": 32
        }
      ],
      "3070": [
        {
          "start": 10296,
          "length": 32
        }
      ],
      "3072": [
        {
          "start": 10230,
          "length": 32
        }
      ],
      "4696": [
        {
          "start": 4988,
          "length": 32
        }
      ],
      "6": [
        {
          "start": 1288,
          "length": 32
        }
      ],
      "963": [
        {
          "start": 6728,
          "length": 32
        }
      ],
      "965": [
        {
          "start": 6764,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "WETH()": "ad5c4648",
    "batchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool),int256[],uint256)": "945bcec9",
    "deregisterTokens(bytes32,address[])": "7d3aeb96",
    "exitPool(bytes32,address,address,(address[],uint256[],bytes,bool))": "8bdb3913",
    "flashLoan(address,address[],uint256[],bytes)": "5c38449e",
    "getActionId(bytes4)": "851c1bb3",
    "getAuthorizer()": "aaabadc5",
    "getDomainSeparator()": "ed24911d",
    "getInternalBalance(address,address[])": "0f5a6efa",
    "getNextNonce(address)": "90193b7c",
    "getPausedState()": "1c0de051",
    "getPool(bytes32)": "f6c00927",
    "getPoolTokenInfo(bytes32,address)": "b05f8e48",
    "getPoolTokens(bytes32)": "f94d4668",
    "getProtocolFeesCollector()": "d2946c2b",
    "hasApprovedRelayer(address,address)": "fec90d72",
    "joinPool(bytes32,address,address,(address[],uint256[],bytes,bool))": "b95cac28",
    "managePoolBalance((uint8,bytes32,address,uint256)[])": "e6c46092",
    "manageUserBalance((uint8,address,uint256,address,address)[])": "0e8e3e84",
    "queryBatchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool))": "f84d066e",
    "registerPool(uint8)": "09b2760f",
    "registerTokens(bytes32,address[],address[])": "66a9c7d2",
    "setAuthorizer(address)": "058a628f",
    "setPaused(bool)": "16c38b3c",
    "setRelayerApproval(address,address,bool)": "fa6e671d",
    "swap((bytes32,uint8,address,address,uint256,bytes),(address,bool,address,bool),uint256,uint256)": "52bbbe29"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IAuthorizer\",\"name\":\"authorizer\",\"type\":\"address\"},{\"internalType\":\"contract IWETH\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pauseWindowDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bufferPeriodDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IAuthorizer\",\"name\":\"newAuthorizer\",\"type\":\"address\"}],\"name\":\"AuthorizerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExternalBalanceTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IFlashLoanRecipient\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"FlashLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"delta\",\"type\":\"int256\"}],\"name\":\"InternalBalanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"PausedStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"deltas\",\"type\":\"int256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"protocolFeeAmounts\",\"type\":\"uint256[]\"}],\"name\":\"PoolBalanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"cashDelta\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"managedDelta\",\"type\":\"int256\"}],\"name\":\"PoolBalanceManaged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IVault.PoolSpecialization\",\"name\":\"specialization\",\"type\":\"uint8\"}],\"name\":\"PoolRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"RelayerApprovalChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"TokensDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"assetManagers\",\"type\":\"address[]\"}],\"name\":\"TokensRegistered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IVault.SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"assetInIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetOutIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct IVault.BatchSwapStep[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IAsset[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IVault.FundManagement\",\"name\":\"funds\",\"type\":\"tuple\"},{\"internalType\":\"int256[]\",\"name\":\"limits\",\"type\":\"int256[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"batchSwap\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"assetDeltas\",\"type\":\"int256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"deregisterTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IAsset[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IVault.ExitPoolRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"exitPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFlashLoanRecipient\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"getActionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorizer\",\"outputs\":[{\"internalType\":\"contract IAuthorizer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getInternalBalance\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNextNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPausedState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bufferPeriodEndTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum IVault.PoolSpecialization\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPoolTokenInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"managed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastChangeBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"assetManager\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"}],\"name\":\"getPoolTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"lastChangeBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolFeesCollector\",\"outputs\":[{\"internalType\":\"contract ProtocolFeesCollector\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"hasApprovedRelayer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IAsset[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IVault.JoinPoolRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"joinPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum IVault.PoolBalanceOpKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IVault.PoolBalanceOp[]\",\"name\":\"ops\",\"type\":\"tuple[]\"}],\"name\":\"managePoolBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum IVault.UserBalanceOpKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"contract IAsset\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct IVault.UserBalanceOp[]\",\"name\":\"ops\",\"type\":\"tuple[]\"}],\"name\":\"manageUserBalance\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IVault.SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"assetInIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetOutIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct IVault.BatchSwapStep[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IAsset[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IVault.FundManagement\",\"name\":\"funds\",\"type\":\"tuple\"}],\"name\":\"queryBatchSwap\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IVault.PoolSpecialization\",\"name\":\"specialization\",\"type\":\"uint8\"}],\"name\":\"registerPool\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"assetManagers\",\"type\":\"address[]\"}],\"name\":\"registerTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAuthorizer\",\"name\":\"newAuthorizer\",\"type\":\"address\"}],\"name\":\"setAuthorizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setRelayerApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"enum IVault.SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"contract IAsset\",\"name\":\"assetIn\",\"type\":\"address\"},{\"internalType\":\"contract IAsset\",\"name\":\"assetOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct IVault.SingleSwap\",\"name\":\"singleSwap\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IVault.FundManagement\",\"name\":\"funds\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountCalculated\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"The `Vault` is Balancer V2's core contract. A single instance of it exists for the entire network, and it is the entity used to interact with Pools by Liquidity Providers who join and exit them, Traders who swap, and Asset Managers who withdraw and deposit tokens. The `Vault`'s source code is split among a number of sub-contracts, with the goal of improving readability and making understanding the system easier. Most sub-contracts have been marked as `abstract` to explicitly indicate that only the full `Vault` is meant to be deployed. Roughly speaking, these are the contents of each sub-contract:  - `AssetManagers`: Pool token Asset Manager registry, and Asset Manager interactions.  - `Fees`: set and compute protocol fees.  - `FlashLoans`: flash loan transfers and fees.  - `PoolBalances`: Pool joins and exits.  - `PoolRegistry`: Pool registration, ID management, and basic queries.  - `PoolTokens`: Pool token registration and registration, and balance queries.  - `Swaps`: Pool swaps.  - `UserBalance`: manage user balances (Internal Balance operations and external balance transfers)  - `VaultAuthorization`: access control, relayers and signature validation. Additionally, the different Pool specializations are handled by the `GeneralPoolsBalance`, `MinimalSwapInfoPoolsBalance` and `TwoTokenPoolsBalance` sub-contracts, which in turn make use of the `BalanceAllocation` library. The most important goal of the `Vault` is to make token swaps use as little gas as possible. This is reflected in a multitude of design decisions, from minor things like the format used to store Pool IDs, to major features such as the different Pool specialization settings. Finally, the large number of tasks carried out by the Vault means its bytecode is very large, close to exceeding the contract size limit imposed by EIP 170 (https://eips.ethereum.org/EIPS/eip-170). Manual tuning of the source code was required to improve code generation and bring the bytecode size below this limit. This includes extensive utilization of `internal` functions (particularly inside modifiers), usage of named return arguments, dedicated storage access methods, dynamic revert reason generation, and usage of inline assembly, to name a few.\",\"kind\":\"dev\",\"methods\":{\"WETH()\":{\"details\":\"Returns the Vault's WETH instance.\"},\"batchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool),int256[],uint256)\":{\"details\":\"Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either the amount of tokens sent to or received from the Pool, depending on the `kind` value. Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at the same index in the `assets` array. Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or `amountOut` depending on the swap kind. Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`. The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses, or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault. Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies the minimum or maximum amount of each token the vault is allowed to transfer. `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the equivalent `swap` call. Emits `Swap` events.\"},\"deregisterTokens(bytes32,address[])\":{\"details\":\"Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract. Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens must be deregistered in the same `deregisterTokens` call. A deregistered token can be re-registered later on, possibly with a different Asset Manager. Emits a `TokensDeregistered` event.\"},\"exitPool(bytes32,address,address,(address[],uint256[],bytes,bool))\":{\"details\":\"Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see `getPoolTokenInfo`). If the caller is not `sender`, it must be an authorized relayer for them. The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault: it just enforces these minimums. If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit. `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final `assets` array might not be sorted. Pools with no registered tokens cannot be exited. If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise, an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to do so will trigger a revert. `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the `tokens` array. This array must match the Pool's registered tokens. This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement their own custom logic. This typically requires additional information from the user (such as the expected number of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and passed directly to the Pool's contract. Emits a `PoolBalanceChanged` event.\"},\"flashLoan(address,address[],uint256[],bytes)\":{\"details\":\"Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it, and then reverting unless the tokens plus a proportional protocol fee have been returned. The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount for each token contract. `tokens` must be sorted in ascending order. The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the `receiveFlashLoan` call. Emits `FlashLoan` events.\"},\"getActionId(bytes4)\":{\"details\":\"Returns the action identifier associated with the external function described by `selector`.\"},\"getAuthorizer()\":{\"details\":\"Returns the Vault's Authorizer.\"},\"getDomainSeparator()\":{\"details\":\"Returns the EIP712 domain separator.\"},\"getInternalBalance(address,address[])\":{\"details\":\"Returns `user`'s Internal Balance for a set of tokens.\"},\"getNextNonce(address)\":{\"details\":\"Returns the next nonce used by an address to sign messages.\"},\"getPausedState()\":{\"details\":\"Returns the current contract pause status, as well as the end times of the Pause Window and Buffer Period.\"},\"getPool(bytes32)\":{\"details\":\"Returns a Pool's contract address and specialization setting.\"},\"getPoolTokenInfo(bytes32,address)\":{\"details\":\"Returns detailed information for a Pool's registered token. `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token` equals the sum of `cash` and `managed`. Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`, `managed` or `total` balance to be greater than 2^112 - 1. `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a change for this purpose, and will update `lastChangeBlock`. `assetManager` is the Pool's token Asset Manager.\"},\"getPoolTokens(bytes32)\":{\"details\":\"Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of the tokens' `balances` changed. The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order. If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same order as passed to `registerTokens`. Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo` instead.\"},\"getProtocolFeesCollector()\":{\"details\":\"Returns the current protocol fee module.\"},\"hasApprovedRelayer(address,address)\":{\"details\":\"Returns true if `user` has approved `relayer` to act as a relayer for them.\"},\"joinPool(bytes32,address,address,(address[],uint256[],bytes,bool))\":{\"details\":\"Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized Pool shares. If the caller is not `sender`, it must be an authorized relayer for them. The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces these maximums. If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent back to the caller (not the sender, which is important for relayers). `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final `assets` array might not be sorted. Pools with no registered tokens cannot be joined. If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be withdrawn from Internal Balance: attempting to do so will trigger a revert. This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement their own custom logic. This typically requires additional information from the user (such as the expected number of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed directly to the Pool's contract, as is `recipient`. Emits a `PoolBalanceChanged` event.\"},\"managePoolBalance((uint8,bytes32,address,uint256)[])\":{\"details\":\"Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates. Pool Balance management features batching, which means a single contract call can be used to perform multiple operations of different kinds, with different Pools and tokens, at once. For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`.\"},\"manageUserBalance((uint8,address,uint256,address,address)[])\":{\"details\":\"Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer) and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as it lets integrators reuse a user's Vault allowance. For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\"},\"queryBatchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool))\":{\"details\":\"Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result. Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH) the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it receives are the same that an equivalent `batchSwap` call would receive. Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct. This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens, approve them for the Vault, or even know a user's address. Note that this function is not 'view' (due to implementation details): the client code must explicitly execute eth_call instead of eth_sendTransaction.\"},\"registerPool(uint8)\":{\"details\":\"Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be changed. The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`, depending on the chosen specialization setting. This contract is known as the Pool's contract. Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words, multiple Pools may share the same contract. Emits a `PoolRegistered` event.\"},\"registerTokens(bytes32,address[],address[])\":{\"details\":\"Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract. Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens, exit by receiving registered tokens, and can only swap registered tokens. Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in ascending order. The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`, depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore expected to be highly secured smart contracts with sound design principles, and the decision to register an Asset Manager should not be made lightly. Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset Manager is set, it cannot be changed except by deregistering the associated token and registering again with a different Asset Manager. Emits a `TokensRegistered` event.\"},\"setAuthorizer(address)\":{\"details\":\"Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this. Emits an `AuthorizerChanged` event.\"},\"setPaused(bool)\":{\"details\":\"Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an error in some part of the system. The Vault can only be paused during an initial time period, after which pausing is forever disabled. While the contract is paused, the following features are disabled: - depositing and transferring internal balance - transferring external balance (using the Vault's allowance) - swaps - joining Pools - Asset Manager interactions Internal Balance can still be withdrawn, and Pools exited.\"},\"setRelayerApproval(address,address,bool)\":{\"details\":\"Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise. Emits a `RelayerApprovalChanged` event.\"},\"swap((bytes32,uint8,address,address,uint256,bytes),(address,bool,address,bool),uint256,uint256)\":{\"details\":\"Performs a swap with a single Pool. If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens taken from the Pool, which must be greater than or equal to `limit`. If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens sent to the Pool, which must be less than or equal to `limit`. Internal Balance usage and the recipient are determined by the `funds` struct. Emits a `Swap` event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"test/foundry/Vault/contracts/vault/Vault.sol\":\"Vault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/=node_modules/@chainlink/\",\":@ensdomains/=node_modules/@ensdomains/\",\":@eth-optimism/=node_modules/@eth-optimism/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":@prb/test/=lib/unchecked-counter/lib/prb-test/src/\",\":@uniswap/=node_modules/@uniswap/\",\":base64-sol/=node_modules/base64-sol/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=node_modules/hardhat/\",\":prb-test/=lib/unchecked-counter/lib/prb-test/src/\",\":solady/=node_modules/solady/\",\":src/=lib/unchecked-counter/src/\",\":unchecked-counter/=lib/unchecked-counter/src/\"]},\"sources\":{\"test/foundry/Vault/contracts/lib/helpers/AssetHelpers.sol\":{\"keccak256\":\"0xf70e781d7e1469aa57f4622a3d5e1ee9fcb8079c0d256405faf35b9cb93933da\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://90ed9f530cad97a64fe211f99461a1d24cb8c5238f3ed35cdda3c239bb92dd7b\",\"dweb:/ipfs/Qmedw2tqsrDVSNUiJJqAqUKhd53AjKJrj1C7XLtfqWwWri\"]},\"test/foundry/Vault/contracts/lib/helpers/Authentication.sol\":{\"keccak256\":\"0xea892213ec2967f53e26a0dd833bde01e4d9b6e49dd91e6c59ff00044f83c28d\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://0bc36f6335254bef8a4515e898a7ce5b3f36350e4d7d1dd45a0aa3d1356fdae5\",\"dweb:/ipfs/QmRRatu77hTPReUnRidk3wjgEMyGYVgh9wDrkiMiKmtWtR\"]},\"test/foundry/Vault/contracts/lib/helpers/BalancerErrors.sol\":{\"keccak256\":\"0xcf81c3938bee334cb8cb88603f59768754c297e2bce76ab8cc2a4b5877146219\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://49273bc36bde574f90c23d0bf033455f9f069e106e7fdb0d1040ec87f96dc19b\",\"dweb:/ipfs/QmUQt4QisHsBdh7SELzkTcfw9okBuxFCHeipiEzYCq3Vnr\"]},\"test/foundry/Vault/contracts/lib/helpers/IAuthentication.sol\":{\"keccak256\":\"0xfd687ced203d2c6da8189792e1719a5182faf45956129388b231ee76740b99a6\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://581aa664e84e950cd9bb747bf6022867db63c64f67d9556a86b5f04f871c2c5d\",\"dweb:/ipfs/QmRa6EEV3LXJaHzymztiLqyeAzmE4jAgBEEi3mi8R5cfFa\"]},\"test/foundry/Vault/contracts/lib/helpers/ISignaturesValidator.sol\":{\"keccak256\":\"0x2fe46b13b7c8bfc6f5c539c0b73d6325813f383f551b71fb6bca8dafd06964e1\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://8e651ae7a3a3652c8bb7aaa42c2cce5924310df62a923d9ec50ddb9c850d2995\",\"dweb:/ipfs/QmTHz9y18L5FD7v9GcvxGWSLJuin2KCUEYoARTgz8njce8\"]},\"test/foundry/Vault/contracts/lib/helpers/ITemporarilyPausable.sol\":{\"keccak256\":\"0xb3e5b7c63f80b80ef3f0138eac56c397a439bf6b667fc06d5061aa869828b562\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://978d66fba0721a1a67e29a32eaddab8d1f92ab2fb2d611724ea8d0d3c9b0e95b\",\"dweb:/ipfs/QmfG4foZvx3NDZao7d4VvGzL4Uxtk8VWNJXvgo9fiAJxZv\"]},\"test/foundry/Vault/contracts/lib/helpers/InputHelpers.sol\":{\"keccak256\":\"0xd58eb6851269729d3ea0d739f812c67c3e750b046ef1653ae12134e668925d28\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://9cb5db2184b915b6640593f2e0840de1c39144b1d692f5f1bb13958b28647d7c\",\"dweb:/ipfs/QmbdfxJJo5hwJMG1Cvi2DoBthwENVkdAGJ6JDAWP8JLzW9\"]},\"test/foundry/Vault/contracts/lib/helpers/SignaturesValidator.sol\":{\"keccak256\":\"0x1b370c5532ea1439d3c2d66ab993cc4851921d9aa38f0639a81a2d04113077dd\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://5d7fe92b224f90cb49204f04db3e71103eeea885df8562a9e886a73f6acbeea9\",\"dweb:/ipfs/QmXb4NEm8DAjUecZ3qKn9QY2vencdpdEE6ytfmLi4egT3u\"]},\"test/foundry/Vault/contracts/lib/helpers/TemporarilyPausable.sol\":{\"keccak256\":\"0xd20f7cbc60072fc73aa137ce644777195de3143bc6ce910c43501647f3ce6c60\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b3c5a3589b0d85a051977e77e1fe1e9b41c4d005a8a4ac3156995e9fddd9d926\",\"dweb:/ipfs/QmZwwhQQFL9tK1vNBTKB4E5ZGBdwfgGrgv2fjHgBaZTENi\"]},\"test/foundry/Vault/contracts/lib/math/FixedPoint.sol\":{\"keccak256\":\"0x38720507bb6c838df83953d1ffa88b97d0e06baefa0e3e387303cb8a090a49f5\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://fd74d7d2f8881dcc5a3aa4ce732f84b2cbb15de117e1fc4735a3d58a4062524a\",\"dweb:/ipfs/QmSYxuM8HhMn3oPxZ66PbukDikGPkHs3FLD7miFbky2EfW\"]},\"test/foundry/Vault/contracts/lib/math/LogExpMath.sol\":{\"keccak256\":\"0x6ee640facad86b1cb4577f019dc06123bfb8259efde7a2b9be27aff4dab29c4a\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://c8a012aacc16d8ba9d0c0c0dfd2dcd17a86c676199ec2bb295c6c6487fe48114\",\"dweb:/ipfs/QmbLK2o3nyn3Ub2SBEtiTMktnV62SA7uQ8PRjMPzSx4GwT\"]},\"test/foundry/Vault/contracts/lib/math/Math.sol\":{\"keccak256\":\"0x98cf5d1e9b91be5a4315c1aa7bf6480e097113c5f9a9200c92d123bc4ece9ec4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9617a16524a7e9b82f6962f76ef2d8a47d14285c001d4bb5e88574cb33e0ebe3\",\"dweb:/ipfs/QmRBvV1X5FEsyxDAfMPZ4GNp7HvfK5gaKaLpp6o1EYwfFF\"]},\"test/foundry/Vault/contracts/lib/openzeppelin/Address.sol\":{\"keccak256\":\"0x5f83465783b239828f83c626bae1ac944cfff074c8919c245d14b208bcf317d5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://051f7911c13fc63c6d335fb09b17a1540a6f97df76b095e795665ab5601e021b\",\"dweb:/ipfs/QmeGCDpp5GN9e3x56dDhNfkscYLSoTTJrqG5i8KT2t2zeW\"]},\"test/foundry/Vault/contracts/lib/openzeppelin/EIP712.sol\":{\"keccak256\":\"0x0cf3ec5d6130aac057e69df14b1ff87baf9c6c2cb13bc545952def004e629ac0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://446419367266d271bf6953e4ae0423356a5cc4717f7b9a5a0532436de4be2d70\",\"dweb:/ipfs/QmPV56wHs1Mqif6et6TYrhZ2QYPNmiVTmXWvQMhqWfKLk9\"]},\"test/foundry/Vault/contracts/lib/openzeppelin/EnumerableMap.sol\":{\"keccak256\":\"0x0e7bb50a1095a2a000328ef2243fca7b556ebccfe594f4466d0853f56ed07755\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9d9a50c8d7e224f49ef1b0e766d26c98671054b8f3f2994f5972c7c0fff9f4c7\",\"dweb:/ipfs/QmY1o4e41x2xaEYEDvi5CdA47GkbH4Krbf7a6XsdZ2faKy\"]},\"test/foundry/Vault/contracts/lib/openzeppelin/EnumerableSet.sol\":{\"keccak256\":\"0x92673c683363abc0c7e5f39d4bc26779f0c1292bf7a61b03155e0c3d60f25718\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://aa2e27e0634063bbf5b16da5767a56a006a2c0bdb28ad0ab6cc81f1a0c328e3f\",\"dweb:/ipfs/Qmb43fT3hGqsxgX9iHgtqFA2NVGxYtPGgwmLesVLpd1nXG\"]},\"test/foundry/Vault/contracts/lib/openzeppelin/IERC20.sol\":{\"keccak256\":\"0xd828a935a72a6d182912abba290e4debb8c684c36fd756088f7acb30e0b2bb76\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1e6ac013b95e9622917c5ad388dc73f0a389a76341597731746e54547aa9de8a\",\"dweb:/ipfs/QmPB8qWcRPZaDsASgQpf5a6i2YrZ4TDV3Ebi25Mn9EAdf4\"]},\"test/foundry/Vault/contracts/lib/openzeppelin/ReentrancyGuard.sol\":{\"keccak256\":\"0xe055f8c5d34af6e615892acf192c74d2d83784713bd98b2f8e44751f5ffe2bed\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ac81cac0143f50682c322258a5d5a8ba125140571cbd08e68bd91137001a105d\",\"dweb:/ipfs/QmXC7eHNwLdrnA74NjAAQcwPfDkkk63dkAYhKJ9QYENBNg\"]},\"test/foundry/Vault/contracts/lib/openzeppelin/SafeCast.sol\":{\"keccak256\":\"0xfefa8c6b6aed0ac9df03ac0c4cce2a94da8d8815bb7f1459fef9f93ada8d316d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://27e49304575a12b5cf5cc02d5ce201a405e6f0ce6a84c00cd030bf16310a47a4\",\"dweb:/ipfs/QmS3YvT4cnQDKehJmEnrGzRvjEJhrphFKGuFfPNgZJCHW1\"]},\"test/foundry/Vault/contracts/lib/openzeppelin/SafeERC20.sol\":{\"keccak256\":\"0x8db59e0924c72228865dddcadc07e25507809582c50679c8efec6fa737704aed\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b48616e2731312a5b462cd2a82b57de7e01cc30bab5756fe732905de8693039f\",\"dweb:/ipfs/QmTQovrnEYZBVLyUiFarhRDXj42Y1MhM7kW2tpNuaJ9uGK\"]},\"test/foundry/Vault/contracts/vault/AssetManagers.sol\":{\"keccak256\":\"0xef8f7cdf851eaf8e97e55d4510739b32722de4de07cf069ddfa76ced2c9cd193\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://a55cb695a013f069f9992ee8f7fafe6ce107f71b9f2e499ea62b5ebf8a7380b5\",\"dweb:/ipfs/QmP4Lm5JRsqim6TwQa83MR8x1G7V4obKdigqvUyJfF2w3F\"]},\"test/foundry/Vault/contracts/vault/AssetTransfersHandler.sol\":{\"keccak256\":\"0xf1172a528467c2509d3c99676416f75a69a47b67d7dd1e9ce25ba1405c1eb0b0\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://4898dd5144a8e0329dce6012ef7cbcd8c8368de9aa2aac5e954668dbe9bb7c97\",\"dweb:/ipfs/QmbW1bdmQWfUpZT77BiqtvQaLHuwtGV9Jd4fFtPnjU5JQv\"]},\"test/foundry/Vault/contracts/vault/Fees.sol\":{\"keccak256\":\"0x49b94b186022bf11340fbaf93651bd929dd08cd97aed27c3ffb6e8b7049a6486\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://4c0ee813b001f409d6efa422142dd4f090a1b109821db71c1a4405f6026faf84\",\"dweb:/ipfs/QmZwQ3iSCGGYBWpGczao48gurVio9Uxk2VFLXfdUT6fwVK\"]},\"test/foundry/Vault/contracts/vault/FlashLoans.sol\":{\"keccak256\":\"0x6ccaf32f601c8787b50f823c7be41be9a2797adaeaf26957596cde659ecc55a2\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://d7633c71cfbb549b74067b352f70b0acb51c9017969d771625c7a1aeb5bcc6d9\",\"dweb:/ipfs/QmQmdHTT4X3LfW5FacQ2pmbM6onapPRmqBERdzM7NaeZG9\"]},\"test/foundry/Vault/contracts/vault/PoolBalances.sol\":{\"keccak256\":\"0x57a5cd945d5c38d5fc3257461617f28c1b184f513cd809c5b06b82e9cb44942f\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://9f6db5a16df16e3eab7bb7536f2d01cbc1040c63206e1cdad52617d3ad44c236\",\"dweb:/ipfs/QmSYs5LgDHFMJDiRqSsRXP31piQ3UVqt5tv2ek69Pk9K3p\"]},\"test/foundry/Vault/contracts/vault/PoolRegistry.sol\":{\"keccak256\":\"0xa0aa1b73a0aebbbc26c95c8ed87d4c506ca17e8af2b35cec20a845f6a0fc7cc6\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://d3b83f0909fc416806e86160450775b6bc36cdfd4a134f26312896a9306805da\",\"dweb:/ipfs/Qmb1PHkzNmj6B17Nid3M4V6ZEq2V1KzL3ZBs8LATjPjW2S\"]},\"test/foundry/Vault/contracts/vault/PoolTokens.sol\":{\"keccak256\":\"0xd68fdb5d0d889ebbb8084921492d441792b4eed7164d3ded3cd5f531fe237629\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://ead9be35e41204e1033e3df8b92387aed871db64e884b9ed898ac2efaed7dbc1\",\"dweb:/ipfs/QmPN35WfH1mf51rRQRZenRwiKa4mu9LMRfumW8J4xEUwF3\"]},\"test/foundry/Vault/contracts/vault/ProtocolFeesCollector.sol\":{\"keccak256\":\"0x67a0898b29a356085f4d7a83c52d1c794ebf07b6522133c9b9c7f5faf10d2184\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://2bc6a0209840b9b6b695241122646ce9040716237e05b67cdb5445a961e8b374\",\"dweb:/ipfs/QmfCtZLSbBXqMTZBFfzxx3VFquXbbaFD9tsRNc3y5jXozn\"]},\"test/foundry/Vault/contracts/vault/Swaps.sol\":{\"keccak256\":\"0x486518f80d8aca8f3e55d35db8e18323504fc5fbbcfd8fb3483ff25229eb8d27\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f6d08864ce1558ca792d353c0b5c253061f9f20378d48c50bcc67b9788b1f402\",\"dweb:/ipfs/QmeTKk1qnZVEy5P35KsfBqoNd9hCHwXaSN1oWAFr5e7jJy\"]},\"test/foundry/Vault/contracts/vault/UserBalance.sol\":{\"keccak256\":\"0x4412e4e084ff3be5b80f421a9fdbc72de7e2fc17a054609f40c32c32fdcaefbd\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://54be6ac12e09e574232836c202afdd63852b6a83ffa0e9b949b992351df85625\",\"dweb:/ipfs/QmSnapqMz6nWyReHZ1Mb5ZQQLpzctPbGc86ukKBbDokcTa\"]},\"test/foundry/Vault/contracts/vault/Vault.sol\":{\"keccak256\":\"0xca8fefb90b4dbc611a7b6685504076b7484974ad0b986cf9b98cae0df4a9035b\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://93acde70a7f0731b63eda01f5dac7c84e437552629e3d2367d163a2b9355055c\",\"dweb:/ipfs/Qmbu4FsBwpqxzBgB1iT3xzfn7TiZgHm67BRJichqrPjv26\"]},\"test/foundry/Vault/contracts/vault/VaultAuthorization.sol\":{\"keccak256\":\"0x28355b8b6d7a5c532708cd86e8bf3bc69daf7d43dc868caba55fe2058cb5e2e9\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://1b6b90d24b25aa98efed8b733f7652c7531132db7119cbfff2278b486284213b\",\"dweb:/ipfs/QmdxxvRCSDBJV72d74mXAHG9Wzgvz79KyNsWK8khcyDPwC\"]},\"test/foundry/Vault/contracts/vault/balances/BalanceAllocation.sol\":{\"keccak256\":\"0x20961781812c61dcd2d7f2063598cbe1bdfd806ad9cadb857e3350d2cc132f17\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://8eb6a318e9dc7ae7bd9c24ea5afe8433014674c2d2e8a3b2b5e8b29d47d3469b\",\"dweb:/ipfs/QmaAaCAx1EbjKx1oGGGP2dE6YAxR7Qat4eWZcKiyaq3NyM\"]},\"test/foundry/Vault/contracts/vault/balances/GeneralPoolsBalance.sol\":{\"keccak256\":\"0x534135bd6edee54ffaa785ff26916a2471211c55e718aba84e41961823edfc0c\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://a88a84f22894e1ba76657fb2d8a208507d231390a8e54e4256cecffccffb7fa5\",\"dweb:/ipfs/QmeAvk9riYCcrVxdEZvLcywT7arLmbhiHXb9taErtU84EA\"]},\"test/foundry/Vault/contracts/vault/balances/MinimalSwapInfoPoolsBalance.sol\":{\"keccak256\":\"0x4b002c25bd067d9e1272df67271a0993be4f7f92cae0a0871abc2d52272b10df\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://c97e2d543baeae519be11df6d31120ef620be549bb857af4503e269dd95a4754\",\"dweb:/ipfs/QmZDEC3ZFrzKxT3to4njb4gqEgapHNH5DLPHvk3wBnKTUk\"]},\"test/foundry/Vault/contracts/vault/balances/TwoTokenPoolsBalance.sol\":{\"keccak256\":\"0x2cd5a8f9bee0addefa4e63cb7380f9b133d2e482807603fed931d42e3e1f40f4\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://7a93a5597c1afe33729693e9852804ed27e5b3f333e02d0f42c4027f8c61ca14\",\"dweb:/ipfs/QmNr8EDoyguYNCUis8ES6y5ZTE4eiPw3rgYEjsQppgwTgF\"]},\"test/foundry/Vault/contracts/vault/interfaces/IAsset.sol\":{\"keccak256\":\"0x70ecf1d48c285d78718bd2e159345677038ed8a81c74444bedd6a5c61af9aff6\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://8c7c210e449ea5d284abeaaed82e3bb3c203b57d8b3e5dfb6daedf76eaae31d1\",\"dweb:/ipfs/QmfJWLPhCG6PcHNJMLNDbAM6nd2ZVFCexCXvJ9qQmRaNbn\"]},\"test/foundry/Vault/contracts/vault/interfaces/IAuthorizer.sol\":{\"keccak256\":\"0x792871e208bba1dad291f8d1cffad86f4afa5e2360816bd9c43481f7297155f5\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://af8ab65258e294c8ba0a5feee91208789f641181d225364b02123d38d9eec7d0\",\"dweb:/ipfs/Qmb5HUXRaSrHJafwK1H8XRjcCTnAZMShTvBNhr1ovA1j2m\"]},\"test/foundry/Vault/contracts/vault/interfaces/IBasePool.sol\":{\"keccak256\":\"0x1fdce4de26cad355f4ad93e4a5b66d5a5692c4cd2f0b6c2bb2c3aef3ee49422f\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://fde5dea4a8a65dd019813530ecb4cc857484ff104e80cf18c12d196b0ec74973\",\"dweb:/ipfs/QmPyVrmus8pqbPKofTonEgtWCCsn3j4MXFPsy481f8jav8\"]},\"test/foundry/Vault/contracts/vault/interfaces/IFlashLoanRecipient.sol\":{\"keccak256\":\"0x6886740dcaebfb24a25f914ce5b4299aeab3fe0cc135a1707c0fe4e3d6d02cb6\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6a379297af3e38f7ba24c9c26285382bf5d7e36260590f9d06ce1b573cadd7d4\",\"dweb:/ipfs/QmZWeYKn3UDBPJUrFCHty9g9fHWG46Q4BhhddmyfB1Ugj8\"]},\"test/foundry/Vault/contracts/vault/interfaces/IGeneralPool.sol\":{\"keccak256\":\"0x7f11733a5cd8f81c123c02f79d94ead7b65217021ebddafda10e796a25e1ef41\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://7333060b9ff67e1fe734903d45b0c69ff8308b744f7c2fb8fbf630ae9d589bd6\",\"dweb:/ipfs/Qmf4rZHqsjfKDk5cSp38fv24SS8bAYJxYYQzn63TV6aPCo\"]},\"test/foundry/Vault/contracts/vault/interfaces/IMinimalSwapInfoPool.sol\":{\"keccak256\":\"0x7469919e147c0db8b4f290d310ca3816dec5d3c6cc6b258cf6e0df820a20a179\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://ad47775f388a985c265ef4ca1d1531e4bffa97ef51a03fea9273a2ce8f1ab667\",\"dweb:/ipfs/QmZ4mMm2rPPZ4eLHHUY82vxLLRyKXb5ekchgGvDReryiTS\"]},\"test/foundry/Vault/contracts/vault/interfaces/IPoolSwapStructs.sol\":{\"keccak256\":\"0xe32bcd1cce37949796369b0026cf5cf34eb7273fa50ac239186e8cd4b822e196\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://902110897e813cd71987854a651fe6386a9329dc22660bff8f55a4f95c0003d1\",\"dweb:/ipfs/QmXt4MGtioai8goMrpawg8a88Qwdnk6P31kmPU1zMJmJ1d\"]},\"test/foundry/Vault/contracts/vault/interfaces/IVault.sol\":{\"keccak256\":\"0xc1b1344fcb93f499269d9687514f0a72cc8164cfd3dd3da08a6af1f9e7c60168\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b7bf8d441a1fdbb2c040c1ee781f0c55b7ba28c1c4f829b6876fc301566b83ba\",\"dweb:/ipfs/QmU2C7d4SKT8nwyXr3MEo2FHPgLUNBVoE1ngcrNHTq3h8q\"]},\"test/foundry/Vault/contracts/vault/interfaces/IWETH.sol\":{\"keccak256\":\"0x621a25d9e3f3a4cd9e4493ab330a50a4456b6ea8fc568911fdd5486f78a4d3ab\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://93a5ad052b725c300232952ba067abce53c0b167f0e55c44bfd5ba308d9d542b\",\"dweb:/ipfs/QmdsRjQShAUbA1KGWhoKsvWTR2PffgfXNJBCU5hTmgLJVb\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.7.6+commit.7338295f"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "contract IAuthorizer",
              "name": "authorizer",
              "type": "address"
            },
            {
              "internalType": "contract IWETH",
              "name": "weth",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pauseWindowDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bufferPeriodDuration",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "contract IAuthorizer",
              "name": "newAuthorizer",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "AuthorizerChanged",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ExternalBalanceTransfer",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "contract IFlashLoanRecipient",
              "name": "recipient",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "feeAmount",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "FlashLoan",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "int256",
              "name": "delta",
              "type": "int256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "InternalBalanceChanged",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bool",
              "name": "paused",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "PausedStateChanged",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "liquidityProvider",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "contract IERC20[]",
              "name": "tokens",
              "type": "address[]",
              "indexed": false
            },
            {
              "internalType": "int256[]",
              "name": "deltas",
              "type": "int256[]",
              "indexed": false
            },
            {
              "internalType": "uint256[]",
              "name": "protocolFeeAmounts",
              "type": "uint256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "PoolBalanceChanged",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "assetManager",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "int256",
              "name": "cashDelta",
              "type": "int256",
              "indexed": false
            },
            {
              "internalType": "int256",
              "name": "managedDelta",
              "type": "int256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "PoolBalanceManaged",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "enum IVault.PoolSpecialization",
              "name": "specialization",
              "type": "uint8",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "PoolRegistered",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "relayer",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "RelayerApprovalChanged",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "contract IERC20",
              "name": "tokenIn",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "contract IERC20",
              "name": "tokenOut",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Swap",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "contract IERC20[]",
              "name": "tokens",
              "type": "address[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokensDeregistered",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "contract IERC20[]",
              "name": "tokens",
              "type": "address[]",
              "indexed": false
            },
            {
              "internalType": "address[]",
              "name": "assetManagers",
              "type": "address[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokensRegistered",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "WETH",
          "outputs": [
            {
              "internalType": "contract IWETH",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "enum IVault.SwapKind",
              "name": "kind",
              "type": "uint8"
            },
            {
              "internalType": "struct IVault.BatchSwapStep[]",
              "name": "swaps",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "poolId",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "assetInIndex",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "assetOutIndex",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "userData",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "contract IAsset[]",
              "name": "assets",
              "type": "address[]"
            },
            {
              "internalType": "struct IVault.FundManagement",
              "name": "funds",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "fromInternalBalance",
                  "type": "bool"
                },
                {
                  "internalType": "address payable",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "toInternalBalance",
                  "type": "bool"
                }
              ]
            },
            {
              "internalType": "int256[]",
              "name": "limits",
              "type": "int256[]"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "batchSwap",
          "outputs": [
            {
              "internalType": "int256[]",
              "name": "assetDeltas",
              "type": "int256[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32"
            },
            {
              "internalType": "contract IERC20[]",
              "name": "tokens",
              "type": "address[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "deregisterTokens"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "struct IVault.ExitPoolRequest",
              "name": "request",
              "type": "tuple",
              "components": [
                {
                  "internalType": "contract IAsset[]",
                  "name": "assets",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "minAmountsOut",
                  "type": "uint256[]"
                },
                {
                  "internalType": "bytes",
                  "name": "userData",
                  "type": "bytes"
                },
                {
                  "internalType": "bool",
                  "name": "toInternalBalance",
                  "type": "bool"
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "exitPool"
        },
        {
          "inputs": [
            {
              "internalType": "contract IFlashLoanRecipient",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "contract IERC20[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes",
              "name": "userData",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "flashLoan"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "selector",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getActionId",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getAuthorizer",
          "outputs": [
            {
              "internalType": "contract IAuthorizer",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getDomainSeparator",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "contract IERC20[]",
              "name": "tokens",
              "type": "address[]"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getInternalBalance",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "balances",
              "type": "uint256[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getNextNonce",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getPausedState",
          "outputs": [
            {
              "internalType": "bool",
              "name": "paused",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "pauseWindowEndTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bufferPeriodEndTime",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getPool",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "enum IVault.PoolSpecialization",
              "name": "",
              "type": "uint8"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32"
            },
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getPoolTokenInfo",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "cash",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "managed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastChangeBlock",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "assetManager",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getPoolTokens",
          "outputs": [
            {
              "internalType": "contract IERC20[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "balances",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "lastChangeBlock",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getProtocolFeesCollector",
          "outputs": [
            {
              "internalType": "contract ProtocolFeesCollector",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "relayer",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "hasApprovedRelayer",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "struct IVault.JoinPoolRequest",
              "name": "request",
              "type": "tuple",
              "components": [
                {
                  "internalType": "contract IAsset[]",
                  "name": "assets",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "maxAmountsIn",
                  "type": "uint256[]"
                },
                {
                  "internalType": "bytes",
                  "name": "userData",
                  "type": "bytes"
                },
                {
                  "internalType": "bool",
                  "name": "fromInternalBalance",
                  "type": "bool"
                }
              ]
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "joinPool"
        },
        {
          "inputs": [
            {
              "internalType": "struct IVault.PoolBalanceOp[]",
              "name": "ops",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "enum IVault.PoolBalanceOpKind",
                  "name": "kind",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "poolId",
                  "type": "bytes32"
                },
                {
                  "internalType": "contract IERC20",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "managePoolBalance"
        },
        {
          "inputs": [
            {
              "internalType": "struct IVault.UserBalanceOp[]",
              "name": "ops",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "enum IVault.UserBalanceOpKind",
                  "name": "kind",
                  "type": "uint8"
                },
                {
                  "internalType": "contract IAsset",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "address payable",
                  "name": "recipient",
                  "type": "address"
                }
              ]
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "manageUserBalance"
        },
        {
          "inputs": [
            {
              "internalType": "enum IVault.SwapKind",
              "name": "kind",
              "type": "uint8"
            },
            {
              "internalType": "struct IVault.BatchSwapStep[]",
              "name": "swaps",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "poolId",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "assetInIndex",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "assetOutIndex",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "userData",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "contract IAsset[]",
              "name": "assets",
              "type": "address[]"
            },
            {
              "internalType": "struct IVault.FundManagement",
              "name": "funds",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "fromInternalBalance",
                  "type": "bool"
                },
                {
                  "internalType": "address payable",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "toInternalBalance",
                  "type": "bool"
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "queryBatchSwap",
          "outputs": [
            {
              "internalType": "int256[]",
              "name": "",
              "type": "int256[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "enum IVault.PoolSpecialization",
              "name": "specialization",
              "type": "uint8"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "registerPool",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32"
            },
            {
              "internalType": "contract IERC20[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "assetManagers",
              "type": "address[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "registerTokens"
        },
        {
          "inputs": [
            {
              "internalType": "contract IAuthorizer",
              "name": "newAuthorizer",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setAuthorizer"
        },
        {
          "inputs": [
            {
              "internalType": "bool",
              "name": "paused",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setPaused"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "relayer",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setRelayerApproval"
        },
        {
          "inputs": [
            {
              "internalType": "struct IVault.SingleSwap",
              "name": "singleSwap",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "poolId",
                  "type": "bytes32"
                },
                {
                  "internalType": "enum IVault.SwapKind",
                  "name": "kind",
                  "type": "uint8"
                },
                {
                  "internalType": "contract IAsset",
                  "name": "assetIn",
                  "type": "address"
                },
                {
                  "internalType": "contract IAsset",
                  "name": "assetOut",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "userData",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "struct IVault.FundManagement",
              "name": "funds",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "fromInternalBalance",
                  "type": "bool"
                },
                {
                  "internalType": "address payable",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "toInternalBalance",
                  "type": "bool"
                }
              ]
            },
            {
              "internalType": "uint256",
              "name": "limit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "swap",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "amountCalculated",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "payable",
          "type": "receive"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "WETH()": {
            "details": "Returns the Vault's WETH instance."
          },
          "batchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool),int256[],uint256)": {
            "details": "Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either the amount of tokens sent to or received from the Pool, depending on the `kind` value. Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at the same index in the `assets` array. Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or `amountOut` depending on the swap kind. Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`. The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses, or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault. Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies the minimum or maximum amount of each token the vault is allowed to transfer. `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the equivalent `swap` call. Emits `Swap` events."
          },
          "deregisterTokens(bytes32,address[])": {
            "details": "Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract. Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens must be deregistered in the same `deregisterTokens` call. A deregistered token can be re-registered later on, possibly with a different Asset Manager. Emits a `TokensDeregistered` event."
          },
          "exitPool(bytes32,address,address,(address[],uint256[],bytes,bool))": {
            "details": "Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see `getPoolTokenInfo`). If the caller is not `sender`, it must be an authorized relayer for them. The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault: it just enforces these minimums. If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit. `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final `assets` array might not be sorted. Pools with no registered tokens cannot be exited. If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise, an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to do so will trigger a revert. `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the `tokens` array. This array must match the Pool's registered tokens. This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement their own custom logic. This typically requires additional information from the user (such as the expected number of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and passed directly to the Pool's contract. Emits a `PoolBalanceChanged` event."
          },
          "flashLoan(address,address[],uint256[],bytes)": {
            "details": "Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it, and then reverting unless the tokens plus a proportional protocol fee have been returned. The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount for each token contract. `tokens` must be sorted in ascending order. The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the `receiveFlashLoan` call. Emits `FlashLoan` events."
          },
          "getActionId(bytes4)": {
            "details": "Returns the action identifier associated with the external function described by `selector`."
          },
          "getAuthorizer()": {
            "details": "Returns the Vault's Authorizer."
          },
          "getDomainSeparator()": {
            "details": "Returns the EIP712 domain separator."
          },
          "getInternalBalance(address,address[])": {
            "details": "Returns `user`'s Internal Balance for a set of tokens."
          },
          "getNextNonce(address)": {
            "details": "Returns the next nonce used by an address to sign messages."
          },
          "getPausedState()": {
            "details": "Returns the current contract pause status, as well as the end times of the Pause Window and Buffer Period."
          },
          "getPool(bytes32)": {
            "details": "Returns a Pool's contract address and specialization setting."
          },
          "getPoolTokenInfo(bytes32,address)": {
            "details": "Returns detailed information for a Pool's registered token. `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token` equals the sum of `cash` and `managed`. Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`, `managed` or `total` balance to be greater than 2^112 - 1. `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a change for this purpose, and will update `lastChangeBlock`. `assetManager` is the Pool's token Asset Manager."
          },
          "getPoolTokens(bytes32)": {
            "details": "Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of the tokens' `balances` changed. The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order. If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same order as passed to `registerTokens`. Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo` instead."
          },
          "getProtocolFeesCollector()": {
            "details": "Returns the current protocol fee module."
          },
          "hasApprovedRelayer(address,address)": {
            "details": "Returns true if `user` has approved `relayer` to act as a relayer for them."
          },
          "joinPool(bytes32,address,address,(address[],uint256[],bytes,bool))": {
            "details": "Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized Pool shares. If the caller is not `sender`, it must be an authorized relayer for them. The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces these maximums. If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent back to the caller (not the sender, which is important for relayers). `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final `assets` array might not be sorted. Pools with no registered tokens cannot be joined. If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be withdrawn from Internal Balance: attempting to do so will trigger a revert. This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement their own custom logic. This typically requires additional information from the user (such as the expected number of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed directly to the Pool's contract, as is `recipient`. Emits a `PoolBalanceChanged` event."
          },
          "managePoolBalance((uint8,bytes32,address,uint256)[])": {
            "details": "Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates. Pool Balance management features batching, which means a single contract call can be used to perform multiple operations of different kinds, with different Pools and tokens, at once. For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`."
          },
          "manageUserBalance((uint8,address,uint256,address,address)[])": {
            "details": "Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer) and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as it lets integrators reuse a user's Vault allowance. For each operation, if the caller is not `sender`, it must be an authorized relayer for them."
          },
          "queryBatchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool))": {
            "details": "Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result. Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH) the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it receives are the same that an equivalent `batchSwap` call would receive. Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct. This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens, approve them for the Vault, or even know a user's address. Note that this function is not 'view' (due to implementation details): the client code must explicitly execute eth_call instead of eth_sendTransaction."
          },
          "registerPool(uint8)": {
            "details": "Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be changed. The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`, depending on the chosen specialization setting. This contract is known as the Pool's contract. Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words, multiple Pools may share the same contract. Emits a `PoolRegistered` event."
          },
          "registerTokens(bytes32,address[],address[])": {
            "details": "Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract. Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens, exit by receiving registered tokens, and can only swap registered tokens. Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in ascending order. The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`, depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore expected to be highly secured smart contracts with sound design principles, and the decision to register an Asset Manager should not be made lightly. Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset Manager is set, it cannot be changed except by deregistering the associated token and registering again with a different Asset Manager. Emits a `TokensRegistered` event."
          },
          "setAuthorizer(address)": {
            "details": "Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this. Emits an `AuthorizerChanged` event."
          },
          "setPaused(bool)": {
            "details": "Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an error in some part of the system. The Vault can only be paused during an initial time period, after which pausing is forever disabled. While the contract is paused, the following features are disabled: - depositing and transferring internal balance - transferring external balance (using the Vault's allowance) - swaps - joining Pools - Asset Manager interactions Internal Balance can still be withdrawn, and Pools exited."
          },
          "setRelayerApproval(address,address,bool)": {
            "details": "Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise. Emits a `RelayerApprovalChanged` event."
          },
          "swap((bytes32,uint8,address,address,uint256,bytes),(address,bool,address,bool),uint256,uint256)": {
            "details": "Performs a swap with a single Pool. If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens taken from the Pool, which must be greater than or equal to `limit`. If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens sent to the Pool, which must be less than or equal to `limit`. Internal Balance usage and the recipient are determined by the `funds` struct. Emits a `Swap` event."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@chainlink/=node_modules/@chainlink/",
        "@ensdomains/=node_modules/@ensdomains/",
        "@eth-optimism/=node_modules/@eth-optimism/",
        "@openzeppelin/=node_modules/@openzeppelin/",
        "@prb/test/=lib/unchecked-counter/lib/prb-test/src/",
        "@uniswap/=node_modules/@uniswap/",
        "base64-sol/=node_modules/base64-sol/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "forge-std/=lib/forge-std/src/",
        "hardhat/=node_modules/hardhat/",
        "prb-test/=lib/unchecked-counter/lib/prb-test/src/",
        "solady/=node_modules/solady/",
        "src/=lib/unchecked-counter/src/",
        "unchecked-counter/=lib/unchecked-counter/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "test/foundry/Vault/contracts/vault/Vault.sol": "Vault"
      },
      "libraries": {}
    },
    "sources": {
      "test/foundry/Vault/contracts/lib/helpers/AssetHelpers.sol": {
        "keccak256": "0xf70e781d7e1469aa57f4622a3d5e1ee9fcb8079c0d256405faf35b9cb93933da",
        "urls": [
          "bzz-raw://90ed9f530cad97a64fe211f99461a1d24cb8c5238f3ed35cdda3c239bb92dd7b",
          "dweb:/ipfs/Qmedw2tqsrDVSNUiJJqAqUKhd53AjKJrj1C7XLtfqWwWri"
        ],
        "license": "GPL-3.0-or-later"
      },
      "test/foundry/Vault/contracts/lib/helpers/Authentication.sol": {
        "keccak256": "0xea892213ec2967f53e26a0dd833bde01e4d9b6e49dd91e6c59ff00044f83c28d",
        "urls": [
          "bzz-raw://0bc36f6335254bef8a4515e898a7ce5b3f36350e4d7d1dd45a0aa3d1356fdae5",
          "dweb:/ipfs/QmRRatu77hTPReUnRidk3wjgEMyGYVgh9wDrkiMiKmtWtR"
        ],
        "license": "GPL-3.0-or-later"
      },
      "test/foundry/Vault/contracts/lib/helpers/BalancerErrors.sol": {
        "keccak256": "0xcf81c3938bee334cb8cb88603f59768754c297e2bce76ab8cc2a4b5877146219",
        "urls": [
          "bzz-raw://49273bc36bde574f90c23d0bf033455f9f069e106e7fdb0d1040ec87f96dc19b",
          "dweb:/ipfs/QmUQt4QisHsBdh7SELzkTcfw9okBuxFCHeipiEzYCq3Vnr"
        ],
        "license": "GPL-3.0-or-later"
      },
      "test/foundry/Vault/contracts/lib/helpers/IAuthentication.sol": {
        "keccak256": "0xfd687ced203d2c6da8189792e1719a5182faf45956129388b231ee76740b99a6",
        "urls": [
          "bzz-raw://581aa664e84e950cd9bb747bf6022867db63c64f67d9556a86b5f04f871c2c5d",
          "dweb:/ipfs/QmRa6EEV3LXJaHzymztiLqyeAzmE4jAgBEEi3mi8R5cfFa"
        ],
        "license": "GPL-3.0-or-later"
      },
      "test/foundry/Vault/contracts/lib/helpers/ISignaturesValidator.sol": {
        "keccak256": "0x2fe46b13b7c8bfc6f5c539c0b73d6325813f383f551b71fb6bca8dafd06964e1",
        "urls": [
          "bzz-raw://8e651ae7a3a3652c8bb7aaa42c2cce5924310df62a923d9ec50ddb9c850d2995",
          "dweb:/ipfs/QmTHz9y18L5FD7v9GcvxGWSLJuin2KCUEYoARTgz8njce8"
        ],
        "license": "GPL-3.0-or-later"
      },
      "test/foundry/Vault/contracts/lib/helpers/ITemporarilyPausable.sol": {
        "keccak256": "0xb3e5b7c63f80b80ef3f0138eac56c397a439bf6b667fc06d5061aa869828b562",
        "urls": [
          "bzz-raw://978d66fba0721a1a67e29a32eaddab8d1f92ab2fb2d611724ea8d0d3c9b0e95b",
          "dweb:/ipfs/QmfG4foZvx3NDZao7d4VvGzL4Uxtk8VWNJXvgo9fiAJxZv"
        ],
        "license": "GPL-3.0-or-later"
      },
      "test/foundry/Vault/contracts/lib/helpers/InputHelpers.sol": {
        "keccak256": "0xd58eb6851269729d3ea0d739f812c67c3e750b046ef1653ae12134e668925d28",
        "urls": [
          "bzz-raw://9cb5db2184b915b6640593f2e0840de1c39144b1d692f5f1bb13958b28647d7c",
          "dweb:/ipfs/QmbdfxJJo5hwJMG1Cvi2DoBthwENVkdAGJ6JDAWP8JLzW9"
        ],
        "license": "GPL-3.0-or-later"
      },
      "test/foundry/Vault/contracts/lib/helpers/SignaturesValidator.sol": {
        "keccak256": "0x1b370c5532ea1439d3c2d66ab993cc4851921d9aa38f0639a81a2d04113077dd",
        "urls": [
          "bzz-raw://5d7fe92b224f90cb49204f04db3e71103eeea885df8562a9e886a73f6acbeea9",
          "dweb:/ipfs/QmXb4NEm8DAjUecZ3qKn9QY2vencdpdEE6ytfmLi4egT3u"
        ],
        "license": "GPL-3.0-or-later"
      },
      "test/foundry/Vault/contracts/lib/helpers/TemporarilyPausable.sol": {
        "keccak256": "0xd20f7cbc60072fc73aa137ce644777195de3143bc6ce910c43501647f3ce6c60",
        "urls": [
          "bzz-raw://b3c5a3589b0d85a051977e77e1fe1e9b41c4d005a8a4ac3156995e9fddd9d926",
          "dweb:/ipfs/QmZwwhQQFL9tK1vNBTKB4E5ZGBdwfgGrgv2fjHgBaZTENi"
        ],
        "license": "GPL-3.0-or-later"
      },
      "test/foundry/Vault/contracts/lib/math/FixedPoint.sol": {
        "keccak256": "0x38720507bb6c838df83953d1ffa88b97d0e06baefa0e3e387303cb8a090a49f5",
        "urls": [
          "bzz-raw://fd74d7d2f8881dcc5a3aa4ce732f84b2cbb15de117e1fc4735a3d58a4062524a",
          "dweb:/ipfs/QmSYxuM8HhMn3oPxZ66PbukDikGPkHs3FLD7miFbky2EfW"
        ],
        "license": "GPL-3.0-or-later"
      },
      "test/foundry/Vault/contracts/lib/math/LogExpMath.sol": {
        "keccak256": "0x6ee640facad86b1cb4577f019dc06123bfb8259efde7a2b9be27aff4dab29c4a",
        "urls": [
          "bzz-raw://c8a012aacc16d8ba9d0c0c0dfd2dcd17a86c676199ec2bb295c6c6487fe48114",
          "dweb:/ipfs/QmbLK2o3nyn3Ub2SBEtiTMktnV62SA7uQ8PRjMPzSx4GwT"
        ],
        "license": "GPL-3.0-or-later"
      },
      "test/foundry/Vault/contracts/lib/math/Math.sol": {
        "keccak256": "0x98cf5d1e9b91be5a4315c1aa7bf6480e097113c5f9a9200c92d123bc4ece9ec4",
        "urls": [
          "bzz-raw://9617a16524a7e9b82f6962f76ef2d8a47d14285c001d4bb5e88574cb33e0ebe3",
          "dweb:/ipfs/QmRBvV1X5FEsyxDAfMPZ4GNp7HvfK5gaKaLpp6o1EYwfFF"
        ],
        "license": "MIT"
      },
      "test/foundry/Vault/contracts/lib/openzeppelin/Address.sol": {
        "keccak256": "0x5f83465783b239828f83c626bae1ac944cfff074c8919c245d14b208bcf317d5",
        "urls": [
          "bzz-raw://051f7911c13fc63c6d335fb09b17a1540a6f97df76b095e795665ab5601e021b",
          "dweb:/ipfs/QmeGCDpp5GN9e3x56dDhNfkscYLSoTTJrqG5i8KT2t2zeW"
        ],
        "license": "MIT"
      },
      "test/foundry/Vault/contracts/lib/openzeppelin/EIP712.sol": {
        "keccak256": "0x0cf3ec5d6130aac057e69df14b1ff87baf9c6c2cb13bc545952def004e629ac0",
        "urls": [
          "bzz-raw://446419367266d271bf6953e4ae0423356a5cc4717f7b9a5a0532436de4be2d70",
          "dweb:/ipfs/QmPV56wHs1Mqif6et6TYrhZ2QYPNmiVTmXWvQMhqWfKLk9"
        ],
        "license": "MIT"
      },
      "test/foundry/Vault/contracts/lib/openzeppelin/EnumerableMap.sol": {
        "keccak256": "0x0e7bb50a1095a2a000328ef2243fca7b556ebccfe594f4466d0853f56ed07755",
        "urls": [
          "bzz-raw://9d9a50c8d7e224f49ef1b0e766d26c98671054b8f3f2994f5972c7c0fff9f4c7",
          "dweb:/ipfs/QmY1o4e41x2xaEYEDvi5CdA47GkbH4Krbf7a6XsdZ2faKy"
        ],
        "license": "MIT"
      },
      "test/foundry/Vault/contracts/lib/openzeppelin/EnumerableSet.sol": {
        "keccak256": "0x92673c683363abc0c7e5f39d4bc26779f0c1292bf7a61b03155e0c3d60f25718",
        "urls": [
          "bzz-raw://aa2e27e0634063bbf5b16da5767a56a006a2c0bdb28ad0ab6cc81f1a0c328e3f",
          "dweb:/ipfs/Qmb43fT3hGqsxgX9iHgtqFA2NVGxYtPGgwmLesVLpd1nXG"
        ],
        "license": "MIT"
      },
      "test/foundry/Vault/contracts/lib/openzeppelin/IERC20.sol": {
        "keccak256": "0xd828a935a72a6d182912abba290e4debb8c684c36fd756088f7acb30e0b2bb76",
        "urls": [
          "bzz-raw://1e6ac013b95e9622917c5ad388dc73f0a389a76341597731746e54547aa9de8a",
          "dweb:/ipfs/QmPB8qWcRPZaDsASgQpf5a6i2YrZ4TDV3Ebi25Mn9EAdf4"
        ],
        "license": "MIT"
      },
      "test/foundry/Vault/contracts/lib/openzeppelin/ReentrancyGuard.sol": {
        "keccak256": "0xe055f8c5d34af6e615892acf192c74d2d83784713bd98b2f8e44751f5ffe2bed",
        "urls": [
          "bzz-raw://ac81cac0143f50682c322258a5d5a8ba125140571cbd08e68bd91137001a105d",
          "dweb:/ipfs/QmXC7eHNwLdrnA74NjAAQcwPfDkkk63dkAYhKJ9QYENBNg"
        ],
        "license": "MIT"
      },
      "test/foundry/Vault/contracts/lib/openzeppelin/SafeCast.sol": {
        "keccak256": "0xfefa8c6b6aed0ac9df03ac0c4cce2a94da8d8815bb7f1459fef9f93ada8d316d",
        "urls": [
          "bzz-raw://27e49304575a12b5cf5cc02d5ce201a405e6f0ce6a84c00cd030bf16310a47a4",
          "dweb:/ipfs/QmS3YvT4cnQDKehJmEnrGzRvjEJhrphFKGuFfPNgZJCHW1"
        ],
        "license": "MIT"
      },
      "test/foundry/Vault/contracts/lib/openzeppelin/SafeERC20.sol": {
        "keccak256": "0x8db59e0924c72228865dddcadc07e25507809582c50679c8efec6fa737704aed",
        "urls": [
          "bzz-raw://b48616e2731312a5b462cd2a82b57de7e01cc30bab5756fe732905de8693039f",
          "dweb:/ipfs/QmTQovrnEYZBVLyUiFarhRDXj42Y1MhM7kW2tpNuaJ9uGK"
        ],
        "license": "MIT"
      },
      "test/foundry/Vault/contracts/vault/AssetManagers.sol": {
        "keccak256": "0xef8f7cdf851eaf8e97e55d4510739b32722de4de07cf069ddfa76ced2c9cd193",
        "urls": [
          "bzz-raw://a55cb695a013f069f9992ee8f7fafe6ce107f71b9f2e499ea62b5ebf8a7380b5",
          "dweb:/ipfs/QmP4Lm5JRsqim6TwQa83MR8x1G7V4obKdigqvUyJfF2w3F"
        ],
        "license": "GPL-3.0-or-later"
      },
      "test/foundry/Vault/contracts/vault/AssetTransfersHandler.sol": {
        "keccak256": "0xf1172a528467c2509d3c99676416f75a69a47b67d7dd1e9ce25ba1405c1eb0b0",
        "urls": [
          "bzz-raw://4898dd5144a8e0329dce6012ef7cbcd8c8368de9aa2aac5e954668dbe9bb7c97",
          "dweb:/ipfs/QmbW1bdmQWfUpZT77BiqtvQaLHuwtGV9Jd4fFtPnjU5JQv"
        ],
        "license": "GPL-3.0-or-later"
      },
      "test/foundry/Vault/contracts/vault/Fees.sol": {
        "keccak256": "0x49b94b186022bf11340fbaf93651bd929dd08cd97aed27c3ffb6e8b7049a6486",
        "urls": [
          "bzz-raw://4c0ee813b001f409d6efa422142dd4f090a1b109821db71c1a4405f6026faf84",
          "dweb:/ipfs/QmZwQ3iSCGGYBWpGczao48gurVio9Uxk2VFLXfdUT6fwVK"
        ],
        "license": "GPL-3.0-or-later"
      },
      "test/foundry/Vault/contracts/vault/FlashLoans.sol": {
        "keccak256": "0x6ccaf32f601c8787b50f823c7be41be9a2797adaeaf26957596cde659ecc55a2",
        "urls": [
          "bzz-raw://d7633c71cfbb549b74067b352f70b0acb51c9017969d771625c7a1aeb5bcc6d9",
          "dweb:/ipfs/QmQmdHTT4X3LfW5FacQ2pmbM6onapPRmqBERdzM7NaeZG9"
        ],
        "license": "GPL-3.0-or-later"
      },
      "test/foundry/Vault/contracts/vault/PoolBalances.sol": {
        "keccak256": "0x57a5cd945d5c38d5fc3257461617f28c1b184f513cd809c5b06b82e9cb44942f",
        "urls": [
          "bzz-raw://9f6db5a16df16e3eab7bb7536f2d01cbc1040c63206e1cdad52617d3ad44c236",
          "dweb:/ipfs/QmSYs5LgDHFMJDiRqSsRXP31piQ3UVqt5tv2ek69Pk9K3p"
        ],
        "license": "GPL-3.0-or-later"
      },
      "test/foundry/Vault/contracts/vault/PoolRegistry.sol": {
        "keccak256": "0xa0aa1b73a0aebbbc26c95c8ed87d4c506ca17e8af2b35cec20a845f6a0fc7cc6",
        "urls": [
          "bzz-raw://d3b83f0909fc416806e86160450775b6bc36cdfd4a134f26312896a9306805da",
          "dweb:/ipfs/Qmb1PHkzNmj6B17Nid3M4V6ZEq2V1KzL3ZBs8LATjPjW2S"
        ],
        "license": "GPL-3.0-or-later"
      },
      "test/foundry/Vault/contracts/vault/PoolTokens.sol": {
        "keccak256": "0xd68fdb5d0d889ebbb8084921492d441792b4eed7164d3ded3cd5f531fe237629",
        "urls": [
          "bzz-raw://ead9be35e41204e1033e3df8b92387aed871db64e884b9ed898ac2efaed7dbc1",
          "dweb:/ipfs/QmPN35WfH1mf51rRQRZenRwiKa4mu9LMRfumW8J4xEUwF3"
        ],
        "license": "GPL-3.0-or-later"
      },
      "test/foundry/Vault/contracts/vault/ProtocolFeesCollector.sol": {
        "keccak256": "0x67a0898b29a356085f4d7a83c52d1c794ebf07b6522133c9b9c7f5faf10d2184",
        "urls": [
          "bzz-raw://2bc6a0209840b9b6b695241122646ce9040716237e05b67cdb5445a961e8b374",
          "dweb:/ipfs/QmfCtZLSbBXqMTZBFfzxx3VFquXbbaFD9tsRNc3y5jXozn"
        ],
        "license": "GPL-3.0-or-later"
      },
      "test/foundry/Vault/contracts/vault/Swaps.sol": {
        "keccak256": "0x486518f80d8aca8f3e55d35db8e18323504fc5fbbcfd8fb3483ff25229eb8d27",
        "urls": [
          "bzz-raw://f6d08864ce1558ca792d353c0b5c253061f9f20378d48c50bcc67b9788b1f402",
          "dweb:/ipfs/QmeTKk1qnZVEy5P35KsfBqoNd9hCHwXaSN1oWAFr5e7jJy"
        ],
        "license": "GPL-3.0-or-later"
      },
      "test/foundry/Vault/contracts/vault/UserBalance.sol": {
        "keccak256": "0x4412e4e084ff3be5b80f421a9fdbc72de7e2fc17a054609f40c32c32fdcaefbd",
        "urls": [
          "bzz-raw://54be6ac12e09e574232836c202afdd63852b6a83ffa0e9b949b992351df85625",
          "dweb:/ipfs/QmSnapqMz6nWyReHZ1Mb5ZQQLpzctPbGc86ukKBbDokcTa"
        ],
        "license": "GPL-3.0-or-later"
      },
      "test/foundry/Vault/contracts/vault/Vault.sol": {
        "keccak256": "0xca8fefb90b4dbc611a7b6685504076b7484974ad0b986cf9b98cae0df4a9035b",
        "urls": [
          "bzz-raw://93acde70a7f0731b63eda01f5dac7c84e437552629e3d2367d163a2b9355055c",
          "dweb:/ipfs/Qmbu4FsBwpqxzBgB1iT3xzfn7TiZgHm67BRJichqrPjv26"
        ],
        "license": "GPL-3.0-or-later"
      },
      "test/foundry/Vault/contracts/vault/VaultAuthorization.sol": {
        "keccak256": "0x28355b8b6d7a5c532708cd86e8bf3bc69daf7d43dc868caba55fe2058cb5e2e9",
        "urls": [
          "bzz-raw://1b6b90d24b25aa98efed8b733f7652c7531132db7119cbfff2278b486284213b",
          "dweb:/ipfs/QmdxxvRCSDBJV72d74mXAHG9Wzgvz79KyNsWK8khcyDPwC"
        ],
        "license": "GPL-3.0-or-later"
      },
      "test/foundry/Vault/contracts/vault/balances/BalanceAllocation.sol": {
        "keccak256": "0x20961781812c61dcd2d7f2063598cbe1bdfd806ad9cadb857e3350d2cc132f17",
        "urls": [
          "bzz-raw://8eb6a318e9dc7ae7bd9c24ea5afe8433014674c2d2e8a3b2b5e8b29d47d3469b",
          "dweb:/ipfs/QmaAaCAx1EbjKx1oGGGP2dE6YAxR7Qat4eWZcKiyaq3NyM"
        ],
        "license": "GPL-3.0-or-later"
      },
      "test/foundry/Vault/contracts/vault/balances/GeneralPoolsBalance.sol": {
        "keccak256": "0x534135bd6edee54ffaa785ff26916a2471211c55e718aba84e41961823edfc0c",
        "urls": [
          "bzz-raw://a88a84f22894e1ba76657fb2d8a208507d231390a8e54e4256cecffccffb7fa5",
          "dweb:/ipfs/QmeAvk9riYCcrVxdEZvLcywT7arLmbhiHXb9taErtU84EA"
        ],
        "license": "GPL-3.0-or-later"
      },
      "test/foundry/Vault/contracts/vault/balances/MinimalSwapInfoPoolsBalance.sol": {
        "keccak256": "0x4b002c25bd067d9e1272df67271a0993be4f7f92cae0a0871abc2d52272b10df",
        "urls": [
          "bzz-raw://c97e2d543baeae519be11df6d31120ef620be549bb857af4503e269dd95a4754",
          "dweb:/ipfs/QmZDEC3ZFrzKxT3to4njb4gqEgapHNH5DLPHvk3wBnKTUk"
        ],
        "license": "GPL-3.0-or-later"
      },
      "test/foundry/Vault/contracts/vault/balances/TwoTokenPoolsBalance.sol": {
        "keccak256": "0x2cd5a8f9bee0addefa4e63cb7380f9b133d2e482807603fed931d42e3e1f40f4",
        "urls": [
          "bzz-raw://7a93a5597c1afe33729693e9852804ed27e5b3f333e02d0f42c4027f8c61ca14",
          "dweb:/ipfs/QmNr8EDoyguYNCUis8ES6y5ZTE4eiPw3rgYEjsQppgwTgF"
        ],
        "license": "GPL-3.0-or-later"
      },
      "test/foundry/Vault/contracts/vault/interfaces/IAsset.sol": {
        "keccak256": "0x70ecf1d48c285d78718bd2e159345677038ed8a81c74444bedd6a5c61af9aff6",
        "urls": [
          "bzz-raw://8c7c210e449ea5d284abeaaed82e3bb3c203b57d8b3e5dfb6daedf76eaae31d1",
          "dweb:/ipfs/QmfJWLPhCG6PcHNJMLNDbAM6nd2ZVFCexCXvJ9qQmRaNbn"
        ],
        "license": "GPL-3.0-or-later"
      },
      "test/foundry/Vault/contracts/vault/interfaces/IAuthorizer.sol": {
        "keccak256": "0x792871e208bba1dad291f8d1cffad86f4afa5e2360816bd9c43481f7297155f5",
        "urls": [
          "bzz-raw://af8ab65258e294c8ba0a5feee91208789f641181d225364b02123d38d9eec7d0",
          "dweb:/ipfs/Qmb5HUXRaSrHJafwK1H8XRjcCTnAZMShTvBNhr1ovA1j2m"
        ],
        "license": "GPL-3.0-or-later"
      },
      "test/foundry/Vault/contracts/vault/interfaces/IBasePool.sol": {
        "keccak256": "0x1fdce4de26cad355f4ad93e4a5b66d5a5692c4cd2f0b6c2bb2c3aef3ee49422f",
        "urls": [
          "bzz-raw://fde5dea4a8a65dd019813530ecb4cc857484ff104e80cf18c12d196b0ec74973",
          "dweb:/ipfs/QmPyVrmus8pqbPKofTonEgtWCCsn3j4MXFPsy481f8jav8"
        ],
        "license": "GPL-3.0-or-later"
      },
      "test/foundry/Vault/contracts/vault/interfaces/IFlashLoanRecipient.sol": {
        "keccak256": "0x6886740dcaebfb24a25f914ce5b4299aeab3fe0cc135a1707c0fe4e3d6d02cb6",
        "urls": [
          "bzz-raw://6a379297af3e38f7ba24c9c26285382bf5d7e36260590f9d06ce1b573cadd7d4",
          "dweb:/ipfs/QmZWeYKn3UDBPJUrFCHty9g9fHWG46Q4BhhddmyfB1Ugj8"
        ],
        "license": "GPL-3.0-or-later"
      },
      "test/foundry/Vault/contracts/vault/interfaces/IGeneralPool.sol": {
        "keccak256": "0x7f11733a5cd8f81c123c02f79d94ead7b65217021ebddafda10e796a25e1ef41",
        "urls": [
          "bzz-raw://7333060b9ff67e1fe734903d45b0c69ff8308b744f7c2fb8fbf630ae9d589bd6",
          "dweb:/ipfs/Qmf4rZHqsjfKDk5cSp38fv24SS8bAYJxYYQzn63TV6aPCo"
        ],
        "license": "GPL-3.0-or-later"
      },
      "test/foundry/Vault/contracts/vault/interfaces/IMinimalSwapInfoPool.sol": {
        "keccak256": "0x7469919e147c0db8b4f290d310ca3816dec5d3c6cc6b258cf6e0df820a20a179",
        "urls": [
          "bzz-raw://ad47775f388a985c265ef4ca1d1531e4bffa97ef51a03fea9273a2ce8f1ab667",
          "dweb:/ipfs/QmZ4mMm2rPPZ4eLHHUY82vxLLRyKXb5ekchgGvDReryiTS"
        ],
        "license": "GPL-3.0-or-later"
      },
      "test/foundry/Vault/contracts/vault/interfaces/IPoolSwapStructs.sol": {
        "keccak256": "0xe32bcd1cce37949796369b0026cf5cf34eb7273fa50ac239186e8cd4b822e196",
        "urls": [
          "bzz-raw://902110897e813cd71987854a651fe6386a9329dc22660bff8f55a4f95c0003d1",
          "dweb:/ipfs/QmXt4MGtioai8goMrpawg8a88Qwdnk6P31kmPU1zMJmJ1d"
        ],
        "license": "GPL-3.0-or-later"
      },
      "test/foundry/Vault/contracts/vault/interfaces/IVault.sol": {
        "keccak256": "0xc1b1344fcb93f499269d9687514f0a72cc8164cfd3dd3da08a6af1f9e7c60168",
        "urls": [
          "bzz-raw://b7bf8d441a1fdbb2c040c1ee781f0c55b7ba28c1c4f829b6876fc301566b83ba",
          "dweb:/ipfs/QmU2C7d4SKT8nwyXr3MEo2FHPgLUNBVoE1ngcrNHTq3h8q"
        ],
        "license": "GPL-3.0-or-later"
      },
      "test/foundry/Vault/contracts/vault/interfaces/IWETH.sol": {
        "keccak256": "0x621a25d9e3f3a4cd9e4493ab330a50a4456b6ea8fc568911fdd5486f78a4d3ab",
        "urls": [
          "bzz-raw://93a5ad052b725c300232952ba067abce53c0b167f0e55c44bfd5ba308d9d542b",
          "dweb:/ipfs/QmdsRjQShAUbA1KGWhoKsvWTR2PffgfXNJBCU5hTmgLJVb"
        ],
        "license": "GPL-3.0-or-later"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3805,
        "contract": "test/foundry/Vault/contracts/vault/Vault.sol:Vault",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 9499,
        "contract": "test/foundry/Vault/contracts/vault/Vault.sol:Vault",
        "label": "_generalPoolsBalances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(IERC20ToBytes32Map)3177_storage)"
      },
      {
        "astId": 716,
        "contract": "test/foundry/Vault/contracts/vault/Vault.sol:Vault",
        "label": "_nextNonce",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 967,
        "contract": "test/foundry/Vault/contracts/vault/Vault.sol:Vault",
        "label": "_paused",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 8639,
        "contract": "test/foundry/Vault/contracts/vault/Vault.sol:Vault",
        "label": "_authorizer",
        "offset": 1,
        "slot": "3",
        "type": "t_contract(IAuthorizer)11086"
      },
      {
        "astId": 8645,
        "contract": "test/foundry/Vault/contracts/vault/Vault.sol:Vault",
        "label": "_approvedRelayers",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 5769,
        "contract": "test/foundry/Vault/contracts/vault/Vault.sol:Vault",
        "label": "_isPoolRegistered",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 5771,
        "contract": "test/foundry/Vault/contracts/vault/Vault.sol:Vault",
        "label": "_nextPoolNonce",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 9915,
        "contract": "test/foundry/Vault/contracts/vault/Vault.sol:Vault",
        "label": "_minimalSwapInfoPoolsBalances",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_mapping(t_contract(IERC20)3793,t_bytes32))"
      },
      {
        "astId": 9919,
        "contract": "test/foundry/Vault/contracts/vault/Vault.sol:Vault",
        "label": "_minimalSwapInfoPoolsTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)3520_storage)"
      },
      {
        "astId": 10373,
        "contract": "test/foundry/Vault/contracts/vault/Vault.sol:Vault",
        "label": "_twoTokenPoolTokens",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_struct(TwoTokenPoolTokens)10369_storage)"
      },
      {
        "astId": 4007,
        "contract": "test/foundry/Vault/contracts/vault/Vault.sol:Vault",
        "label": "_poolAssetManagers",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_mapping(t_contract(IERC20)3793,t_address))"
      },
      {
        "astId": 8019,
        "contract": "test/foundry/Vault/contracts/vault/Vault.sol:Vault",
        "label": "_internalTokenBalance",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_contract(IERC20)3793,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32",
        "base": "t_address"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAuthorizer)11086": {
        "encoding": "inplace",
        "label": "contract IAuthorizer",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)3793": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_contract(IERC20)3793,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(contract IERC20 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IERC20)3793,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_mapping(t_contract(IERC20)3793,t_address))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(contract IERC20 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IERC20)3793,t_address)"
      },
      "t_mapping(t_bytes32,t_mapping(t_contract(IERC20)3793,t_bytes32))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(contract IERC20 => bytes32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IERC20)3793,t_bytes32)"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)3520_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)3520_storage"
      },
      "t_mapping(t_bytes32,t_struct(IERC20ToBytes32Map)3177_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableMap.IERC20ToBytes32Map)",
        "numberOfBytes": "32",
        "value": "t_struct(IERC20ToBytes32Map)3177_storage"
      },
      "t_mapping(t_bytes32,t_struct(TwoTokenPoolBalances)10360_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct TwoTokenPoolsBalance.TwoTokenPoolBalances)",
        "numberOfBytes": "32",
        "value": "t_struct(TwoTokenPoolBalances)10360_storage"
      },
      "t_mapping(t_bytes32,t_struct(TwoTokenPoolTokens)10369_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct TwoTokenPoolsBalance.TwoTokenPoolTokens)",
        "numberOfBytes": "32",
        "value": "t_struct(TwoTokenPoolTokens)10369_storage"
      },
      "t_mapping(t_contract(IERC20)3793,t_address)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)3793",
        "label": "mapping(contract IERC20 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_contract(IERC20)3793,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)3793",
        "label": "mapping(contract IERC20 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_contract(IERC20)3793,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)3793",
        "label": "mapping(contract IERC20 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(IERC20ToBytes32MapEntry)3166_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EnumerableMap.IERC20ToBytes32MapEntry)",
        "numberOfBytes": "32",
        "value": "t_struct(IERC20ToBytes32MapEntry)3166_storage"
      },
      "t_struct(AddressSet)3520_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "numberOfBytes": "64",
        "members": [
          {
            "astId": 3515,
            "contract": "test/foundry/Vault/contracts/vault/Vault.sol:Vault",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 3519,
            "contract": "test/foundry/Vault/contracts/vault/Vault.sol:Vault",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ]
      },
      "t_struct(IERC20ToBytes32Map)3177_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.IERC20ToBytes32Map",
        "numberOfBytes": "96",
        "members": [
          {
            "astId": 3168,
            "contract": "test/foundry/Vault/contracts/vault/Vault.sol:Vault",
            "label": "_length",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3172,
            "contract": "test/foundry/Vault/contracts/vault/Vault.sol:Vault",
            "label": "_entries",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(IERC20ToBytes32MapEntry)3166_storage)"
          },
          {
            "astId": 3176,
            "contract": "test/foundry/Vault/contracts/vault/Vault.sol:Vault",
            "label": "_indexes",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_contract(IERC20)3793,t_uint256)"
          }
        ]
      },
      "t_struct(IERC20ToBytes32MapEntry)3166_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.IERC20ToBytes32MapEntry",
        "numberOfBytes": "64",
        "members": [
          {
            "astId": 3163,
            "contract": "test/foundry/Vault/contracts/vault/Vault.sol:Vault",
            "label": "_key",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)3793"
          },
          {
            "astId": 3165,
            "contract": "test/foundry/Vault/contracts/vault/Vault.sol:Vault",
            "label": "_value",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ]
      },
      "t_struct(TwoTokenPoolBalances)10360_storage": {
        "encoding": "inplace",
        "label": "struct TwoTokenPoolsBalance.TwoTokenPoolBalances",
        "numberOfBytes": "64",
        "members": [
          {
            "astId": 10357,
            "contract": "test/foundry/Vault/contracts/vault/Vault.sol:Vault",
            "label": "sharedCash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 10359,
            "contract": "test/foundry/Vault/contracts/vault/Vault.sol:Vault",
            "label": "sharedManaged",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ]
      },
      "t_struct(TwoTokenPoolTokens)10369_storage": {
        "encoding": "inplace",
        "label": "struct TwoTokenPoolsBalance.TwoTokenPoolTokens",
        "numberOfBytes": "96",
        "members": [
          {
            "astId": 10362,
            "contract": "test/foundry/Vault/contracts/vault/Vault.sol:Vault",
            "label": "tokenA",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)3793"
          },
          {
            "astId": 10364,
            "contract": "test/foundry/Vault/contracts/vault/Vault.sol:Vault",
            "label": "tokenB",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)3793"
          },
          {
            "astId": 10368,
            "contract": "test/foundry/Vault/contracts/vault/Vault.sol:Vault",
            "label": "balances",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_struct(TwoTokenPoolBalances)10360_storage)"
          }
        ]
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  },
  "ast": {
    "absolutePath": "test/foundry/Vault/contracts/vault/Vault.sol",
    "id": 8601,
    "exportedSymbols": {
      "Address": [
        3063
      ],
      "AssetHelpers": [
        129
      ],
      "AssetManagers": [
        4424
      ],
      "AssetTransfersHandler": [
        4677
      ],
      "Authentication": [
        206
      ],
      "BalanceAllocation": [
        9483
      ],
      "EIP712": [
        3156
      ],
      "EnumerableMap": [
        3508
      ],
      "EnumerableSet": [
        3715
      ],
      "Errors": [
        518
      ],
      "Fees": [
        4777
      ],
      "FixedPoint": [
        1470
      ],
      "FlashLoans": [
        5022
      ],
      "GeneralPoolsBalance": [
        9893
      ],
      "IAsset": [
        11071
      ],
      "IAuthentication": [
        529
      ],
      "IAuthorizer": [
        11086
      ],
      "IBasePool": [
        11145
      ],
      "IERC20": [
        3793
      ],
      "IFlashLoanRecipient": [
        11164
      ],
      "IGeneralPool": [
        11186
      ],
      "IMinimalSwapInfoPool": [
        11205
      ],
      "IPoolSwapStructs": [
        11230
      ],
      "ISignaturesValidator": [
        547
      ],
      "ITemporarilyPausable": [
        566
      ],
      "IVault": [
        11692
      ],
      "IWETH": [
        11707
      ],
      "InputHelpers": [
        697
      ],
      "LogExpMath": [
        2739
      ],
      "Math": [
        3005
      ],
      "MinimalSwapInfoPoolsBalance": [
        10343
      ],
      "PoolBalances": [
        5754
      ],
      "PoolRegistry": [
        6026
      ],
      "PoolTokens": [
        6435
      ],
      "ProtocolFeesCollector": [
        6704
      ],
      "ReentrancyGuard": [
        3849
      ],
      "SafeCast": [
        3878
      ],
      "SafeERC20": [
        3973
      ],
      "SignaturesValidator": [
        948
      ],
      "Swaps": [
        7986
      ],
      "TemporarilyPausable": [
        1128
      ],
      "TwoTokenPoolsBalance": [
        11067
      ],
      "UserBalance": [
        8537
      ],
      "Vault": [
        8600
      ],
      "VaultAuthorization": [
        8844
      ],
      "_require": [
        224
      ],
      "_revert": [
        232
      ]
    },
    "nodeType": "SourceUnit",
    "src": "688:3205:30",
    "nodes": [
      {
        "id": 8539,
        "nodeType": "PragmaDirective",
        "src": "688:23:30",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.7",
          ".0"
        ]
      },
      {
        "id": 8540,
        "nodeType": "PragmaDirective",
        "src": "712:33:30",
        "nodes": [],
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ]
      },
      {
        "id": 8541,
        "nodeType": "ImportDirective",
        "src": "747:38:30",
        "nodes": [],
        "absolutePath": "test/foundry/Vault/contracts/vault/interfaces/IAuthorizer.sol",
        "file": "./interfaces/IAuthorizer.sol",
        "scope": 8601,
        "sourceUnit": 11087,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 8542,
        "nodeType": "ImportDirective",
        "src": "786:32:30",
        "nodes": [],
        "absolutePath": "test/foundry/Vault/contracts/vault/interfaces/IWETH.sol",
        "file": "./interfaces/IWETH.sol",
        "scope": 8601,
        "sourceUnit": 11708,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 8543,
        "nodeType": "ImportDirective",
        "src": "820:34:30",
        "nodes": [],
        "absolutePath": "test/foundry/Vault/contracts/vault/VaultAuthorization.sol",
        "file": "./VaultAuthorization.sol",
        "scope": 8601,
        "sourceUnit": 8845,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 8544,
        "nodeType": "ImportDirective",
        "src": "855:26:30",
        "nodes": [],
        "absolutePath": "test/foundry/Vault/contracts/vault/FlashLoans.sol",
        "file": "./FlashLoans.sol",
        "scope": 8601,
        "sourceUnit": 5023,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 8545,
        "nodeType": "ImportDirective",
        "src": "882:21:30",
        "nodes": [],
        "absolutePath": "test/foundry/Vault/contracts/vault/Swaps.sol",
        "file": "./Swaps.sol",
        "scope": 8601,
        "sourceUnit": 7987,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 8600,
        "nodeType": "ContractDefinition",
        "src": "3244:648:30",
        "nodes": [
          {
            "id": 8574,
            "nodeType": "FunctionDefinition",
            "src": "3306:322:30",
            "nodes": [],
            "body": {
              "id": 8573,
              "nodeType": "Block",
              "src": "3564:64:30",
              "nodes": [],
              "statements": []
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 8563,
                    "name": "authorizer",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 8554,
                    "src": "3470:10:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IAuthorizer_$11086",
                      "typeString": "contract IAuthorizer"
                    }
                  }
                ],
                "id": 8564,
                "modifierName": {
                  "id": 8562,
                  "name": "VaultAuthorization",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 8844,
                  "src": "3451:18:30",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_VaultAuthorization_$8844_$",
                    "typeString": "type(contract VaultAuthorization)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "3451:30:30"
              },
              {
                "arguments": [
                  {
                    "id": 8566,
                    "name": "weth",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 8556,
                    "src": "3495:4:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IWETH_$11707",
                      "typeString": "contract IWETH"
                    }
                  }
                ],
                "id": 8567,
                "modifierName": {
                  "id": 8565,
                  "name": "AssetHelpers",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 129,
                  "src": "3482:12:30",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_AssetHelpers_$129_$",
                    "typeString": "type(contract AssetHelpers)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "3482:18:30"
              },
              {
                "arguments": [
                  {
                    "id": 8569,
                    "name": "pauseWindowDuration",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 8558,
                    "src": "3521:19:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  {
                    "id": 8570,
                    "name": "bufferPeriodDuration",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 8560,
                    "src": "3542:20:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                ],
                "id": 8571,
                "modifierName": {
                  "id": 8568,
                  "name": "TemporarilyPausable",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1128,
                  "src": "3501:19:30",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_TemporarilyPausable_$1128_$",
                    "typeString": "type(contract TemporarilyPausable)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "3501:62:30"
              }
            ],
            "name": "",
            "parameters": {
              "id": 8561,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 8554,
                  "mutability": "mutable",
                  "name": "authorizer",
                  "nodeType": "VariableDeclaration",
                  "scope": 8574,
                  "src": "3327:22:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IAuthorizer_$11086",
                    "typeString": "contract IAuthorizer"
                  },
                  "typeName": {
                    "id": 8553,
                    "name": "IAuthorizer",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 11086,
                    "src": "3327:11:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IAuthorizer_$11086",
                      "typeString": "contract IAuthorizer"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 8556,
                  "mutability": "mutable",
                  "name": "weth",
                  "nodeType": "VariableDeclaration",
                  "scope": 8574,
                  "src": "3359:10:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IWETH_$11707",
                    "typeString": "contract IWETH"
                  },
                  "typeName": {
                    "id": 8555,
                    "name": "IWETH",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 11707,
                    "src": "3359:5:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IWETH_$11707",
                      "typeString": "contract IWETH"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 8558,
                  "mutability": "mutable",
                  "name": "pauseWindowDuration",
                  "nodeType": "VariableDeclaration",
                  "scope": 8574,
                  "src": "3379:27:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 8557,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3379:7:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 8560,
                  "mutability": "mutable",
                  "name": "bufferPeriodDuration",
                  "nodeType": "VariableDeclaration",
                  "scope": 8574,
                  "src": "3416:28:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 8559,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3416:7:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3317:133:30"
            },
            "returnParameters": {
              "id": 8572,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3564:0:30"
            },
            "scope": 8600,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 8589,
            "nodeType": "FunctionDefinition",
            "src": "3634:111:30",
            "nodes": [],
            "body": {
              "id": 8588,
              "nodeType": "Block",
              "src": "3710:35:30",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 8585,
                        "name": "paused",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8576,
                        "src": "3731:6:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 8584,
                      "name": "_setPaused",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1083,
                      "src": "3720:10:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bool_$returns$__$",
                        "typeString": "function (bool)"
                      }
                    },
                    "id": 8586,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3720:18:30",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 8587,
                  "nodeType": "ExpressionStatement",
                  "src": "3720:18:30"
                }
              ]
            },
            "baseFunctions": [
              11685
            ],
            "functionSelector": "16c38b3c",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 8580,
                "modifierName": {
                  "id": 8579,
                  "name": "nonReentrant",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 3824,
                  "src": "3684:12:30",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "3684:12:30"
              },
              {
                "id": 8582,
                "modifierName": {
                  "id": 8581,
                  "name": "authenticate",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 157,
                  "src": "3697:12:30",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "3697:12:30"
              }
            ],
            "name": "setPaused",
            "overrides": {
              "id": 8578,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3675:8:30"
            },
            "parameters": {
              "id": 8577,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 8576,
                  "mutability": "mutable",
                  "name": "paused",
                  "nodeType": "VariableDeclaration",
                  "scope": 8589,
                  "src": "3653:11:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 8575,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3653:4:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3652:13:30"
            },
            "returnParameters": {
              "id": 8583,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3710:0:30"
            },
            "scope": 8600,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 8599,
            "nodeType": "FunctionDefinition",
            "src": "3804:86:30",
            "nodes": [],
            "body": {
              "id": 8598,
              "nodeType": "Block",
              "src": "3859:31:30",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 8595,
                      "name": "_WETH",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 30,
                      "src": "3876:5:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$__$returns$_t_contract$_IWETH_$11707_$",
                        "typeString": "function () view returns (contract IWETH)"
                      }
                    },
                    "id": 8596,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3876:7:30",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IWETH_$11707",
                      "typeString": "contract IWETH"
                    }
                  },
                  "functionReturnParameters": 8594,
                  "id": 8597,
                  "nodeType": "Return",
                  "src": "3869:14:30"
                }
              ]
            },
            "baseFunctions": [
              11691
            ],
            "functionSelector": "ad5c4648",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "WETH",
            "overrides": {
              "id": 8591,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3834:8:30"
            },
            "parameters": {
              "id": 8590,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3817:2:30"
            },
            "returnParameters": {
              "id": 8594,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 8593,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 8599,
                  "src": "3852:5:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IWETH_$11707",
                    "typeString": "contract IWETH"
                  },
                  "typeName": {
                    "id": 8592,
                    "name": "IWETH",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 11707,
                    "src": "3852:5:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IWETH_$11707",
                      "typeString": "contract IWETH"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3851:7:30"
            },
            "scope": 8600,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 8547,
              "name": "VaultAuthorization",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 8844,
              "src": "3262:18:30",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_VaultAuthorization_$8844",
                "typeString": "contract VaultAuthorization"
              }
            },
            "id": 8548,
            "nodeType": "InheritanceSpecifier",
            "src": "3262:18:30"
          },
          {
            "baseName": {
              "id": 8549,
              "name": "FlashLoans",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 5022,
              "src": "3282:10:30",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_FlashLoans_$5022",
                "typeString": "contract FlashLoans"
              }
            },
            "id": 8550,
            "nodeType": "InheritanceSpecifier",
            "src": "3282:10:30"
          },
          {
            "baseName": {
              "id": 8551,
              "name": "Swaps",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 7986,
              "src": "3294:5:30",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Swaps_$7986",
                "typeString": "contract Swaps"
              }
            },
            "id": 8552,
            "nodeType": "InheritanceSpecifier",
            "src": "3294:5:30"
          }
        ],
        "contractDependencies": [
          129,
          206,
          529,
          547,
          566,
          948,
          1128,
          3156,
          3849,
          4424,
          4677,
          4777,
          5022,
          5754,
          6026,
          6435,
          7986,
          8537,
          8844,
          9893,
          10343,
          11067,
          11692
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 8546,
          "nodeType": "StructuredDocumentation",
          "src": "905:2338:30",
          "text": " @dev The `Vault` is Balancer V2's core contract. A single instance of it exists for the entire network, and it is the\n entity used to interact with Pools by Liquidity Providers who join and exit them, Traders who swap, and Asset\n Managers who withdraw and deposit tokens.\n The `Vault`'s source code is split among a number of sub-contracts, with the goal of improving readability and making\n understanding the system easier. Most sub-contracts have been marked as `abstract` to explicitly indicate that only\n the full `Vault` is meant to be deployed.\n Roughly speaking, these are the contents of each sub-contract:\n  - `AssetManagers`: Pool token Asset Manager registry, and Asset Manager interactions.\n  - `Fees`: set and compute protocol fees.\n  - `FlashLoans`: flash loan transfers and fees.\n  - `PoolBalances`: Pool joins and exits.\n  - `PoolRegistry`: Pool registration, ID management, and basic queries.\n  - `PoolTokens`: Pool token registration and registration, and balance queries.\n  - `Swaps`: Pool swaps.\n  - `UserBalance`: manage user balances (Internal Balance operations and external balance transfers)\n  - `VaultAuthorization`: access control, relayers and signature validation.\n Additionally, the different Pool specializations are handled by the `GeneralPoolsBalance`,\n `MinimalSwapInfoPoolsBalance` and `TwoTokenPoolsBalance` sub-contracts, which in turn make use of the\n `BalanceAllocation` library.\n The most important goal of the `Vault` is to make token swaps use as little gas as possible. This is reflected in a\n multitude of design decisions, from minor things like the format used to store Pool IDs, to major features such as\n the different Pool specialization settings.\n Finally, the large number of tasks carried out by the Vault means its bytecode is very large, close to exceeding\n the contract size limit imposed by EIP 170 (https://eips.ethereum.org/EIPS/eip-170). Manual tuning of the source code\n was required to improve code generation and bring the bytecode size below this limit. This includes extensive\n utilization of `internal` functions (particularly inside modifiers), usage of named return arguments, dedicated\n storage access methods, dynamic revert reason generation, and usage of inline assembly, to name a few."
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          8600,
          7986,
          5754,
          8537,
          6435,
          4424,
          11067,
          10343,
          6026,
          5022,
          8844,
          1128,
          948,
          3156,
          206,
          529,
          4677,
          9893,
          3849,
          4777,
          11692,
          566,
          547,
          129
        ],
        "name": "Vault",
        "scope": 8601
      }
    ],
    "license": "GPL-3.0-or-later"
  },
  "id": 30
}